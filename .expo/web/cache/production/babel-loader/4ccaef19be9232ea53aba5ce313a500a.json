{"ast":null,"code":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});var React=require(\"react\");var react_native_1=require(\"react-native-web/dist/index\");var image_viewer_style_1=require(\"./image-viewer.style\");var Props=function(){function Props(){this.show=false;this.imageUrls=[];this.flipThreshold=80;this.maxOverflow=300;this.index=0;this.failImageSource=undefined;this.backgroundColor='black';this.footerContainerStyle={};this.menuContext={saveToLocal:'save to the album',cancel:'cancel'};this.saveToLocalByLongPress=true;this.enableImageZoom=true;this.style={};this.enableSwipeDown=false;this.enablePreload=false;this.pageAnimateTime=100;this.useNativeDriver=false;this.onLongPress=function(){};this.onClick=function(){};this.onDoubleClick=function(){};this.onSave=function(){};this.onMove=function(){};this.renderHeader=function(){return null;};this.renderFooter=function(){return null;};this.renderIndicator=function(currentIndex,allSize){return React.createElement(react_native_1.View,{style:image_viewer_style_1.simpleStyle.count},React.createElement(react_native_1.Text,{style:image_viewer_style_1.simpleStyle.countText},currentIndex+'/'+allSize));};this.renderImage=function(props){return React.createElement(react_native_1.Image,props);};this.renderArrowLeft=function(){return null;};this.renderArrowRight=function(){return null;};this.onShowModal=function(){};this.onCancel=function(){};this.onSwipeDown=function(){};this.loadingRender=function(){return null;};this.onSaveToCamera=function(){};this.onChange=function(){};}return Props;}();exports.Props=Props;var State=function(){function State(){this.show=false;this.currentShowIndex=0;this.prevIndexProp=0;this.imageLoaded=false;this.imageSizes=[];this.isShowMenu=false;}return State;}();exports.State=State;","map":{"version":3,"sources":["../src/image-viewer.type.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar React = require(\"react\");\nvar react_native_1 = require(\"react-native\");\nvar image_viewer_style_1 = require(\"./image-viewer.style\");\nvar Props = /** @class */ (function () {\n    function Props() {\n        /**\n         * 是否显示\n         */\n        this.show = false;\n        /**\n         * 图片数组\n         */\n        this.imageUrls = [];\n        /**\n         * 滑动到下一页的X阈值\n         */\n        this.flipThreshold = 80;\n        /**\n         * 当前页能滑到下一页X位置最大值\n         */\n        this.maxOverflow = 300;\n        /**\n         * 初始显示第几张图\n         */\n        this.index = 0;\n        /**\n         * 加载失败的图\n         */\n        this.failImageSource = undefined;\n        /**\n         * 背景颜色\n         */\n        this.backgroundColor = 'black';\n        /**\n         * style props for the footer container\n         */\n        this.footerContainerStyle = {};\n        /**\n         * Menu Context Values\n         */\n        this.menuContext = { saveToLocal: 'save to the album', cancel: 'cancel' };\n        /**\n         * 是否开启长按保存到本地的功能\n         */\n        this.saveToLocalByLongPress = true;\n        /**\n         * 是否允许缩放图片\n         */\n        this.enableImageZoom = true;\n        this.style = {};\n        /**\n         * Enable swipe down to close image viewer.\n         * When swipe down, will trigger onCancel.\n         */\n        this.enableSwipeDown = false;\n        /**\n         * 是否预加载图片\n         */\n        this.enablePreload = false;\n        /**\n         * 翻页时的动画时间\n         */\n        this.pageAnimateTime = 100;\n        /**\n         * 是否启用原生动画驱动\n         * Whether to use the native code to perform animations.\n         */\n        this.useNativeDriver = false;\n        /**\n         * 长按图片的回调\n         */\n        this.onLongPress = function () {\n            //\n        };\n        /**\n         * 单击回调\n         */\n        this.onClick = function () {\n            //\n        };\n        /**\n         * 双击回调\n         */\n        this.onDoubleClick = function () {\n            //\n        };\n        /**\n         * 图片保存到本地方法，如果写了这个方法，就不会调取系统默认方法\n         * 针对安卓不支持 saveToCameraRoll 远程图片，可以在安卓调用此回调，调用安卓原生接口\n         */\n        this.onSave = function () {\n            //\n        };\n        this.onMove = function () {\n            //\n        };\n        /**\n         * 自定义头部\n         */\n        this.renderHeader = function () {\n            return null;\n        };\n        /**\n         * 自定义尾部\n         */\n        this.renderFooter = function () {\n            return null;\n        };\n        /**\n         * 自定义计时器\n         */\n        this.renderIndicator = function (currentIndex, allSize) {\n            return React.createElement(react_native_1.View, { style: image_viewer_style_1.simpleStyle.count }, React.createElement(react_native_1.Text, { style: image_viewer_style_1.simpleStyle.countText }, currentIndex + '/' + allSize));\n        };\n        /**\n         * Render image component\n         */\n        this.renderImage = function (props) {\n            return React.createElement(react_native_1.Image, props);\n        };\n        /**\n         * 自定义左翻页按钮\n         */\n        this.renderArrowLeft = function () {\n            return null;\n        };\n        /**\n         * 自定义右翻页按钮\n         */\n        this.renderArrowRight = function () {\n            return null;\n        };\n        /**\n         * 弹出大图的回调\n         */\n        this.onShowModal = function () {\n            //\n        };\n        /**\n         * 取消看图的回调\n         */\n        this.onCancel = function () {\n            //\n        };\n        /**\n         * function that fires when user swipes down\n         */\n        this.onSwipeDown = function () {\n            //\n        };\n        /**\n         * 渲染loading元素\n         */\n        this.loadingRender = function () {\n            return null;\n        };\n        /**\n         * 保存到相册的回调\n         */\n        this.onSaveToCamera = function () {\n            //\n        };\n        /**\n         * 当图片切换时触发\n         */\n        this.onChange = function () {\n            //\n        };\n    }\n    return Props;\n}());\nexports.Props = Props;\nvar State = /** @class */ (function () {\n    function State() {\n        /**\n         * 是否显示\n         */\n        this.show = false;\n        /**\n         * 当前显示第几个\n         */\n        this.currentShowIndex = 0;\n        /**\n         * Used to detect if parent component applied new index prop\n         */\n        this.prevIndexProp = 0;\n        /**\n         * 图片拉取是否完毕了\n         */\n        this.imageLoaded = false;\n        /**\n         * 图片长宽列表\n         */\n        this.imageSizes = [];\n        /**\n         * 是否出现功能菜单\n         */\n        this.isShowMenu = false;\n    }\n    return State;\n}());\nexports.State = State;\n//# sourceMappingURL=image-viewer.type.js.map"]},"metadata":{},"sourceType":"script"}