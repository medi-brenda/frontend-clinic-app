{"ast":null,"code":"import{newConsultation}from\"./consultation\";import{newSchedules}from\"./schedule\";import*as _ from'lodash';export function newDoctor(data){return _.assign({nameEn:'',nameChi:'',gender:'',medicalServices:[],authority:'',regNo:0,docCert:'',consultations:[newConsultation()],schedules:newSchedules()},data);}export function newDoctorProfile(data){return _.assign({id:'',nameEn:'',nameChi:'',gender:'',speciality:[],authorityEn:'',authorityChi:'',regNo:0,docCert:'',consultations:[newConsultation()],schedules:newSchedules(),status:'',benefits:[]},data);}","map":{"version":3,"names":["newConsultation","newSchedules","_","newDoctor","data","assign","nameEn","nameChi","gender","medicalServices","authority","regNo","docCert","consultations","schedules","newDoctorProfile","id","speciality","authorityEn","authorityChi","status","benefits"],"sources":["I:/Workspace/mediWS/mccWS/frontend-clinic-app/src/models/doctor.ts"],"sourcesContent":["import { Consultation, newConsultation } from \"./consultation\";\r\nimport { Option } from \"./option\";\r\nimport { newSchedules, Schedule } from \"./schedule\";\r\nimport * as _ from 'lodash';\r\n\r\nexport type Doctor = {\r\n    nameEn: string,\r\n    nameChi: string,\r\n    gender: string,\r\n    medicalServices: string[],\r\n    authority: string,\r\n    regNo: number,\r\n    docCert: string,\r\n    consultations: Consultation[],\r\n    schedules: Schedule[],\r\n}\r\n\r\nexport function newDoctor(data?: Partial<Doctor>) {\r\n    return _.assign({\r\n        nameEn: '',\r\n        nameChi: '',\r\n        gender: '',\r\n        medicalServices: [],\r\n        authority: '',\r\n        regNo: 0,\r\n        docCert: '',\r\n        consultations: [newConsultation()],\r\n        schedules: newSchedules()\r\n    }, data);\r\n}\r\n\r\nexport type DoctorProfileBenefit = {\r\n    benefitCode: string,\r\n    insurerId: string,\r\n    doctorCode: string,\r\n    doctorFee: string,\r\n    location: string\r\n    insurer: {\r\n        nameChi: string,\r\n        nameEn: string\r\n    }\r\n}\r\n\r\nexport type DoctorProfile = {\r\n    id: string,\r\n    nameEn: string,\r\n    nameChi: string,\r\n    gender: string,\r\n    authorityEn: string,\r\n    authorityChi: string,\r\n    regNo: number,\r\n    docCert: string,\r\n    consultations: Consultation[],\r\n    schedules: Schedule[],\r\n    speciality?: Option[],\r\n    benefits?: DoctorProfileBenefit[],\r\n    status: string\r\n}\r\n\r\nexport function newDoctorProfile(data?: Partial<DoctorProfile>): DoctorProfile {\r\n    return _.assign({\r\n        id: '',\r\n        nameEn: '',\r\n        nameChi: '',\r\n        gender: '',\r\n        speciality: [],\r\n        authorityEn: '',\r\n        authorityChi: '',\r\n        regNo: 0,\r\n        docCert: '',\r\n        consultations: [newConsultation()],\r\n        schedules: newSchedules(),\r\n        status: '',\r\n        benefits: []\r\n    }, data);\r\n}"],"mappings":"AAAA,OAAuBA,eAAvB,sBAEA,OAASC,YAAT,kBACA,MAAO,GAAKC,CAAAA,CAAZ,KAAmB,QAAnB,CAcA,MAAO,SAASC,CAAAA,SAAT,CAAmBC,IAAnB,CAA2C,CAC9C,MAAOF,CAAAA,CAAC,CAACG,MAAF,CAAS,CACZC,MAAM,CAAE,EADI,CAEZC,OAAO,CAAE,EAFG,CAGZC,MAAM,CAAE,EAHI,CAIZC,eAAe,CAAE,EAJL,CAKZC,SAAS,CAAE,EALC,CAMZC,KAAK,CAAE,CANK,CAOZC,OAAO,CAAE,EAPG,CAQZC,aAAa,CAAE,CAACb,eAAe,EAAhB,CARH,CASZc,SAAS,CAAEb,YAAY,EATX,CAAT,CAUJG,IAVI,CAAP,CAWH,CA8BD,MAAO,SAASW,CAAAA,gBAAT,CAA0BX,IAA1B,CAAwE,CAC3E,MAAOF,CAAAA,CAAC,CAACG,MAAF,CAAS,CACZW,EAAE,CAAE,EADQ,CAEZV,MAAM,CAAE,EAFI,CAGZC,OAAO,CAAE,EAHG,CAIZC,MAAM,CAAE,EAJI,CAKZS,UAAU,CAAE,EALA,CAMZC,WAAW,CAAE,EAND,CAOZC,YAAY,CAAE,EAPF,CAQZR,KAAK,CAAE,CARK,CASZC,OAAO,CAAE,EATG,CAUZC,aAAa,CAAE,CAACb,eAAe,EAAhB,CAVH,CAWZc,SAAS,CAAEb,YAAY,EAXX,CAYZmB,MAAM,CAAE,EAZI,CAaZC,QAAQ,CAAE,EAbE,CAAT,CAcJjB,IAdI,CAAP,CAeH"},"metadata":{},"sourceType":"module"}