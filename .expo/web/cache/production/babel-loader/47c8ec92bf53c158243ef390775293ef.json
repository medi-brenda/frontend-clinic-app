{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import{request}from\"../utils/request\";import*as _ from'lodash';var verifyToken=function verifyToken(qrCode){var prerequisite=_.isString(qrCode)&&_.startsWith(qrCode,'V');var appropriateLength=_.startsWith(qrCode,'VZHP')?14:12;return prerequisite&&qrCode.length===appropriateLength;};export var verifyQrCode=function _callee(_ref){var qrCode,token,clinicId,benefitCode,doctorId,i18n,resp;return _regeneratorRuntime.async(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:qrCode=_ref.qrCode,token=_ref.token,clinicId=_ref.clinicId,benefitCode=_ref.benefitCode,doctorId=_ref.doctorId,i18n=_ref.i18n;if(verifyToken(qrCode)){_context.next=3;break;}throw new Error(\"\"+i18n.t(\"Scan.IncorrectCodeFormat\"));case 3:_context.next=5;return _regeneratorRuntime.awrap(request({url:'verifyByPendingList',data:{clinic_id:clinicId,doctor_id:doctorId,benefit:benefitCode,token:qrCode,method:{verify_type:'verify_qr'}},token:token,i18n:i18n}));case 5:resp=_context.sent;return _context.abrupt(\"return\",{copayment:resp.copayment,extraMedLimit:resp.extra_med_limit,insurerName:resp.insurer_name,member:resp.member,referenceLetter:resp.ref_letter,token:qrCode,insurerDescription:{en:resp.insurer_description_en,chi:resp.insurer_description_cn}});case 7:case\"end\":return _context.stop();}}},null,null,null,Promise);};export var verifyPhysicalCard=function _callee2(_ref2){var insurerId,policyNo,token,clinicId,benefitCode,doctorId,i18n,data;return _regeneratorRuntime.async(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:insurerId=_ref2.insurerId,policyNo=_ref2.policyNo,token=_ref2.token,clinicId=_ref2.clinicId,benefitCode=_ref2.benefitCode,doctorId=_ref2.doctorId,i18n=_ref2.i18n;_context2.next=3;return _regeneratorRuntime.awrap(request({url:'verifyByPendingList',data:{clinic_id:Number(clinicId),doctor_id:Number(doctorId),benefit:benefitCode,insurer_id:Number(insurerId),method:{verify_type:'verify_card'},member_key:policyNo},token:token,i18n:i18n}));case 3:data=_context2.sent;return _context2.abrupt(\"return\",{copayment:data.copayment,extraMedLimit:data.extra_med_limit,member:data.policy_number,referenceLetter:data.ref_letter.toString(),patientName:data.patient_name,insurerDescription:{en:data.insurer_description_en,chi:data.insurer_description_cn}});case 5:case\"end\":return _context2.stop();}}},null,null,null,Promise);};","map":{"version":3,"names":["request","_","verifyToken","qrCode","prerequisite","isString","startsWith","appropriateLength","length","verifyQrCode","token","clinicId","benefitCode","doctorId","i18n","Error","t","url","data","clinic_id","doctor_id","benefit","method","verify_type","resp","copayment","extraMedLimit","extra_med_limit","insurerName","insurer_name","member","referenceLetter","ref_letter","insurerDescription","en","insurer_description_en","chi","insurer_description_cn","verifyPhysicalCard","insurerId","policyNo","Number","insurer_id","member_key","policy_number","toString","patientName","patient_name"],"sources":["I:/Workspace/mediWS/mccWS/frontend-clinic-app/src/services/verify.ts"],"sourcesContent":["import { request } from \"../utils/request\";\r\nimport * as _ from 'lodash';\r\nimport { i18n } from \"i18next\";\r\n\r\ntype VerifyQrCode = {\r\n    qrCode: string,\r\n    token: string,\r\n    clinicId: string,\r\n    benefitCode: string,\r\n    doctorId: string,\r\n    i18n: i18n\r\n}\r\n\r\ntype VerifyPhysicalCard = {\r\n    insurerId: string,\r\n    policyNo: string,\r\n    token: string,\r\n    clinicId: string,\r\n    benefitCode: string,\r\n    doctorId: string,\r\n    i18n: i18n\r\n}\r\n\r\nconst verifyToken = (qrCode: string) => {\r\n    const prerequisite = _.isString(qrCode) && _.startsWith(qrCode, 'V');\r\n    const appropriateLength = _.startsWith(qrCode, 'VZHP') ? 14 : 12;\r\n    return prerequisite && qrCode.length === appropriateLength\r\n}\r\n\r\nexport const verifyQrCode = async ({ qrCode, token, clinicId, benefitCode, doctorId, i18n }: VerifyQrCode) => {\r\n    if (!verifyToken(qrCode)) {\r\n        throw new Error(`${i18n.t(\"Scan.IncorrectCodeFormat\")}`);\r\n    }\r\n\r\n    const resp = await request({\r\n        url: 'verifyByPendingList',\r\n        data: {\r\n            clinic_id: clinicId,\r\n            doctor_id: doctorId,\r\n            benefit: benefitCode,\r\n            token: qrCode,\r\n            method: {\r\n                verify_type: 'verify_qr'\r\n            }\r\n        },\r\n        token,\r\n        i18n\r\n    });\r\n    return {\r\n        copayment: resp.copayment,\r\n        extraMedLimit: resp.extra_med_limit,\r\n        insurerName: resp.insurer_name,\r\n        member: resp.member,\r\n        referenceLetter: resp.ref_letter,\r\n        token: qrCode,\r\n        insurerDescription:{\r\n            en:resp.insurer_description_en,\r\n            chi:resp.insurer_description_cn\r\n        }\r\n    };\r\n}\r\n\r\nexport const verifyPhysicalCard = async ({ insurerId, policyNo, token, clinicId, benefitCode, doctorId, i18n }: VerifyPhysicalCard) => {\r\n    const data = await request({\r\n        url: 'verifyByPendingList',\r\n        data: {\r\n            clinic_id: Number(clinicId),\r\n            doctor_id: Number(doctorId),\r\n            benefit: benefitCode,\r\n            insurer_id: Number(insurerId),\r\n            method: {\r\n                verify_type: 'verify_card'\r\n            },\r\n            member_key: policyNo\r\n        },\r\n        token,\r\n        i18n\r\n    });\r\n\r\n    return {\r\n        copayment: data.copayment,\r\n        extraMedLimit: data.extra_med_limit,\r\n        member: data.policy_number,\r\n        referenceLetter: data.ref_letter.toString(),\r\n        patientName: data.patient_name,  \r\n        insurerDescription:{\r\n            en: data.insurer_description_en,\r\n            chi: data.insurer_description_cn\r\n        }\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}