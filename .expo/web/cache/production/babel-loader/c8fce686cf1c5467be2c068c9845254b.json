{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import{UnavailabilityError}from'expo-modules-core';import AppState from\"react-native-web/dist/exports/AppState\";import Linking from\"react-native-web/dist/exports/Linking\";import Platform from\"react-native-web/dist/exports/Platform\";import ExponentWebBrowser from\"./ExpoWebBrowser\";import{WebBrowserResultType,WebBrowserPresentationStyle}from\"./WebBrowser.types\";export{WebBrowserResultType,WebBrowserPresentationStyle};var emptyCustomTabsPackages={defaultBrowserPackage:undefined,preferredBrowserPackage:undefined,browserPackages:[],servicePackages:[]};export function getCustomTabsSupportingBrowsersAsync(){return _regeneratorRuntime.async(function getCustomTabsSupportingBrowsersAsync$(_context){while(1){switch(_context.prev=_context.next){case 0:if(ExponentWebBrowser.getCustomTabsSupportingBrowsersAsync){_context.next=2;break;}throw new UnavailabilityError('WebBrowser','getCustomTabsSupportingBrowsersAsync');case 2:if(!(Platform.OS!=='android')){_context.next=6;break;}return _context.abrupt(\"return\",emptyCustomTabsPackages);case 6:_context.next=8;return _regeneratorRuntime.awrap(ExponentWebBrowser.getCustomTabsSupportingBrowsersAsync());case 8:return _context.abrupt(\"return\",_context.sent);case 9:case\"end\":return _context.stop();}}},null,null,null,Promise);}export function warmUpAsync(browserPackage){return _regeneratorRuntime.async(function warmUpAsync$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(ExponentWebBrowser.warmUpAsync){_context2.next=2;break;}throw new UnavailabilityError('WebBrowser','warmUpAsync');case 2:if(!(Platform.OS!=='android')){_context2.next=6;break;}return _context2.abrupt(\"return\",{});case 6:_context2.next=8;return _regeneratorRuntime.awrap(ExponentWebBrowser.warmUpAsync(browserPackage));case 8:return _context2.abrupt(\"return\",_context2.sent);case 9:case\"end\":return _context2.stop();}}},null,null,null,Promise);}export function mayInitWithUrlAsync(url,browserPackage){return _regeneratorRuntime.async(function mayInitWithUrlAsync$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:if(ExponentWebBrowser.mayInitWithUrlAsync){_context3.next=2;break;}throw new UnavailabilityError('WebBrowser','mayInitWithUrlAsync');case 2:if(!(Platform.OS!=='android')){_context3.next=6;break;}return _context3.abrupt(\"return\",{});case 6:_context3.next=8;return _regeneratorRuntime.awrap(ExponentWebBrowser.mayInitWithUrlAsync(url,browserPackage));case 8:return _context3.abrupt(\"return\",_context3.sent);case 9:case\"end\":return _context3.stop();}}},null,null,null,Promise);}export function coolDownAsync(browserPackage){return _regeneratorRuntime.async(function coolDownAsync$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:if(ExponentWebBrowser.coolDownAsync){_context4.next=2;break;}throw new UnavailabilityError('WebBrowser','coolDownAsync');case 2:if(!(Platform.OS!=='android')){_context4.next=6;break;}return _context4.abrupt(\"return\",{});case 6:_context4.next=8;return _regeneratorRuntime.awrap(ExponentWebBrowser.coolDownAsync(browserPackage));case 8:return _context4.abrupt(\"return\",_context4.sent);case 9:case\"end\":return _context4.stop();}}},null,null,null,Promise);}var browserLocked=false;export function openBrowserAsync(url){var browserParams,result,_args5=arguments;return _regeneratorRuntime.async(function openBrowserAsync$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:browserParams=_args5.length>1&&_args5[1]!==undefined?_args5[1]:{};if(ExponentWebBrowser.openBrowserAsync){_context5.next=3;break;}throw new UnavailabilityError('WebBrowser','openBrowserAsync');case 3:if(!browserLocked){_context5.next=6;break;}if(__DEV__){console.warn('Attempted to call WebBrowser.openBrowserAsync multiple times while already active. Only one WebBrowser controller can be active at any given time.');}return _context5.abrupt(\"return\",{type:WebBrowserResultType.LOCKED});case 6:browserLocked=true;_context5.prev=7;_context5.next=10;return _regeneratorRuntime.awrap(ExponentWebBrowser.openBrowserAsync(url,browserParams));case 10:result=_context5.sent;case 11:_context5.prev=11;browserLocked=false;return _context5.finish(11);case 14:return _context5.abrupt(\"return\",result);case 15:case\"end\":return _context5.stop();}}},null,null,[[7,,11,14]],Promise);}export function dismissBrowser(){if(!ExponentWebBrowser.dismissBrowser){throw new UnavailabilityError('WebBrowser','dismissBrowser');}ExponentWebBrowser.dismissBrowser();}export function openAuthSessionAsync(url,redirectUrl){var options,_args6=arguments;return _regeneratorRuntime.async(function openAuthSessionAsync$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:options=_args6.length>2&&_args6[2]!==undefined?_args6[2]:{};if(!_authSessionIsNativelySupported()){_context6.next=9;break;}if(ExponentWebBrowser.openAuthSessionAsync){_context6.next=4;break;}throw new UnavailabilityError('WebBrowser','openAuthSessionAsync');case 4:if(!['ios','web'].includes(Platform.OS)){_context6.next=6;break;}return _context6.abrupt(\"return\",ExponentWebBrowser.openAuthSessionAsync(url,redirectUrl,options));case 6:return _context6.abrupt(\"return\",ExponentWebBrowser.openAuthSessionAsync(url,redirectUrl));case 9:return _context6.abrupt(\"return\",_openAuthSessionPolyfillAsync(url,redirectUrl,options));case 10:case\"end\":return _context6.stop();}}},null,null,null,Promise);}export function dismissAuthSession(){if(_authSessionIsNativelySupported()){if(!ExponentWebBrowser.dismissAuthSession){throw new UnavailabilityError('WebBrowser','dismissAuthSession');}ExponentWebBrowser.dismissAuthSession();}else{if(!ExponentWebBrowser.dismissBrowser){throw new UnavailabilityError('WebBrowser','dismissAuthSession');}ExponentWebBrowser.dismissBrowser();}}export function maybeCompleteAuthSession(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};if(ExponentWebBrowser.maybeCompleteAuthSession){return ExponentWebBrowser.maybeCompleteAuthSession(options);}return{type:'failed',message:'Not supported on this platform'};}function _authSessionIsNativelySupported(){if(Platform.OS==='android'){return false;}else if(Platform.OS==='web'){return true;}var versionNumber=parseInt(String(Platform.Version),10);return versionNumber>=11;}var _redirectHandler=null;var _onWebBrowserCloseAndroid=null;var _isAppStateAvailable=AppState.currentState!==null;function _onAppStateChangeAndroid(state){if(!_isAppStateAvailable){_isAppStateAvailable=true;return;}if(state==='active'&&_onWebBrowserCloseAndroid){_onWebBrowserCloseAndroid();}}function _openBrowserAndWaitAndroidAsync(startUrl){var browserParams,appStateChangedToActive,stateChangeSubscription,result,type,_await$openBrowserAsy,_args7=arguments;return _regeneratorRuntime.async(function _openBrowserAndWaitAndroidAsync$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:browserParams=_args7.length>1&&_args7[1]!==undefined?_args7[1]:{};appStateChangedToActive=new Promise(function(resolve){_onWebBrowserCloseAndroid=resolve;});stateChangeSubscription=AppState.addEventListener('change',_onAppStateChangeAndroid);result={type:WebBrowserResultType.CANCEL};type=null;_context7.prev=5;_context7.next=8;return _regeneratorRuntime.awrap(openBrowserAsync(startUrl,browserParams));case 8:_await$openBrowserAsy=_context7.sent;type=_await$openBrowserAsy.type;_context7.next=17;break;case 12:_context7.prev=12;_context7.t0=_context7[\"catch\"](5);stateChangeSubscription.remove();_onWebBrowserCloseAndroid=null;throw _context7.t0;case 17:if(!(type==='opened')){_context7.next=21;break;}_context7.next=20;return _regeneratorRuntime.awrap(appStateChangedToActive);case 20:result={type:WebBrowserResultType.DISMISS};case 21:stateChangeSubscription.remove();_onWebBrowserCloseAndroid=null;return _context7.abrupt(\"return\",result);case 24:case\"end\":return _context7.stop();}}},null,null,[[5,12]],Promise);}function _openAuthSessionPolyfillAsync(startUrl,returnUrl){var browserParams,_args8=arguments;return _regeneratorRuntime.async(function _openAuthSessionPolyfillAsync$(_context8){while(1){switch(_context8.prev=_context8.next){case 0:browserParams=_args8.length>2&&_args8[2]!==undefined?_args8[2]:{};if(!_redirectHandler){_context8.next=3;break;}throw new Error(\"The WebBrowser's auth session is in an invalid state with a redirect handler set when it should not be\");case 3:if(!_onWebBrowserCloseAndroid){_context8.next=5;break;}throw new Error(\"WebBrowser is already open, only one can be open at a time\");case 5:_context8.prev=5;if(!(Platform.OS==='android')){_context8.next=12;break;}_context8.next=9;return _regeneratorRuntime.awrap(Promise.race([_openBrowserAndWaitAndroidAsync(startUrl,browserParams),_waitForRedirectAsync(returnUrl)]));case 9:return _context8.abrupt(\"return\",_context8.sent);case 12:_context8.next=14;return _regeneratorRuntime.awrap(Promise.race([openBrowserAsync(startUrl,browserParams),_waitForRedirectAsync(returnUrl)]));case 14:return _context8.abrupt(\"return\",_context8.sent);case 15:_context8.prev=15;if(ExponentWebBrowser.dismissBrowser){ExponentWebBrowser.dismissBrowser();}_stopWaitingForRedirect();return _context8.finish(15);case 19:case\"end\":return _context8.stop();}}},null,null,[[5,,15,19]],Promise);}function _stopWaitingForRedirect(){if(!_redirectHandler){throw new Error(\"The WebBrowser auth session is in an invalid state with no redirect handler when one should be set\");}Linking.removeEventListener('url',_redirectHandler);_redirectHandler=null;}function _waitForRedirectAsync(returnUrl){return new Promise(function(resolve){_redirectHandler=function _redirectHandler(event){if(event.url.startsWith(returnUrl)){resolve({url:event.url,type:'success'});}};Linking.addEventListener('url',_redirectHandler);});}","map":{"version":3,"sources":["../src/WebBrowser.ts"],"names":[],"mappings":"4DAAA,OAAS,mBAAT,KAAoC,mBAApC,C,qLAGA,MAAO,CAAA,kBAAP,wBACA,OAWE,oBAXF,CAcE,2BAdF,0BAkBA,OAUE,oBAVF,CAaE,2BAbF,EAiBA,GAAM,CAAA,uBAAuB,CAAgC,CAC3D,qBAAqB,CAAE,SADoC,CAE3D,uBAAuB,CAAE,SAFkC,CAG3D,eAAe,CAAE,EAH0C,CAI3D,eAAe,CAAE,EAJ0C,CAA7D,CAiBA,MAAO,SAAe,CAAA,oCAAf,oJACA,kBAAkB,CAAC,oCADnB,8BAEG,IAAI,CAAA,mBAAJ,CAAwB,YAAxB,CAAsC,sCAAtC,CAFH,aAID,QAAQ,CAAC,EAAT,GAAgB,SAJf,0DAKI,uBALJ,0DAOU,kBAAkB,CAAC,oCAAnB,EAPV,6HAqBP,MAAO,SAAe,CAAA,WAAf,CAA2B,cAA3B,6HACA,kBAAkB,CAAC,WADnB,+BAEG,IAAI,CAAA,mBAAJ,CAAwB,YAAxB,CAAsC,aAAtC,CAFH,aAID,QAAQ,CAAC,EAAT,GAAgB,SAJf,4DAKI,EALJ,2DAOU,kBAAkB,CAAC,WAAnB,CAA+B,cAA/B,CAPV,gIAuBP,MAAO,SAAe,CAAA,mBAAf,CACL,GADK,CAEL,cAFK,qIAIA,kBAAkB,CAAC,mBAJnB,+BAKG,IAAI,CAAA,mBAAJ,CAAwB,YAAxB,CAAsC,qBAAtC,CALH,aAOD,QAAQ,CAAC,EAAT,GAAgB,SAPf,4DAQI,EARJ,2DAUU,kBAAkB,CAAC,mBAAnB,CAAuC,GAAvC,CAA4C,cAA5C,CAVV,gIA2BP,MAAO,SAAe,CAAA,aAAf,CAA6B,cAA7B,+HACA,kBAAkB,CAAC,aADnB,+BAEG,IAAI,CAAA,mBAAJ,CAAwB,YAAxB,CAAsC,eAAtC,CAFH,aAID,QAAQ,CAAC,EAAT,GAAgB,SAJf,4DAKI,EALJ,2DAOU,kBAAkB,CAAC,aAAnB,CAAiC,cAAjC,CAPV,gIAWP,GAAI,CAAA,aAAa,CAAG,KAApB,CAkBA,MAAO,SAAe,CAAA,gBAAf,CACL,GADK,yKAEL,aAFK,kDAEkC,EAFlC,IAIA,kBAAkB,CAAC,gBAJnB,+BAKG,IAAI,CAAA,mBAAJ,CAAwB,YAAxB,CAAsC,kBAAtC,CALH,YAQD,aARC,0BAWH,GAAI,OAAJ,CAAa,CACX,OAAO,CAAC,IAAR,CACE,oJADF,EAGD,CAfE,iCAiBI,CAAE,IAAI,CAAE,oBAAoB,CAAC,MAA7B,CAjBJ,SAmBL,aAAa,CAAG,IAAhB,CAnBK,oEAuBY,kBAAkB,CAAC,gBAAnB,CAAoC,GAApC,CAAyC,aAAzC,CAvBZ,UAuBH,MAvBG,0CA0BH,aAAa,CAAG,KAAhB,CA1BG,qEA6BE,MA7BF,iFAuCP,MAAM,SAAU,CAAA,cAAV,EAAwB,CAC5B,GAAI,CAAC,kBAAkB,CAAC,cAAxB,CAAwC,CACtC,KAAM,IAAI,CAAA,mBAAJ,CAAwB,YAAxB,CAAsC,gBAAtC,CAAN,CACD,CACD,kBAAkB,CAAC,cAAnB,GACD,CAgDD,MAAO,SAAe,CAAA,oBAAf,CACL,GADK,CAEL,WAFK,gKAGL,OAHK,kDAG6B,EAH7B,KAKD,+BAA+B,EAL9B,6BAME,kBAAkB,CAAC,oBANrB,+BAOK,IAAI,CAAA,mBAAJ,CAAwB,YAAxB,CAAsC,sBAAtC,CAPL,YASC,CAAC,KAAD,CAAQ,KAAR,EAAe,QAAf,CAAwB,QAAQ,CAAC,EAAjC,CATD,2DAUM,kBAAkB,CAAC,oBAAnB,CAAwC,GAAxC,CAA6C,WAA7C,CAA0D,OAA1D,CAVN,0CAYI,kBAAkB,CAAC,oBAAnB,CAAwC,GAAxC,CAA6C,WAA7C,CAZJ,0CAcI,6BAA6B,CAAC,GAAD,CAAM,WAAN,CAAmB,OAAnB,CAdjC,yEAmBP,MAAM,SAAU,CAAA,kBAAV,EAA4B,CAChC,GAAI,+BAA+B,EAAnC,CAAuC,CACrC,GAAI,CAAC,kBAAkB,CAAC,kBAAxB,CAA4C,CAC1C,KAAM,IAAI,CAAA,mBAAJ,CAAwB,YAAxB,CAAsC,oBAAtC,CAAN,CACD,CACD,kBAAkB,CAAC,kBAAnB,GACD,CALD,IAKO,CACL,GAAI,CAAC,kBAAkB,CAAC,cAAxB,CAAwC,CACtC,KAAM,IAAI,CAAA,mBAAJ,CAAwB,YAAxB,CAAsC,oBAAtC,CAAN,CACD,CACD,kBAAkB,CAAC,cAAnB,GACD,CACF,CA+BD,MAAM,SAAU,CAAA,wBAAV,EAC8C,IAAlD,CAAA,OAAkD,2DAAF,EAAE,CAElD,GAAI,kBAAkB,CAAC,wBAAvB,CAAiD,CAC/C,MAAO,CAAA,kBAAkB,CAAC,wBAAnB,CAA4C,OAA5C,CAAP,CACD,CACD,MAAO,CAAE,IAAI,CAAE,QAAR,CAAkB,OAAO,CAAE,gCAA3B,CAAP,CACD,CAID,QAAS,CAAA,+BAAT,EAAwC,CACtC,GAAI,QAAQ,CAAC,EAAT,GAAgB,SAApB,CAA+B,CAC7B,MAAO,MAAP,CACD,CAFD,IAEO,IAAI,QAAQ,CAAC,EAAT,GAAgB,KAApB,CAA2B,CAChC,MAAO,KAAP,CACD,CAED,GAAM,CAAA,aAAa,CAAG,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,OAAV,CAAP,CAA2B,EAA3B,CAA9B,CACA,MAAO,CAAA,aAAa,EAAI,EAAxB,CACD,CAED,GAAI,CAAA,gBAAgB,CAA4C,IAAhE,CASA,GAAI,CAAA,yBAAyB,CAAwB,IAArD,CAMA,GAAI,CAAA,oBAAoB,CAAY,QAAQ,CAAC,YAAT,GAA0B,IAA9D,CACA,QAAS,CAAA,wBAAT,CAAkC,KAAlC,CAAuD,CACrD,GAAI,CAAC,oBAAL,CAA2B,CACzB,oBAAoB,CAAG,IAAvB,CACA,OACD,CAED,GAAI,KAAK,GAAK,QAAV,EAAsB,yBAA1B,CAAqD,CACnD,yBAAyB,GAC1B,CACF,CAED,QAAe,CAAA,+BAAf,CACE,QADF,mQAEE,aAFF,kDAEyC,EAFzC,CAIQ,uBAJR,CAIkC,GAAI,CAAA,OAAJ,CAAkB,SAAC,OAAD,CAAY,CAC5D,yBAAyB,CAAG,OAA5B,CACD,CAF+B,CAJlC,CAOQ,uBAPR,CAOkC,QAAQ,CAAC,gBAAT,CAA0B,QAA1B,CAAoC,wBAApC,CAPlC,CASM,MATN,CASiC,CAAE,IAAI,CAAE,oBAAoB,CAAC,MAA7B,CATjC,CAUM,IAVN,CAU4B,IAV5B,oEAasB,gBAAgB,CAAC,QAAD,CAAW,aAAX,CAbtC,8CAaO,IAbP,uBAaO,IAbP,sFAeI,uBAAuB,CAAC,MAAxB,GACA,yBAAyB,CAAG,IAA5B,CAhBJ,gCAoBM,IAAI,GAAK,QApBf,+EAqBU,uBArBV,UAsBI,MAAM,CAAG,CAAE,IAAI,CAAE,oBAAoB,CAAC,OAA7B,CAAT,CAtBJ,QAyBE,uBAAuB,CAAC,MAAxB,GACA,yBAAyB,CAAG,IAA5B,CA1BF,iCA2BS,MA3BT,6EA8BA,QAAe,CAAA,6BAAf,CACE,QADF,CAEE,SAFF,+KAGE,aAHF,kDAGyC,EAHzC,KAKM,gBALN,+BAMU,IAAI,CAAA,KAAJ,0GANV,YAWM,yBAXN,+BAYU,IAAI,CAAA,KAAJ,8DAZV,8BAgBQ,QAAQ,CAAC,EAAT,GAAgB,SAhBxB,8EAiBmB,OAAO,CAAC,IAAR,CAAa,CACxB,+BAA+B,CAAC,QAAD,CAAW,aAAX,CADP,CAExB,qBAAqB,CAAC,SAAD,CAFG,CAAb,CAjBnB,qHAsBmB,OAAO,CAAC,IAAR,CAAa,CACxB,gBAAgB,CAAC,QAAD,CAAW,aAAX,CADQ,CAExB,qBAAqB,CAAC,SAAD,CAFG,CAAb,CAtBnB,qFA8BI,GAAI,kBAAkB,CAAC,cAAvB,CAAuC,CACrC,kBAAkB,CAAC,cAAnB,GACD,CAED,uBAAuB,GAlC3B,2GAsCA,QAAS,CAAA,uBAAT,EAAgC,CAC9B,GAAI,CAAC,gBAAL,CAAuB,CACrB,KAAM,IAAI,CAAA,KAAJ,sGAAN,CAGD,CAED,OAAO,CAAC,mBAAR,CAA4B,KAA5B,CAAmC,gBAAnC,EACA,gBAAgB,CAAG,IAAnB,CACD,CAED,QAAS,CAAA,qBAAT,CAA+B,SAA/B,CAAgD,CAC9C,MAAO,IAAI,CAAA,OAAJ,CAAY,SAAC,OAAD,CAAY,CAC7B,gBAAgB,CAAG,0BAAC,KAAD,CAAyB,CAC1C,GAAI,KAAK,CAAC,GAAN,CAAU,UAAV,CAAqB,SAArB,CAAJ,CAAqC,CACnC,OAAO,CAAC,CAAE,GAAG,CAAE,KAAK,CAAC,GAAb,CAAkB,IAAI,CAAE,SAAxB,CAAD,CAAP,CACD,CACF,CAJD,CAMA,OAAO,CAAC,gBAAR,CAAyB,KAAzB,CAAgC,gBAAhC,EACD,CARM,CAAP,CASD","sourcesContent":["import { UnavailabilityError } from 'expo-modules-core';\nimport { AppState, AppStateStatus, Linking, Platform } from 'react-native';\n\nimport ExponentWebBrowser from './ExpoWebBrowser';\nimport {\n  RedirectEvent,\n  WebBrowserAuthSessionResult,\n  WebBrowserCompleteAuthSessionOptions,\n  WebBrowserCompleteAuthSessionResult,\n  WebBrowserCoolDownResult,\n  WebBrowserCustomTabsResults,\n  WebBrowserMayInitWithUrlResult,\n  WebBrowserOpenOptions,\n  WebBrowserRedirectResult,\n  WebBrowserResult,\n  WebBrowserResultType,\n  WebBrowserWarmUpResult,\n  WebBrowserWindowFeatures,\n  WebBrowserPresentationStyle,\n  AuthSessionOpenOptions,\n} from './WebBrowser.types';\n\nexport {\n  WebBrowserAuthSessionResult,\n  WebBrowserCompleteAuthSessionOptions,\n  WebBrowserCompleteAuthSessionResult,\n  WebBrowserCoolDownResult,\n  WebBrowserCustomTabsResults,\n  WebBrowserMayInitWithUrlResult,\n  WebBrowserOpenOptions,\n  WebBrowserRedirectResult,\n  WebBrowserResult,\n  WebBrowserResultType,\n  WebBrowserWarmUpResult,\n  WebBrowserWindowFeatures,\n  WebBrowserPresentationStyle,\n  AuthSessionOpenOptions,\n};\n\nconst emptyCustomTabsPackages: WebBrowserCustomTabsResults = {\n  defaultBrowserPackage: undefined,\n  preferredBrowserPackage: undefined,\n  browserPackages: [],\n  servicePackages: [],\n};\n\n// @needsAudit\n/**\n * Returns a list of applications package names supporting Custom Tabs, Custom Tabs\n * service, user chosen and preferred one. This may not be fully reliable, since it uses\n * `PackageManager.getResolvingActivities` under the hood. (For example, some browsers might not be\n * present in browserPackages list once another browser is set to default.)\n *\n * @return The promise which fulfils with [`WebBrowserCustomTabsResults`](#webbrowsercustomtabsresults) object.\n * @platform android\n */\nexport async function getCustomTabsSupportingBrowsersAsync(): Promise<WebBrowserCustomTabsResults> {\n  if (!ExponentWebBrowser.getCustomTabsSupportingBrowsersAsync) {\n    throw new UnavailabilityError('WebBrowser', 'getCustomTabsSupportingBrowsersAsync');\n  }\n  if (Platform.OS !== 'android') {\n    return emptyCustomTabsPackages;\n  } else {\n    return await ExponentWebBrowser.getCustomTabsSupportingBrowsersAsync();\n  }\n}\n\n// @needsAudit\n/**\n * This method calls `warmUp` method on [CustomTabsClient](https://developer.android.com/reference/android/support/customtabs/CustomTabsClient.html#warmup(long))\n * for specified package.\n *\n * @param browserPackage Package of browser to be warmed up. If not set, preferred browser will be warmed.\n *\n * @return A promise which fulfils with `WebBrowserWarmUpResult` object.\n * @platform android\n */\nexport async function warmUpAsync(browserPackage?: string): Promise<WebBrowserWarmUpResult> {\n  if (!ExponentWebBrowser.warmUpAsync) {\n    throw new UnavailabilityError('WebBrowser', 'warmUpAsync');\n  }\n  if (Platform.OS !== 'android') {\n    return {};\n  } else {\n    return await ExponentWebBrowser.warmUpAsync(browserPackage);\n  }\n}\n\n// @needsAudit\n/**\n * This method initiates (if needed) [CustomTabsSession](https://developer.android.com/reference/android/support/customtabs/CustomTabsSession.html#maylaunchurl)\n * and calls its `mayLaunchUrl` method for browser specified by the package.\n *\n * @param url The url of page that is likely to be loaded first when opening browser.\n * @param browserPackage Package of browser to be informed. If not set, preferred\n * browser will be used.\n *\n * @return A promise which fulfils with `WebBrowserMayInitWithUrlResult` object.\n * @platform android\n */\nexport async function mayInitWithUrlAsync(\n  url: string,\n  browserPackage?: string\n): Promise<WebBrowserMayInitWithUrlResult> {\n  if (!ExponentWebBrowser.mayInitWithUrlAsync) {\n    throw new UnavailabilityError('WebBrowser', 'mayInitWithUrlAsync');\n  }\n  if (Platform.OS !== 'android') {\n    return {};\n  } else {\n    return await ExponentWebBrowser.mayInitWithUrlAsync(url, browserPackage);\n  }\n}\n\n// @needsAudit\n/**\n * This methods removes all bindings to services created by [`warmUpAsync`](#webbrowserwarmupasyncbrowserpackage)\n * or [`mayInitWithUrlAsync`](#webbrowsermayinitwithurlasyncurl-browserpackage). You should call\n * this method once you don't need them to avoid potential memory leaks. However, those binding\n * would be cleared once your application is destroyed, which might be sufficient in most cases.\n *\n * @param browserPackage Package of browser to be cooled. If not set, preferred browser will be used.\n *\n * @return The promise which fulfils with ` WebBrowserCoolDownResult` when cooling is performed, or\n * an empty object when there was no connection to be dismissed.\n * @platform android\n */\nexport async function coolDownAsync(browserPackage?: string): Promise<WebBrowserCoolDownResult> {\n  if (!ExponentWebBrowser.coolDownAsync) {\n    throw new UnavailabilityError('WebBrowser', 'coolDownAsync');\n  }\n  if (Platform.OS !== 'android') {\n    return {};\n  } else {\n    return await ExponentWebBrowser.coolDownAsync(browserPackage);\n  }\n}\n\nlet browserLocked = false;\n\n// @needsAudit\n/**\n * Opens the url with Safari in a modal on iOS using [`SFSafariViewController`](https://developer.apple.com/documentation/safariservices/sfsafariviewcontroller),\n * and Chrome in a new [custom tab](https://developer.chrome.com/multidevice/android/customtabs)\n * on Android. On iOS, the modal Safari will not share cookies with the system Safari. If you need\n * this, use [`openAuthSessionAsync`](#webbrowseropenauthsessionasyncurl-redirecturl-browserparams).\n *\n * @param url The url to open in the web browser.\n * @param browserParams A dictionary of key-value pairs.\n *\n * @return The promise behaves differently based on the platform.\n * On Android promise resolves with `{type: 'opened'}` if we were able to open browser.\n * On iOS:\n * - If the user closed the web browser, the Promise resolves with `{ type: 'cancel' }`.\n * - If the browser is closed using [`dismissBrowser`](#webbrowserdismissbrowser), the Promise resolves with `{ type: 'dismiss' }`.\n */\nexport async function openBrowserAsync(\n  url: string,\n  browserParams: WebBrowserOpenOptions = {}\n): Promise<WebBrowserResult> {\n  if (!ExponentWebBrowser.openBrowserAsync) {\n    throw new UnavailabilityError('WebBrowser', 'openBrowserAsync');\n  }\n\n  if (browserLocked) {\n    // Prevent multiple sessions from running at the same time, WebBrowser doesn't\n    // support it this makes the behavior predictable.\n    if (__DEV__) {\n      console.warn(\n        'Attempted to call WebBrowser.openBrowserAsync multiple times while already active. Only one WebBrowser controller can be active at any given time.'\n      );\n    }\n\n    return { type: WebBrowserResultType.LOCKED };\n  }\n  browserLocked = true;\n\n  let result: WebBrowserResult;\n  try {\n    result = await ExponentWebBrowser.openBrowserAsync(url, browserParams);\n  } finally {\n    // WebBrowser session complete, unset lock\n    browserLocked = false;\n  }\n\n  return result;\n}\n\n// @needsAudit\n/**\n * Dismisses the presented web browser.\n *\n * @return The `void` on successful attempt, or throws error, if dismiss functionality is not avaiable.\n * @platform ios\n */\nexport function dismissBrowser(): void {\n  if (!ExponentWebBrowser.dismissBrowser) {\n    throw new UnavailabilityError('WebBrowser', 'dismissBrowser');\n  }\n  ExponentWebBrowser.dismissBrowser();\n}\n\n// @needsAudit\n/**\n * # On iOS:\n * Opens the url with Safari in a modal using `SFAuthenticationSession` on iOS 11 and greater,\n * and falling back on a `SFSafariViewController`. The user will be asked whether to allow the app\n * to authenticate using the given url.\n *\n * # On Android:\n * This will be done using a \"custom Chrome tabs\" browser, [AppState](../react-native/appstate/),\n * and [Linking](./linking/) APIs.\n *\n * # On web:\n * > This API can only be used in a secure environment (`https`). You can use expo `start:web --https`\n * to test this. Otherwise, an error with code [`ERR_WEB_BROWSER_CRYPTO`](#errwebbrowsercrypto) will be thrown.\n * This will use the browser's [`window.open()`](https://developer.mozilla.org/en-US/docs/Web/API/Window/open) API.\n * - _Desktop_: This will create a new web popup window in the browser that can be closed later using `WebBrowser.maybeCompleteAuthSession()`.\n * - _Mobile_: This will open a new tab in the browser which can be closed using `WebBrowser.maybeCompleteAuthSession()`.\n *\n * How this works on web:\n * - A crypto state will be created for verifying the redirect.\n *   - This means you need to run with `expo start:web --https`\n * - The state will be added to the window's `localstorage`. This ensures that auth cannot complete\n *   unless it's done from a page running with the same origin as it was started.\n *   Ex: if `openAuthSessionAsync` is invoked on `https://localhost:19006`, then `maybeCompleteAuthSession`\n *   must be invoked on a page hosted from the origin `https://localhost:19006`. Using a different\n *   website, or even a different host like `https://128.0.0.*:19006` for example will not work.\n * - A timer will be started to check for every 1000 milliseconds (1 second) to detect if the window\n *   has been closed by the user. If this happens then a promise will resolve with `{ type: 'dismiss' }`.\n *\n * > On mobile web, Chrome and Safari will block any call to [`window.open()`](https://developer.mozilla.org/en-US/docs/Web/API/Window/open)\n * which takes too long to fire after a user interaction. This method must be invoked immediately\n * after a user interaction. If the event is blocked, an error with code [`ERR_WEB_BROWSER_BLOCKED`](#errwebbrowserblocked) will be thrown.\n *\n * @param url The url to open in the web browser. This should be a login page.\n * @param redirectUrl _Optional_ - The url to deep link back into your app. By default, this will be [`Constants.linkingUrl`](./constants/#expoconstantslinkinguri).\n * @param options _Optional_ - An object extending the [`WebBrowserOpenOptions`](#webbrowseropenoptions).\n * If there is no native AuthSession implementation available (which is the case on Android)\n * these params will be used in the browser polyfill. If there is a native AuthSession implementation,\n * these params will be ignored.\n *\n * @return\n * - If the user does not permit the application to authenticate with the given url, the Promise fulfills with `{ type: 'cancel' }` object.\n * - If the user closed the web browser, the Promise fulfills with `{ type: 'cancel' }` object.\n * - If the browser is closed using [`dismissBrowser`](#webbrowserdismissbrowser),\n * the Promise fulfills with `{ type: 'dismiss' }` object.\n */\nexport async function openAuthSessionAsync(\n  url: string,\n  redirectUrl: string,\n  options: AuthSessionOpenOptions = {}\n): Promise<WebBrowserAuthSessionResult> {\n  if (_authSessionIsNativelySupported()) {\n    if (!ExponentWebBrowser.openAuthSessionAsync) {\n      throw new UnavailabilityError('WebBrowser', 'openAuthSessionAsync');\n    }\n    if (['ios', 'web'].includes(Platform.OS)) {\n      return ExponentWebBrowser.openAuthSessionAsync(url, redirectUrl, options);\n    }\n    return ExponentWebBrowser.openAuthSessionAsync(url, redirectUrl);\n  } else {\n    return _openAuthSessionPolyfillAsync(url, redirectUrl, options);\n  }\n}\n\n// @docsMissing\nexport function dismissAuthSession(): void {\n  if (_authSessionIsNativelySupported()) {\n    if (!ExponentWebBrowser.dismissAuthSession) {\n      throw new UnavailabilityError('WebBrowser', 'dismissAuthSession');\n    }\n    ExponentWebBrowser.dismissAuthSession();\n  } else {\n    if (!ExponentWebBrowser.dismissBrowser) {\n      throw new UnavailabilityError('WebBrowser', 'dismissAuthSession');\n    }\n    ExponentWebBrowser.dismissBrowser();\n  }\n}\n\n// @needsAudit\n/**\n * Possibly completes an authentication session on web in a window popup. The method\n * should be invoked on the page that the window redirects to.\n *\n * @param options\n *\n * @return Returns an object with message about why the redirect failed or succeeded:\n *\n * If `type` is set to `failed`, the reason depends on the message:\n * - `Not supported on this platform`: If the platform doesn't support this method (iOS, Android).\n * - `Cannot use expo-web-browser in a non-browser environment`: If the code was executed in an SSR\n *   or node environment.\n * - `No auth session is currently in progress`: (the cached state wasn't found in local storage).\n *   This can happen if the window redirects to an origin (website) that is different to the initial\n *   website origin. If this happens in development, it may be because the auth started on localhost\n *   and finished on your computer port (Ex: `128.0.0.*`). This is controlled by the `redirectUrl`\n *   and `returnUrl`.\n * - `Current URL \"<URL>\" and original redirect URL \"<URL>\" do not match`: This can occur when the\n *   redirect URL doesn't match what was initial defined as the `returnUrl`. You can skip this test\n *   in development by passing `{ skipRedirectCheck: true }` to the function.\n *\n * If `type` is set to `success`, the parent window will attempt to close the child window immediately.\n *\n * If the error `ERR_WEB_BROWSER_REDIRECT` was thrown, it may mean that the parent window was\n * reloaded before the auth was completed. In this case you'll need to close the child window manually.\n *\n * @platform web\n */\nexport function maybeCompleteAuthSession(\n  options: WebBrowserCompleteAuthSessionOptions = {}\n): WebBrowserCompleteAuthSessionResult {\n  if (ExponentWebBrowser.maybeCompleteAuthSession) {\n    return ExponentWebBrowser.maybeCompleteAuthSession(options);\n  }\n  return { type: 'failed', message: 'Not supported on this platform' };\n}\n\n/* iOS <= 10 and Android polyfill for SFAuthenticationSession flow */\n\nfunction _authSessionIsNativelySupported(): boolean {\n  if (Platform.OS === 'android') {\n    return false;\n  } else if (Platform.OS === 'web') {\n    return true;\n  }\n\n  const versionNumber = parseInt(String(Platform.Version), 10);\n  return versionNumber >= 11;\n}\n\nlet _redirectHandler: ((event: RedirectEvent) => void) | null = null;\n\n/*\n * openBrowserAsync on Android doesn't wait until closed, so we need to polyfill\n * it with AppState\n */\n\n// Store the `resolve` function from a Promise to fire when the AppState\n// returns to active\nlet _onWebBrowserCloseAndroid: null | (() => void) = null;\n\n// If the initial AppState.currentState is null, we assume that the first call to\n// AppState#change event is not actually triggered by a real change,\n// is triggered instead by the bridge capturing the current state\n// (https://reactnative.dev/docs/appstate#basic-usage)\nlet _isAppStateAvailable: boolean = AppState.currentState !== null;\nfunction _onAppStateChangeAndroid(state: AppStateStatus) {\n  if (!_isAppStateAvailable) {\n    _isAppStateAvailable = true;\n    return;\n  }\n\n  if (state === 'active' && _onWebBrowserCloseAndroid) {\n    _onWebBrowserCloseAndroid();\n  }\n}\n\nasync function _openBrowserAndWaitAndroidAsync(\n  startUrl: string,\n  browserParams: WebBrowserOpenOptions = {}\n): Promise<WebBrowserResult> {\n  const appStateChangedToActive = new Promise<void>((resolve) => {\n    _onWebBrowserCloseAndroid = resolve;\n  });\n  const stateChangeSubscription = AppState.addEventListener('change', _onAppStateChangeAndroid);\n\n  let result: WebBrowserResult = { type: WebBrowserResultType.CANCEL };\n  let type: string | null = null;\n\n  try {\n    ({ type } = await openBrowserAsync(startUrl, browserParams));\n  } catch (e) {\n    stateChangeSubscription.remove();\n    _onWebBrowserCloseAndroid = null;\n    throw e;\n  }\n\n  if (type === 'opened') {\n    await appStateChangedToActive;\n    result = { type: WebBrowserResultType.DISMISS };\n  }\n\n  stateChangeSubscription.remove();\n  _onWebBrowserCloseAndroid = null;\n  return result;\n}\n\nasync function _openAuthSessionPolyfillAsync(\n  startUrl: string,\n  returnUrl: string,\n  browserParams: WebBrowserOpenOptions = {}\n): Promise<WebBrowserAuthSessionResult> {\n  if (_redirectHandler) {\n    throw new Error(\n      `The WebBrowser's auth session is in an invalid state with a redirect handler set when it should not be`\n    );\n  }\n\n  if (_onWebBrowserCloseAndroid) {\n    throw new Error(`WebBrowser is already open, only one can be open at a time`);\n  }\n\n  try {\n    if (Platform.OS === 'android') {\n      return await Promise.race([\n        _openBrowserAndWaitAndroidAsync(startUrl, browserParams),\n        _waitForRedirectAsync(returnUrl),\n      ]);\n    } else {\n      return await Promise.race([\n        openBrowserAsync(startUrl, browserParams),\n        _waitForRedirectAsync(returnUrl),\n      ]);\n    }\n  } finally {\n    // We can't dismiss the browser on Android, only call this when it's available.\n    // Users on Android need to manually press the 'x' button in Chrome Custom Tabs, sadly.\n    if (ExponentWebBrowser.dismissBrowser) {\n      ExponentWebBrowser.dismissBrowser();\n    }\n\n    _stopWaitingForRedirect();\n  }\n}\n\nfunction _stopWaitingForRedirect() {\n  if (!_redirectHandler) {\n    throw new Error(\n      `The WebBrowser auth session is in an invalid state with no redirect handler when one should be set`\n    );\n  }\n\n  Linking.removeEventListener('url', _redirectHandler);\n  _redirectHandler = null;\n}\n\nfunction _waitForRedirectAsync(returnUrl: string): Promise<WebBrowserRedirectResult> {\n  return new Promise((resolve) => {\n    _redirectHandler = (event: RedirectEvent) => {\n      if (event.url.startsWith(returnUrl)) {\n        resolve({ url: event.url, type: 'success' });\n      }\n    };\n\n    Linking.addEventListener('url', _redirectHandler);\n  });\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}