{"ast":null,"code":"var _ExpoUpdates$releaseC,_ExpoUpdates$channel,_ExpoUpdates$runtimeV,_ExpoUpdates$localAss,_ref,_manifest$developer,_NativeModulesProxy$E;import _regeneratorRuntime from\"@babel/runtime/regenerator\";import{RCTDeviceEventEmitter,CodedError,NativeModulesProxy,UnavailabilityError}from'expo-modules-core';import{EventEmitter}from'fbemitter';import ExpoUpdates from\"./ExpoUpdates\";export*from\"./Updates.types\";export var updateId=ExpoUpdates.updateId&&typeof ExpoUpdates.updateId==='string'?ExpoUpdates.updateId.toLowerCase():null;export var releaseChannel=(_ExpoUpdates$releaseC=ExpoUpdates.releaseChannel)!=null?_ExpoUpdates$releaseC:'default';export var channel=(_ExpoUpdates$channel=ExpoUpdates.channel)!=null?_ExpoUpdates$channel:null;export var runtimeVersion=(_ExpoUpdates$runtimeV=ExpoUpdates.runtimeVersion)!=null?_ExpoUpdates$runtimeV:null;export var localAssets=(_ExpoUpdates$localAss=ExpoUpdates.localAssets)!=null?_ExpoUpdates$localAss:{};export var isEmergencyLaunch=ExpoUpdates.isEmergencyLaunch||false;export var isUsingEmbeddedAssets=ExpoUpdates.isUsingEmbeddedAssets||false;export var manifest=(_ref=ExpoUpdates.manifestString?JSON.parse(ExpoUpdates.manifestString):ExpoUpdates.manifest)!=null?_ref:{};export var createdAt=ExpoUpdates.commitTime?new Date(ExpoUpdates.commitTime):null;var isUsingDeveloperTool=!!((_manifest$developer=manifest.developer)!=null&&_manifest$developer.tool);var isUsingExpoDevelopmentClient=((_NativeModulesProxy$E=NativeModulesProxy.ExponentConstants)==null?void 0:_NativeModulesProxy$E.appOwnership)==='expo';var manualUpdatesInstructions=isUsingExpoDevelopmentClient?'To test manual updates, publish your project using `expo publish` and open the published '+'version in this development client.':'To test manual updates, make a release build with `npm run ios --configuration Release` or '+'`npm run android --variant Release`.';export function reloadAsync(){return _regeneratorRuntime.async(function reloadAsync$(_context){while(1){switch(_context.prev=_context.next){case 0:if(ExpoUpdates.reload){_context.next=2;break;}throw new UnavailabilityError('Updates','reloadAsync');case 2:if(!(__DEV__&&!isUsingExpoDevelopmentClient)){_context.next=4;break;}throw new CodedError('ERR_UPDATES_DISABLED',\"You cannot use the Updates module in development mode in a production app. \"+manualUpdatesInstructions);case 4:_context.next=6;return _regeneratorRuntime.awrap(ExpoUpdates.reload());case 6:case\"end\":return _context.stop();}}},null,null,null,Promise);}export function checkForUpdateAsync(){var result;return _regeneratorRuntime.async(function checkForUpdateAsync$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(ExpoUpdates.checkForUpdateAsync){_context2.next=2;break;}throw new UnavailabilityError('Updates','checkForUpdateAsync');case 2:if(!(__DEV__||isUsingDeveloperTool)){_context2.next=4;break;}throw new CodedError('ERR_UPDATES_DISABLED',\"You cannot check for updates in development mode. \"+manualUpdatesInstructions);case 4:_context2.next=6;return _regeneratorRuntime.awrap(ExpoUpdates.checkForUpdateAsync());case 6:result=_context2.sent;if(result.manifestString){result.manifest=JSON.parse(result.manifestString);delete result.manifestString;}return _context2.abrupt(\"return\",result);case 9:case\"end\":return _context2.stop();}}},null,null,null,Promise);}export function fetchUpdateAsync(){var result;return _regeneratorRuntime.async(function fetchUpdateAsync$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:if(ExpoUpdates.fetchUpdateAsync){_context3.next=2;break;}throw new UnavailabilityError('Updates','fetchUpdateAsync');case 2:if(!(__DEV__||isUsingDeveloperTool)){_context3.next=4;break;}throw new CodedError('ERR_UPDATES_DISABLED',\"You cannot fetch updates in development mode. \"+manualUpdatesInstructions);case 4:_context3.next=6;return _regeneratorRuntime.awrap(ExpoUpdates.fetchUpdateAsync());case 6:result=_context3.sent;if(result.manifestString){result.manifest=JSON.parse(result.manifestString);delete result.manifestString;}return _context3.abrupt(\"return\",result);case 9:case\"end\":return _context3.stop();}}},null,null,null,Promise);}export function clearUpdateCacheExperimentalAsync(_sdkVersion){console.warn(\"This method is no longer necessary. `expo-updates` now automatically deletes your app's old bundle files!\");}var _emitter;function _getEmitter(){if(!_emitter){_emitter=new EventEmitter();RCTDeviceEventEmitter.addListener('Expo.nativeUpdatesEvent',_emitEvent);}return _emitter;}function _emitEvent(params){var newParams=params;if(typeof params==='string'){newParams=JSON.parse(params);}if(newParams.manifestString){newParams.manifest=JSON.parse(newParams.manifestString);delete newParams.manifestString;}if(!_emitter){throw new Error(\"EventEmitter must be initialized to use from its listener\");}_emitter.emit('Expo.updatesEvent',newParams);}export function addListener(listener){var emitter=_getEmitter();return emitter.addListener('Expo.updatesEvent',listener);}","map":{"version":3,"sources":["../src/Updates.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  RCTDeviceEventEmitter,\n  CodedError,\n  NativeModulesProxy,\n  UnavailabilityError,\n} from 'expo-modules-core';\nimport { EventEmitter, EventSubscription } from 'fbemitter';\n\nimport ExpoUpdates from './ExpoUpdates';\nimport {\n  LocalAssets,\n  Manifest,\n  UpdateCheckResult,\n  UpdateEvent,\n  UpdateFetchResult,\n} from './Updates.types';\n\nexport * from './Updates.types';\n\n/**\n * The UUID that uniquely identifies the currently running update if `expo-updates` is enabled. The\n * UUID is represented in its canonical string form (`xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx`) and\n * will always use lowercase letters. In development mode, or any other environment in which\n * `expo-updates` is disabled, this value is `null`.\n */\nexport const updateId: string | null =\n  ExpoUpdates.updateId && typeof ExpoUpdates.updateId === 'string'\n    ? ExpoUpdates.updateId.toLowerCase()\n    : null;\n\n/**\n * The name of the release channel currently configured in this standalone or bare app when using\n * classic updates. When using Expo Updates, the value of this field is always `\"default\"`.\n */\nexport const releaseChannel: string = ExpoUpdates.releaseChannel ?? 'default';\n\n/**\n * The channel name of the current build, if configured for use with EAS Update. Null otherwise.\n */\nexport const channel: string | null = ExpoUpdates.channel ?? null;\n\n/**\n * The runtime version of the current build.\n */\nexport const runtimeVersion: string | null = ExpoUpdates.runtimeVersion ?? null;\n\n// @docsMissing\n/**\n * @hidden\n */\nexport const localAssets: LocalAssets = ExpoUpdates.localAssets ?? {};\n\n/**\n * `expo-updates` does its very best to always launch monotonically newer versions of your app so\n * you don't need to worry about backwards compatibility when you put out an update. In very rare\n * cases, it's possible that `expo-updates` may need to fall back to the update that's embedded in\n * the app binary, even after newer updates have been downloaded and run (an \"emergency launch\").\n * This boolean will be `true` if the app is launching under this fallback mechanism and `false`\n * otherwise. If you are concerned about backwards compatibility of future updates to your app, you\n * can use this constant to provide special behavior for this rare case.\n */\nexport const isEmergencyLaunch: boolean = ExpoUpdates.isEmergencyLaunch || false;\n\n// @docsMissing\n/**\n * @hidden\n */\nexport const isUsingEmbeddedAssets: boolean = ExpoUpdates.isUsingEmbeddedAssets || false;\n\n/**\n * If `expo-updates` is enabled, this is the\n * [manifest](/guides/how-expo-works#expo-development-server) object for the update that's currently\n * running.\n *\n * In development mode, or any other environment in which `expo-updates` is disabled, this object is\n * empty.\n */\nexport const manifest: Partial<Manifest> =\n  (ExpoUpdates.manifestString ? JSON.parse(ExpoUpdates.manifestString) : ExpoUpdates.manifest) ??\n  {};\n\n/**\n * If `expo-updates` is enabled, this is a `Date` object representing the creation time of the update that's currently running (whether it was embedded or downloaded at runtime).\n *\n * In development mode, or any other environment in which `expo-updates` is disabled, this value is\n * null.\n */\nexport const createdAt: Date | null = ExpoUpdates.commitTime\n  ? new Date(ExpoUpdates.commitTime)\n  : null;\n\nconst isUsingDeveloperTool = !!(manifest as any).developer?.tool;\nconst isUsingExpoDevelopmentClient = NativeModulesProxy.ExponentConstants?.appOwnership === 'expo';\nconst manualUpdatesInstructions = isUsingExpoDevelopmentClient\n  ? 'To test manual updates, publish your project using `expo publish` and open the published ' +\n    'version in this development client.'\n  : 'To test manual updates, make a release build with `npm run ios --configuration Release` or ' +\n    '`npm run android --variant Release`.';\n\n/**\n * Instructs the app to reload using the most recently downloaded version. This is useful for\n * triggering a newly downloaded update to launch without the user needing to manually restart the\n * app.\n *\n * It is not recommended to place any meaningful logic after a call to `await\n * Updates.reloadAsync()`. This is because the promise is resolved after verifying that the app can\n * be reloaded, and immediately before posting an asynchronous task to the main thread to actually\n * reload the app. It is unsafe to make any assumptions about whether any more JS code will be\n * executed after the `Updates.reloadAsync` method call resolves, since that depends on the OS and\n * the state of the native module and main threads.\n *\n * This method cannot be used in development mode, and the returned promise will be rejected if you\n * try to do so.\n *\n * @return A promise that fulfills right before the reload instruction is sent to the JS runtime, or\n * rejects if it cannot find a reference to the JS runtime. If the promise is rejected in production\n * mode, it most likely means you have installed the module incorrectly. Double check you've\n * followed the installation instructions. In particular, on iOS ensure that you set the `bridge`\n * property on `EXUpdatesAppController` with a pointer to the `RCTBridge` you want to reload, and on\n * Android ensure you either call `UpdatesController.initialize` with the instance of\n * `ReactApplication` you want to reload, or call `UpdatesController.setReactNativeHost` with the\n * proper instance of `ReactNativeHost`.\n */\nexport async function reloadAsync(): Promise<void> {\n  if (!ExpoUpdates.reload) {\n    throw new UnavailabilityError('Updates', 'reloadAsync');\n  }\n  if (__DEV__ && !isUsingExpoDevelopmentClient) {\n    throw new CodedError(\n      'ERR_UPDATES_DISABLED',\n      `You cannot use the Updates module in development mode in a production app. ${manualUpdatesInstructions}`\n    );\n  }\n  await ExpoUpdates.reload();\n}\n\n/**\n * Checks the server to see if a newly deployed update to your project is available. Does not\n * actually download the update. This method cannot be used in development mode, and the returned\n * promise will be rejected if you try to do so.\n *\n * Checking for an update uses a device's bandwidth and battery life like any network call.\n * Additionally, updates served by Expo may be rate limited. A good rule of thumb to check for\n * updates judiciously is to check when the user launches or foregrounds the app. Avoid polling for\n * updates in a frequent loop.\n *\n * @return A promise that fulfills with an [`UpdateCheckResult`](#updatecheckresult) object.\n *\n * The promise rejects if the app is in development mode, or if there is an unexpected error or\n * timeout communicating with the server.\n */\nexport async function checkForUpdateAsync(): Promise<UpdateCheckResult> {\n  if (!ExpoUpdates.checkForUpdateAsync) {\n    throw new UnavailabilityError('Updates', 'checkForUpdateAsync');\n  }\n  if (__DEV__ || isUsingDeveloperTool) {\n    throw new CodedError(\n      'ERR_UPDATES_DISABLED',\n      `You cannot check for updates in development mode. ${manualUpdatesInstructions}`\n    );\n  }\n\n  const result = await ExpoUpdates.checkForUpdateAsync();\n  if (result.manifestString) {\n    result.manifest = JSON.parse(result.manifestString);\n    delete result.manifestString;\n  }\n\n  return result;\n}\n\n/**\n * Downloads the most recently deployed update to your project from server to the device's local\n * storage. This method cannot be used in development mode, and the returned promise will be\n * rejected if you try to do so.\n *\n * @return A promise that fulfills with an [`UpdateFetchResult`](#updatefetchresult) object.\n *\n * The promise rejects if the app is in development mode, or if there is an unexpected error or\n * timeout communicating with the server.\n */\nexport async function fetchUpdateAsync(): Promise<UpdateFetchResult> {\n  if (!ExpoUpdates.fetchUpdateAsync) {\n    throw new UnavailabilityError('Updates', 'fetchUpdateAsync');\n  }\n  if (__DEV__ || isUsingDeveloperTool) {\n    throw new CodedError(\n      'ERR_UPDATES_DISABLED',\n      `You cannot fetch updates in development mode. ${manualUpdatesInstructions}`\n    );\n  }\n\n  const result = await ExpoUpdates.fetchUpdateAsync();\n  if (result.manifestString) {\n    result.manifest = JSON.parse(result.manifestString);\n    delete result.manifestString;\n  }\n\n  return result;\n}\n\n/**\n * @hidden\n */\nexport function clearUpdateCacheExperimentalAsync(_sdkVersion?: string) {\n  console.warn(\n    \"This method is no longer necessary. `expo-updates` now automatically deletes your app's old bundle files!\"\n  );\n}\n\nlet _emitter: EventEmitter | null;\n\nfunction _getEmitter(): EventEmitter {\n  if (!_emitter) {\n    _emitter = new EventEmitter();\n    RCTDeviceEventEmitter.addListener('Expo.nativeUpdatesEvent', _emitEvent);\n  }\n  return _emitter;\n}\n\nfunction _emitEvent(params): void {\n  let newParams = params;\n  if (typeof params === 'string') {\n    newParams = JSON.parse(params);\n  }\n  if (newParams.manifestString) {\n    newParams.manifest = JSON.parse(newParams.manifestString);\n    delete newParams.manifestString;\n  }\n\n  if (!_emitter) {\n    throw new Error(`EventEmitter must be initialized to use from its listener`);\n  }\n  _emitter.emit('Expo.updatesEvent', newParams);\n}\n\n/**\n * Adds a callback to be invoked when updates-related events occur (such as upon the initial app\n * load) due to auto-update settings chosen at build-time.\n *\n * @param listener A function that will be invoked with an [`UpdateEvent`](#updateevent) instance\n * and should not return any value.\n * @return An `EventSubscription` object on which you can call `remove()` to unsubscribe the\n * listener.\n */\nexport function addListener(listener: (event: UpdateEvent) => void): EventSubscription {\n  const emitter = _getEmitter();\n  return emitter.addListener('Expo.updatesEvent', listener);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}