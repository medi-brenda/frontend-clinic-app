{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import{UnavailabilityError}from'expo-modules-core';import ExpoApplication from\"./ExpoApplication\";export var nativeApplicationVersion=ExpoApplication?ExpoApplication.nativeApplicationVersion||null:null;export var nativeBuildVersion=ExpoApplication?ExpoApplication.nativeBuildVersion||null:null;export var applicationName=ExpoApplication?ExpoApplication.applicationName||null:null;export var applicationId=ExpoApplication?ExpoApplication.applicationId||null:null;export var androidId=ExpoApplication?ExpoApplication.androidId||null:null;export function getInstallReferrerAsync(){return _regeneratorRuntime.async(function getInstallReferrerAsync$(_context){while(1){switch(_context.prev=_context.next){case 0:if(ExpoApplication.getInstallReferrerAsync){_context.next=2;break;}throw new UnavailabilityError('expo-application','getInstallReferrerAsync');case 2:_context.next=4;return _regeneratorRuntime.awrap(ExpoApplication.getInstallReferrerAsync());case 4:return _context.abrupt(\"return\",_context.sent);case 5:case\"end\":return _context.stop();}}},null,null,null,Promise);}export function getIosIdForVendorAsync(){var _await$ExpoApplicatio;return _regeneratorRuntime.async(function getIosIdForVendorAsync$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(ExpoApplication.getIosIdForVendorAsync){_context2.next=2;break;}throw new UnavailabilityError('expo-application','getIosIdForVendorAsync');case 2:_context2.next=4;return _regeneratorRuntime.awrap(ExpoApplication.getIosIdForVendorAsync());case 4:_context2.t0=_await$ExpoApplicatio=_context2.sent;if(!(_context2.t0!=null)){_context2.next=9;break;}_context2.t1=_await$ExpoApplicatio;_context2.next=10;break;case 9:_context2.t1=null;case 10:return _context2.abrupt(\"return\",_context2.t1);case 11:case\"end\":return _context2.stop();}}},null,null,null,Promise);}export var ApplicationReleaseType;(function(ApplicationReleaseType){ApplicationReleaseType[ApplicationReleaseType[\"UNKNOWN\"]=0]=\"UNKNOWN\";ApplicationReleaseType[ApplicationReleaseType[\"SIMULATOR\"]=1]=\"SIMULATOR\";ApplicationReleaseType[ApplicationReleaseType[\"ENTERPRISE\"]=2]=\"ENTERPRISE\";ApplicationReleaseType[ApplicationReleaseType[\"DEVELOPMENT\"]=3]=\"DEVELOPMENT\";ApplicationReleaseType[ApplicationReleaseType[\"AD_HOC\"]=4]=\"AD_HOC\";ApplicationReleaseType[ApplicationReleaseType[\"APP_STORE\"]=5]=\"APP_STORE\";})(ApplicationReleaseType||(ApplicationReleaseType={}));export function getIosApplicationReleaseTypeAsync(){return _regeneratorRuntime.async(function getIosApplicationReleaseTypeAsync$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:if(ExpoApplication.getApplicationReleaseTypeAsync){_context3.next=2;break;}throw new UnavailabilityError('expo-application','getApplicationReleaseTypeAsync');case 2:_context3.next=4;return _regeneratorRuntime.awrap(ExpoApplication.getApplicationReleaseTypeAsync());case 4:return _context3.abrupt(\"return\",_context3.sent);case 5:case\"end\":return _context3.stop();}}},null,null,null,Promise);}export function getIosPushNotificationServiceEnvironmentAsync(){return _regeneratorRuntime.async(function getIosPushNotificationServiceEnvironmentAsync$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:if(ExpoApplication.getPushNotificationServiceEnvironmentAsync){_context4.next=2;break;}throw new UnavailabilityError('expo-application','getPushNotificationServiceEnvironmentAsync');case 2:_context4.next=4;return _regeneratorRuntime.awrap(ExpoApplication.getPushNotificationServiceEnvironmentAsync());case 4:return _context4.abrupt(\"return\",_context4.sent);case 5:case\"end\":return _context4.stop();}}},null,null,null,Promise);}export function getInstallationTimeAsync(){var installationTime;return _regeneratorRuntime.async(function getInstallationTimeAsync$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:if(ExpoApplication.getInstallationTimeAsync){_context5.next=2;break;}throw new UnavailabilityError('expo-application','getInstallationTimeAsync');case 2:_context5.next=4;return _regeneratorRuntime.awrap(ExpoApplication.getInstallationTimeAsync());case 4:installationTime=_context5.sent;return _context5.abrupt(\"return\",new Date(installationTime));case 6:case\"end\":return _context5.stop();}}},null,null,null,Promise);}export function getLastUpdateTimeAsync(){var lastUpdateTime;return _regeneratorRuntime.async(function getLastUpdateTimeAsync$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:if(ExpoApplication.getLastUpdateTimeAsync){_context6.next=2;break;}throw new UnavailabilityError('expo-application','getLastUpdateTimeAsync');case 2:_context6.next=4;return _regeneratorRuntime.awrap(ExpoApplication.getLastUpdateTimeAsync());case 4:lastUpdateTime=_context6.sent;return _context6.abrupt(\"return\",new Date(lastUpdateTime));case 6:case\"end\":return _context6.stop();}}},null,null,null,Promise);}","map":{"version":3,"sources":["../src/Application.ts"],"names":[],"mappings":"4DAAA,OAAS,mBAAT,KAAoC,mBAApC,CAEA,MAAO,CAAA,eAAP,yBAUA,MAAO,IAAM,CAAA,wBAAwB,CAAkB,eAAe,CAClE,eAAe,CAAC,wBAAhB,EAA4C,IADsB,CAElE,IAFG,CAaP,MAAO,IAAM,CAAA,kBAAkB,CAAkB,eAAe,CAC5D,eAAe,CAAC,kBAAhB,EAAsC,IADsB,CAE5D,IAFG,CAWP,MAAO,IAAM,CAAA,eAAe,CAAkB,eAAe,CACzD,eAAe,CAAC,eAAhB,EAAmC,IADsB,CAEzD,IAFG,CAUP,MAAO,IAAM,CAAA,aAAa,CAAkB,eAAe,CACvD,eAAe,CAAC,aAAhB,EAAiC,IADsB,CAEvD,IAFG,CAkBP,MAAO,IAAM,CAAA,SAAS,CAAkB,eAAe,CAAG,eAAe,CAAC,SAAhB,EAA6B,IAAhC,CAAuC,IAAvF,CAeP,MAAO,SAAe,CAAA,uBAAf,uIACA,eAAe,CAAC,uBADhB,8BAEG,IAAI,CAAA,mBAAJ,CAAwB,kBAAxB,CAA4C,yBAA5C,CAFH,yDAIQ,eAAe,CAAC,uBAAhB,EAJR,6HA4BP,MAAO,SAAe,CAAA,sBAAf,mKACA,eAAe,CAAC,sBADhB,+BAEG,IAAI,CAAA,mBAAJ,CAAwB,kBAAxB,CAA4C,wBAA5C,CAFH,0DAIS,eAAe,CAAC,sBAAhB,EAJT,4LAIsD,IAJtD,+HAQP,MAAA,IAAY,CAAA,sBAAZ,CAAA,CAAA,SAAY,sBAAZ,CAAkC,CAChC,sBAAA,CAAA,sBAAA,CAAA,SAAA,CAAA,CAAA,CAAA,CAAA,CAAA,SAAA,CACA,sBAAA,CAAA,sBAAA,CAAA,WAAA,CAAA,CAAA,CAAA,CAAA,CAAA,WAAA,CACA,sBAAA,CAAA,sBAAA,CAAA,YAAA,CAAA,CAAA,CAAA,CAAA,CAAA,YAAA,CACA,sBAAA,CAAA,sBAAA,CAAA,aAAA,CAAA,CAAA,CAAA,CAAA,CAAA,aAAA,CACA,sBAAA,CAAA,sBAAA,CAAA,QAAA,CAAA,CAAA,CAAA,CAAA,CAAA,QAAA,CACA,sBAAA,CAAA,sBAAA,CAAA,WAAA,CAAA,CAAA,CAAA,CAAA,CAAA,WAAA,CACD,CAPD,EAAY,sBAAsB,GAAtB,sBAAsB,CAAA,EAAA,CAAlC,EAeA,MAAO,SAAe,CAAA,iCAAf,oJACA,eAAe,CAAC,8BADhB,+BAEG,IAAI,CAAA,mBAAJ,CAAwB,kBAAxB,CAA4C,gCAA5C,CAFH,0DAIQ,eAAe,CAAC,8BAAhB,EAJR,gIAeP,MAAO,SAAe,CAAA,6CAAf,gKACA,eAAe,CAAC,0CADhB,+BAEG,IAAI,CAAA,mBAAJ,CAAwB,kBAAxB,CAA4C,4CAA5C,CAFH,0DAIQ,eAAe,CAAC,0CAAhB,EAJR,gIAyBP,MAAO,SAAe,CAAA,wBAAf,gKACA,eAAe,CAAC,wBADhB,+BAEG,IAAI,CAAA,mBAAJ,CAAwB,kBAAxB,CAA4C,0BAA5C,CAFH,0DAI0B,eAAe,CAAC,wBAAhB,EAJ1B,SAIC,gBAJD,iDAKE,GAAI,CAAA,IAAJ,CAAS,gBAAT,CALF,wEAqBP,MAAO,SAAe,CAAA,sBAAf,4JACA,eAAe,CAAC,sBADhB,+BAEG,IAAI,CAAA,mBAAJ,CAAwB,kBAAxB,CAA4C,wBAA5C,CAFH,0DAIwB,eAAe,CAAC,sBAAhB,EAJxB,SAIC,cAJD,iDAKE,GAAI,CAAA,IAAJ,CAAS,cAAT,CALF","sourcesContent":["import { UnavailabilityError } from 'expo-modules-core';\n\nimport ExpoApplication from './ExpoApplication';\n\n// @needsAudit\n/**\n * The human-readable version of the native application that may be displayed in the app store.\n * This is the `Info.plist` value for `CFBundleShortVersionString` on iOS and the version name set\n * by `version` in `app.json` on Android at the time the native app was built.\n * On web, this value is `null`.\n * @example `\"2.11.0\"`\n */\nexport const nativeApplicationVersion: string | null = ExpoApplication\n  ? ExpoApplication.nativeApplicationVersion || null\n  : null;\n\n// @needsAudit\n/**\n * The internal build version of the native application that the app store may use to distinguish\n * between different binaries. This is the `Info.plist` value for `CFBundleVersion` on iOS (set with\n * `ios.buildNumber` value in `app.json` in a standalone app) and the version code set by\n * `android.versionCode` in `app.json` on Android at the time the native app was built. On web, this\n * value is `null`. The return type on Android and iOS is `string`.\n * @example iOS: `\"2.11.0\"`, Android: `\"114\"`\n */\nexport const nativeBuildVersion: string | null = ExpoApplication\n  ? ExpoApplication.nativeBuildVersion || null\n  : null;\n\n// @needsAudit\n/**\n * The human-readable name of the application that is displayed with the app's icon on the device's\n * home screen or desktop. On Android and iOS, this value is a `string` unless the name could not be\n * retrieved, in which case this value will be `null`. On web this value is `null`.\n * @example `\"Expo\"`, `\"Yelp\"`, `\"Instagram\"`\n */\nexport const applicationName: string | null = ExpoApplication\n  ? ExpoApplication.applicationName || null\n  : null;\n\n// @needsAudit\n/**\n * The ID of the application. On Android, this is the application ID. On iOS, this is the bundle ID.\n * On web, this is `null`.\n * @example `\"com.cocoacasts.scribbles\"`, `\"com.apple.Pages\"`\n */\nexport const applicationId: string | null = ExpoApplication\n  ? ExpoApplication.applicationId || null\n  : null;\n\n// @needsAudit\n/**\n * The value of [`Settings.Secure.ANDROID_ID`](https://developer.android.com/reference/android/provider/Settings.Secure.html#ANDROID_ID).\n * This is a hexadecimal `string` unique to each combination of app-signing key, user, and device.\n * The value may change if a factory reset is performed on the device or if an APK signing key changes.\n * For more information about how the platform handles `ANDROID_ID` in Android 8.0 (API level 26)\n * and higher, see [Android 8.0 Behavior Changes](https://developer.android.com/about/versions/oreo/android-8.0-changes.html#privacy-all).\n * On iOS and web, this value is `null`.\n * > In versions of the platform lower than Android 8.0 (API level 26), this value remains constant\n * > for the lifetime of the user's device. See the [ANDROID_ID](https://developer.android.com/reference/android/provider/Settings.Secure.html#ANDROID_ID)\n * > official docs for more information.\n * @example `\"dd96dec43fb81c97\"`\n * @platform android\n */\nexport const androidId: string | null = ExpoApplication ? ExpoApplication.androidId || null : null;\n\n// @needsAudit\n/**\n * Gets the referrer URL of the installed app with the [`Install Referrer API`](https://developer.android.com/google/play/installreferrer)\n * from the Google Play Store. In practice, the referrer URL may not be a complete, absolute URL.\n * @return A `Promise` that fulfills with a `string` of the referrer URL of the installed app.\n *\n * @example\n * ```ts\n * await Application.getInstallReferrerAsync();\n * // \"utm_source=google-play&utm_medium=organic\"\n * ```\n * @platform android\n */\nexport async function getInstallReferrerAsync(): Promise<string> {\n  if (!ExpoApplication.getInstallReferrerAsync) {\n    throw new UnavailabilityError('expo-application', 'getInstallReferrerAsync');\n  }\n  return await ExpoApplication.getInstallReferrerAsync();\n}\n\n// @needsAudit\n/**\n * Gets the iOS \"identifier for vendor\" ([IDFV](https://developer.apple.com/documentation/uikit/uidevice/1620059-identifierforvendor))\n * value, a string ID that uniquely identifies a device to the app’s vendor. This method may\n * sometimes return `nil`, in which case wait and call the method again later. This might happen\n * when the device has been restarted before the user has unlocked the device.\n *\n * The OS will change the vendor identifier if all apps from the current app's vendor have been\n * uninstalled.\n *\n * @return A `Promise` that fulfills with a `string` specifying the app's vendor ID. Apps from the\n * same vendor will return the same ID. See Apple's documentation for more information about the\n * vendor ID's semantics.\n *\n * @example\n * ```ts\n * await Application.getIosIdForVendorAsync();\n * // \"68753A44-4D6F-1226-9C60-0050E4C00067\"\n * ```\n * @platform ios\n */\nexport async function getIosIdForVendorAsync(): Promise<string | null> {\n  if (!ExpoApplication.getIosIdForVendorAsync) {\n    throw new UnavailabilityError('expo-application', 'getIosIdForVendorAsync');\n  }\n  return (await ExpoApplication.getIosIdForVendorAsync()) ?? null;\n}\n\n// @docsMissing\nexport enum ApplicationReleaseType {\n  UNKNOWN = 0,\n  SIMULATOR = 1,\n  ENTERPRISE = 2,\n  DEVELOPMENT = 3,\n  AD_HOC = 4,\n  APP_STORE = 5,\n}\n\n// @needsAudit\n/**\n * Gets the iOS application release type.\n * @return Returns a promise which fulfills with an [`ApplicationReleaseType`](#applicationreleasetype).\n * @platform ios\n */\nexport async function getIosApplicationReleaseTypeAsync(): Promise<ApplicationReleaseType> {\n  if (!ExpoApplication.getApplicationReleaseTypeAsync) {\n    throw new UnavailabilityError('expo-application', 'getApplicationReleaseTypeAsync');\n  }\n  return await ExpoApplication.getApplicationReleaseTypeAsync();\n}\n\n// @needsAudit\n/**\n * Gets the current [Apple Push Notification (APN)](https://developer.apple.com/documentation/bundleresources/entitlements/aps-environment?language=objc)\n * service environment.\n * @return Returns a promise fulfilled with the string, either `'development'` or `'production'`,\n * based on the current APN environment.\n * @platform ios\n */\nexport async function getIosPushNotificationServiceEnvironmentAsync(): Promise<string> {\n  if (!ExpoApplication.getPushNotificationServiceEnvironmentAsync) {\n    throw new UnavailabilityError('expo-application', 'getPushNotificationServiceEnvironmentAsync');\n  }\n  return await ExpoApplication.getPushNotificationServiceEnvironmentAsync();\n}\n\n// @needsAudit\n/**\n * Gets the time the app was installed onto the device, not counting subsequent updates. If the app\n * is uninstalled and reinstalled, this method returns the time the app was reinstalled.\n * - On iOS, this method uses the [`NSFileCreationDate`](https://developer.apple.com/documentation/foundation/nsfilecreationdate?language=objc)\n * of the app's document root directory.\n * - On Android, this method uses [`PackageInfo.firstInstallTime`](https://developer.android.com/reference/android/content/pm/PackageInfo.html#firstInstallTime).\n * - On web, this method returns `null`.\n *\n * @return Returns a `Promise` that fulfills with a `Date` object that specifies the time the app\n * was installed on the device.\n *\n * @example\n * ```ts\n * await Application.getInstallationTimeAsync();\n * // 2019-07-18T18:08:26.121Z\n * ```\n */\nexport async function getInstallationTimeAsync(): Promise<Date> {\n  if (!ExpoApplication.getInstallationTimeAsync) {\n    throw new UnavailabilityError('expo-application', 'getInstallationTimeAsync');\n  }\n  const installationTime = await ExpoApplication.getInstallationTimeAsync();\n  return new Date(installationTime);\n}\n\n// @needsAudit\n/**\n * Gets the last time the app was updated from the Google Play Store.\n * @return Returns a `Promise` that fulfills with a `Date` object that specifies the last time\n * the app was updated via the Google Play Store).\n *\n * @example\n * ```ts\n * await Application.getLastUpdateTimeAsync();\n * // 2019-07-18T21:20:16.887Z\n * ```\n * @platform android\n */\nexport async function getLastUpdateTimeAsync(): Promise<Date> {\n  if (!ExpoApplication.getLastUpdateTimeAsync) {\n    throw new UnavailabilityError('expo-application', 'getLastUpdateTimeAsync');\n  }\n  const lastUpdateTime = await ExpoApplication.getLastUpdateTimeAsync();\n  return new Date(lastUpdateTime);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}