{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import Constants from'expo-constants';import{CodedError,Platform,SyntheticPlatformEmitter}from'expo-modules-core';export default function getDevicePushTokenAsync(){var data;return _regeneratorRuntime.async(function getDevicePushTokenAsync$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return _regeneratorRuntime.awrap(_subscribeDeviceToPushNotificationsAsync());case 2:data=_context.sent;SyntheticPlatformEmitter.emit('onDevicePushToken',{devicePushToken:data});return _context.abrupt(\"return\",{type:Platform.OS,data:data});case 5:case\"end\":return _context.stop();}}},null,null,null,Promise);}function guardPermission(){if(!('Notification'in window)){throw new CodedError('ERR_UNAVAILABLE','The Web Notifications API is not available on this device.');}if(!navigator.serviceWorker){throw new CodedError('ERR_UNAVAILABLE','Notifications cannot be used because the service worker API is not supported on this device. This might also happen because your web page does not support HTTPS.');}if(Notification.permission!=='granted'){throw new CodedError('ERR_NOTIFICATIONS_PERMISSION_DENIED',\"Cannot use web notifications without permissions granted. Request permissions with \\\"expo-permissions\\\".\");}}function _subscribeDeviceToPushNotificationsAsync(){var _Constants$manifest$n,_Constants$manifest,_Constants$manifest$n2,_Constants$manifest2,_Constants$manifest2$,_Constants$manifest2$2,_Constants$manifest2$3,_Constants$manifest$n3,_Constants$manifest3,_Constants$manifest4,_Constants$manifest4$,_Constants$manifest4$2,_Constants$manifest4$3,_ref,_Constants$manifest$n4,_Constants$manifest5,_Constants$manifest6,_Constants$manifest6$,_Constants$manifest6$2;var vapidPublicKey,serviceWorkerPath,registration,subscribeOptions,pushSubscription,pushSubscriptionJson,subscriptionObject,notificationIcon;return _regeneratorRuntime.async(function _subscribeDeviceToPushNotificationsAsync$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:vapidPublicKey=(_Constants$manifest$n=(_Constants$manifest=Constants.manifest)==null?void 0:(_Constants$manifest$n2=_Constants$manifest.notification)==null?void 0:_Constants$manifest$n2.vapidPublicKey)!=null?_Constants$manifest$n:(_Constants$manifest2=Constants.manifest2)==null?void 0:(_Constants$manifest2$=_Constants$manifest2.extra)==null?void 0:(_Constants$manifest2$2=_Constants$manifest2$.expoClient)==null?void 0:(_Constants$manifest2$3=_Constants$manifest2$2.notification)==null?void 0:_Constants$manifest2$3.vapidPublicKey;if(vapidPublicKey){_context2.next=3;break;}throw new CodedError('ERR_NOTIFICATIONS_PUSH_WEB_MISSING_CONFIG','You must provide `notification.vapidPublicKey` in `app.json` to use push notifications on web. Learn more: https://docs.expo.dev/versions/latest/guides/using-vapid/.');case 3:serviceWorkerPath=(_Constants$manifest$n3=(_Constants$manifest3=Constants.manifest)==null?void 0:_Constants$manifest3.notification.serviceWorkerPath)!=null?_Constants$manifest$n3:(_Constants$manifest4=Constants.manifest2)==null?void 0:(_Constants$manifest4$=_Constants$manifest4.extra)==null?void 0:(_Constants$manifest4$2=_Constants$manifest4$.expoClient)==null?void 0:(_Constants$manifest4$3=_Constants$manifest4$2.notification)==null?void 0:_Constants$manifest4$3.serviceWorkerPath;if(serviceWorkerPath){_context2.next=6;break;}throw new CodedError('ERR_NOTIFICATIONS_PUSH_MISSING_CONFIGURATION','You must specify `notification.serviceWorkerPath` in `app.json` to use push notifications on the web. Please provide the path to the service worker that will handle notifications.');case 6:guardPermission();registration=null;_context2.prev=8;_context2.next=11;return _regeneratorRuntime.awrap(navigator.serviceWorker.register(serviceWorkerPath));case 11:registration=_context2.sent;_context2.next=17;break;case 14:_context2.prev=14;_context2.t0=_context2[\"catch\"](8);throw new CodedError('ERR_NOTIFICATIONS_PUSH_REGISTRATION_FAILED',\"Could not register this device for push notifications because the service worker (\"+serviceWorkerPath+\") could not be registered: \"+_context2.t0);case 17:_context2.next=19;return _regeneratorRuntime.awrap(navigator.serviceWorker.ready);case 19:if(registration.active){_context2.next=21;break;}throw new CodedError('ERR_NOTIFICATIONS_PUSH_REGISTRATION_FAILED','Could not register this device for push notifications because the service worker is not active.');case 21:subscribeOptions={userVisibleOnly:true,applicationServerKey:_urlBase64ToUint8Array(vapidPublicKey)};pushSubscription=null;_context2.prev=23;_context2.next=26;return _regeneratorRuntime.awrap(registration.pushManager.subscribe(subscribeOptions));case 26:pushSubscription=_context2.sent;_context2.next=32;break;case 29:_context2.prev=29;_context2.t1=_context2[\"catch\"](23);throw new CodedError('ERR_NOTIFICATIONS_PUSH_REGISTRATION_FAILED','The device was unable to register for remote notifications with the browser endpoint. ('+_context2.t1+')');case 32:pushSubscriptionJson=pushSubscription.toJSON();subscriptionObject={endpoint:pushSubscriptionJson.endpoint,keys:{p256dh:pushSubscriptionJson.keys.p256dh,auth:pushSubscriptionJson.keys.auth}};notificationIcon=((_ref=(_Constants$manifest$n4=(_Constants$manifest5=Constants.manifest)==null?void 0:_Constants$manifest5.notification)!=null?_Constants$manifest$n4:(_Constants$manifest6=Constants.manifest2)==null?void 0:(_Constants$manifest6$=_Constants$manifest6.extra)==null?void 0:(_Constants$manifest6$2=_Constants$manifest6$.expoClient)==null?void 0:_Constants$manifest6$2.notification)!=null?_ref:{}).icon;_context2.next=37;return _regeneratorRuntime.awrap(registration.active.postMessage(JSON.stringify({fromExpoWebClient:{notificationIcon:notificationIcon}})));case 37:return _context2.abrupt(\"return\",subscriptionObject);case 38:case\"end\":return _context2.stop();}}},null,null,[[8,14],[23,29]],Promise);}function _urlBase64ToUint8Array(base64String){var padding='='.repeat((4-base64String.length%4)%4);var base64=(base64String+padding).replace(/-/g,'+').replace(/_/g,'/');var rawData=window.atob(base64);var outputArray=new Uint8Array(rawData.length);for(var i=0;i<rawData.length;++i){outputArray[i]=rawData.charCodeAt(i);}return outputArray;}","map":{"version":3,"sources":["../src/getDevicePushTokenAsync.web.ts"],"names":[],"mappings":"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","sourcesContent":["import Constants from 'expo-constants';\nimport { CodedError, Platform, SyntheticPlatformEmitter } from 'expo-modules-core';\n\nimport { DevicePushToken } from './Tokens.types';\n\nexport default async function getDevicePushTokenAsync(): Promise<DevicePushToken> {\n  const data = await _subscribeDeviceToPushNotificationsAsync();\n  SyntheticPlatformEmitter.emit('onDevicePushToken', { devicePushToken: data });\n  return { type: Platform.OS, data };\n}\n\nfunction guardPermission() {\n  if (!('Notification' in window)) {\n    throw new CodedError(\n      'ERR_UNAVAILABLE',\n      'The Web Notifications API is not available on this device.'\n    );\n  }\n  if (!navigator.serviceWorker) {\n    throw new CodedError(\n      'ERR_UNAVAILABLE',\n      'Notifications cannot be used because the service worker API is not supported on this device. This might also happen because your web page does not support HTTPS.'\n    );\n  }\n  if (Notification.permission !== 'granted') {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_PERMISSION_DENIED',\n      `Cannot use web notifications without permissions granted. Request permissions with \"expo-permissions\".`\n    );\n  }\n}\n\nasync function _subscribeDeviceToPushNotificationsAsync(): Promise<DevicePushToken['data']> {\n  const vapidPublicKey: string | null =\n    // @ts-expect-error: TODO: not on the schema\n    Constants.manifest?.notification?.vapidPublicKey ??\n    // @ts-expect-error: TODO: not on the schema\n    Constants.manifest2?.extra?.expoClient?.notification?.vapidPublicKey;\n  if (!vapidPublicKey) {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_PUSH_WEB_MISSING_CONFIG',\n      'You must provide `notification.vapidPublicKey` in `app.json` to use push notifications on web. Learn more: https://docs.expo.dev/versions/latest/guides/using-vapid/.'\n    );\n  }\n\n  const serviceWorkerPath =\n    // @ts-expect-error: TODO: not on the schema\n    Constants.manifest?.notification.serviceWorkerPath ??\n    // @ts-expect-error: TODO: not on the schema\n    Constants.manifest2?.extra?.expoClient?.notification?.serviceWorkerPath;\n  if (!serviceWorkerPath) {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_PUSH_MISSING_CONFIGURATION',\n      'You must specify `notification.serviceWorkerPath` in `app.json` to use push notifications on the web. Please provide the path to the service worker that will handle notifications.'\n    );\n  }\n  guardPermission();\n\n  let registration: ServiceWorkerRegistration | null = null;\n  try {\n    registration = await navigator.serviceWorker.register(serviceWorkerPath);\n  } catch (error) {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_PUSH_REGISTRATION_FAILED',\n      `Could not register this device for push notifications because the service worker (${serviceWorkerPath}) could not be registered: ${error}`\n    );\n  }\n  await navigator.serviceWorker.ready;\n\n  if (!registration.active) {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_PUSH_REGISTRATION_FAILED',\n      'Could not register this device for push notifications because the service worker is not active.'\n    );\n  }\n\n  const subscribeOptions = {\n    userVisibleOnly: true,\n    applicationServerKey: _urlBase64ToUint8Array(vapidPublicKey),\n  };\n  let pushSubscription: PushSubscription | null = null;\n  try {\n    pushSubscription = await registration.pushManager.subscribe(subscribeOptions);\n  } catch (error) {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_PUSH_REGISTRATION_FAILED',\n      'The device was unable to register for remote notifications with the browser endpoint. (' +\n        error +\n        ')'\n    );\n  }\n  const pushSubscriptionJson = pushSubscription.toJSON();\n\n  const subscriptionObject = {\n    endpoint: pushSubscriptionJson.endpoint,\n    keys: {\n      p256dh: pushSubscriptionJson.keys!.p256dh,\n      auth: pushSubscriptionJson.keys!.auth,\n    },\n  };\n\n  // Store notification icon string in service worker.\n  // This message is received by `/expo-service-worker.js`.\n  // We wrap it with `fromExpoWebClient` to make sure other message\n  // will not override content such as `notificationIcon`.\n  // https://stackoverflow.com/a/35729334/2603230\n  const notificationIcon = (\n    Constants.manifest?.notification ??\n    Constants.manifest2?.extra?.expoClient?.notification ??\n    {}\n  ).icon;\n  await registration.active.postMessage(\n    JSON.stringify({ fromExpoWebClient: { notificationIcon } })\n  );\n\n  return subscriptionObject;\n}\n\n// https://github.com/web-push-libs/web-push#using-vapid-key-for-applicationserverkey\nfunction _urlBase64ToUint8Array(base64String: string): Uint8Array {\n  const padding = '='.repeat((4 - (base64String.length % 4)) % 4);\n  const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');\n\n  const rawData = window.atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}