{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _inherits from\"@babel/runtime/helpers/inherits\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _regeneratorRuntime from\"@babel/runtime/regenerator\";function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}import{EventEmitter,CodedError,UnavailabilityError}from'expo-modules-core';import NotificationsHandlerModule from\"./NotificationsHandlerModule\";export var NotificationTimeoutError=function(_CodedError){_inherits(NotificationTimeoutError,_CodedError);var _super=_createSuper(NotificationTimeoutError);function NotificationTimeoutError(notificationId,notification){var _this;_classCallCheck(this,NotificationTimeoutError);_this=_super.call(this,'ERR_NOTIFICATION_TIMEOUT',\"Notification handling timed out for ID \"+notificationId+\".\");_this.info={id:notificationId,notification:notification};return _this;}return NotificationTimeoutError;}(CodedError);var notificationEmitter=new EventEmitter(NotificationsHandlerModule);var handleNotificationEventName='onHandleNotification';var handleNotificationTimeoutEventName='onHandleNotificationTimeout';var handleSubscription=null;var handleTimeoutSubscription=null;export function setNotificationHandler(handler){if(handleSubscription){handleSubscription.remove();handleSubscription=null;}if(handleTimeoutSubscription){handleTimeoutSubscription.remove();handleTimeoutSubscription=null;}if(handler){handleSubscription=notificationEmitter.addListener(handleNotificationEventName,function _callee(_ref){var id,notification,behavior;return _regeneratorRuntime.async(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:id=_ref.id,notification=_ref.notification;if(NotificationsHandlerModule.handleNotificationAsync){_context.next=4;break;}handler.handleError==null?void 0:handler.handleError(id,new UnavailabilityError('Notifications','handleNotificationAsync'));return _context.abrupt(\"return\");case 4:_context.prev=4;_context.next=7;return _regeneratorRuntime.awrap(handler.handleNotification(notification));case 7:behavior=_context.sent;_context.next=10;return _regeneratorRuntime.awrap(NotificationsHandlerModule.handleNotificationAsync(id,behavior));case 10:handler.handleSuccess==null?void 0:handler.handleSuccess(id);_context.next=16;break;case 13:_context.prev=13;_context.t0=_context[\"catch\"](4);handler.handleError==null?void 0:handler.handleError(id,_context.t0);case 16:case\"end\":return _context.stop();}}},null,null,[[4,13]],Promise);});handleTimeoutSubscription=notificationEmitter.addListener(handleNotificationTimeoutEventName,function(_ref2){var id=_ref2.id,notification=_ref2.notification;return handler.handleError==null?void 0:handler.handleError(id,new NotificationTimeoutError(id,notification));});}}","map":{"version":3,"sources":["../src/NotificationsHandler.ts"],"names":[],"mappings":"ogCAAA,OAAS,YAAT,CAAqC,UAArC,CAAiD,mBAAjD,KAA4E,mBAA5E,CAGA,MAAO,CAAA,0BAAP,oCAEA,UAAa,CAAA,wBAAb,yHAEE,kCAAY,cAAZ,CAAoC,YAApC,CAA8D,0DAC5D,uBAAM,0BAAN,2CAA4E,cAA5E,MACA,MAAK,IAAL,CAAY,CAAE,EAAE,CAAE,cAAN,CAAsB,YAAY,CAAZ,YAAtB,CAAZ,CAF4D,aAG7D,CALH,kCAA8C,UAA9C,EAwBA,GAAM,CAAA,mBAAmB,CAAG,GAAI,CAAA,YAAJ,CAAiB,0BAAjB,CAA5B,CAEA,GAAM,CAAA,2BAA2B,CAAG,sBAApC,CACA,GAAM,CAAA,kCAAkC,CAAG,6BAA3C,CAEA,GAAI,CAAA,kBAAkB,CAAwB,IAA9C,CACA,GAAI,CAAA,yBAAyB,CAAwB,IAArD,CAEA,MAAM,SAAU,CAAA,sBAAV,CAAiC,OAAjC,CAAoE,CACxE,GAAI,kBAAJ,CAAwB,CACtB,kBAAkB,CAAC,MAAnB,GACA,kBAAkB,CAAG,IAArB,CACD,CACD,GAAI,yBAAJ,CAA+B,CAC7B,yBAAyB,CAAC,MAA1B,GACA,yBAAyB,CAAG,IAA5B,CACD,CAED,GAAI,OAAJ,CAAa,CACX,kBAAkB,CAAG,mBAAmB,CAAC,WAApB,CACnB,2BADmB,CAEnB,qKAAS,EAAT,MAAS,EAAT,CAAa,YAAb,MAAa,YAAb,IACO,0BAA0B,CAAC,uBADlC,yBAEI,OAAO,CAAC,WAAR,cAAA,OAAO,CAAC,WAAR,CACE,EADF,CAEE,GAAI,CAAA,mBAAJ,CAAwB,eAAxB,CAAyC,yBAAzC,CAFF,EAFJ,yGAU2B,OAAO,CAAC,kBAAR,CAA2B,YAA3B,CAV3B,SAUU,QAVV,iEAWU,0BAA0B,CAAC,uBAA3B,CAAmD,EAAnD,CAAuD,QAAvD,CAXV,UAYI,OAAO,CAAC,aAAR,cAAA,OAAO,CAAC,aAAR,CAAwB,EAAxB,EAZJ,iFAcI,OAAO,CAAC,WAAR,cAAA,OAAO,CAAC,WAAR,CAAsB,EAAtB,cAdJ,0EAFmB,CAArB,CAqBA,yBAAyB,CAAG,mBAAmB,CAAC,WAApB,CAC1B,kCAD0B,CAE1B,mBAAG,CAAA,EAAH,OAAG,EAAH,CAAO,YAAP,OAAO,YAAP,OACE,CAAA,OAAO,CAAC,WADV,cACE,OAAO,CAAC,WAAR,CAAsB,EAAtB,CAA0B,GAAI,CAAA,wBAAJ,CAA6B,EAA7B,CAAiC,YAAjC,CAA1B,CADF,EAF0B,CAA5B,CAKD,CACF","sourcesContent":["import { EventEmitter, Subscription, CodedError, UnavailabilityError } from 'expo-modules-core';\n\nimport { Notification, NotificationBehavior } from './Notifications.types';\nimport NotificationsHandlerModule from './NotificationsHandlerModule';\n\nexport class NotificationTimeoutError extends CodedError {\n  info: { notification: Notification; id: string };\n  constructor(notificationId: string, notification: Notification) {\n    super('ERR_NOTIFICATION_TIMEOUT', `Notification handling timed out for ID ${notificationId}.`);\n    this.info = { id: notificationId, notification };\n  }\n}\n\nexport type NotificationHandlingError = NotificationTimeoutError | Error;\n\nexport interface NotificationHandler {\n  handleNotification: (notification: Notification) => Promise<NotificationBehavior>;\n  handleSuccess?: (notificationId: string) => void;\n  handleError?: (notificationId: string, error: NotificationHandlingError) => void;\n}\n\ntype HandleNotificationEvent = {\n  id: string;\n  notification: Notification;\n};\n\ntype HandleNotificationTimeoutEvent = HandleNotificationEvent;\n\n// Web uses SyntheticEventEmitter\nconst notificationEmitter = new EventEmitter(NotificationsHandlerModule);\n\nconst handleNotificationEventName = 'onHandleNotification';\nconst handleNotificationTimeoutEventName = 'onHandleNotificationTimeout';\n\nlet handleSubscription: Subscription | null = null;\nlet handleTimeoutSubscription: Subscription | null = null;\n\nexport function setNotificationHandler(handler: NotificationHandler | null): void {\n  if (handleSubscription) {\n    handleSubscription.remove();\n    handleSubscription = null;\n  }\n  if (handleTimeoutSubscription) {\n    handleTimeoutSubscription.remove();\n    handleTimeoutSubscription = null;\n  }\n\n  if (handler) {\n    handleSubscription = notificationEmitter.addListener<HandleNotificationEvent>(\n      handleNotificationEventName,\n      async ({ id, notification }) => {\n        if (!NotificationsHandlerModule.handleNotificationAsync) {\n          handler.handleError?.(\n            id,\n            new UnavailabilityError('Notifications', 'handleNotificationAsync')\n          );\n          return;\n        }\n\n        try {\n          const behavior = await handler.handleNotification(notification);\n          await NotificationsHandlerModule.handleNotificationAsync(id, behavior);\n          handler.handleSuccess?.(id);\n        } catch (error) {\n          handler.handleError?.(id, error);\n        }\n      }\n    );\n\n    handleTimeoutSubscription = notificationEmitter.addListener<HandleNotificationTimeoutEvent>(\n      handleNotificationTimeoutEventName,\n      ({ id, notification }) =>\n        handler.handleError?.(id, new NotificationTimeoutError(id, notification))\n    );\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}