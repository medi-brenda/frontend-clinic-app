{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import{UnavailabilityError}from'expo-modules-core';import NotificationScheduler from\"./NotificationScheduler\";export default function cancelScheduledNotificationAsync(identifier){return _regeneratorRuntime.async(function cancelScheduledNotificationAsync$(_context){while(1){switch(_context.prev=_context.next){case 0:if(NotificationScheduler.cancelScheduledNotificationAsync){_context.next=2;break;}throw new UnavailabilityError('Notifications','cancelScheduledNotificationAsync');case 2:_context.next=4;return _regeneratorRuntime.awrap(NotificationScheduler.cancelScheduledNotificationAsync(identifier));case 4:return _context.abrupt(\"return\",_context.sent);case 5:case\"end\":return _context.stop();}}},null,null,null,Promise);}","map":{"version":3,"sources":["../src/cancelScheduledNotificationAsync.ts"],"names":[],"mappings":"4DAAA,OAAS,mBAAT,KAAoC,mBAApC,CAEA,MAAO,CAAA,qBAAP,+BAEA,cAAe,SAAe,CAAA,gCAAf,CAAgD,UAAhD,+IACR,qBAAqB,CAAC,gCADd,8BAEL,IAAI,CAAA,mBAAJ,CAAwB,eAAxB,CAAyC,kCAAzC,CAFK,yDAKA,qBAAqB,CAAC,gCAAtB,CAAuD,UAAvD,CALA","sourcesContent":["import { UnavailabilityError } from 'expo-modules-core';\n\nimport NotificationScheduler from './NotificationScheduler';\n\nexport default async function cancelScheduledNotificationAsync(identifier: string): Promise<void> {\n  if (!NotificationScheduler.cancelScheduledNotificationAsync) {\n    throw new UnavailabilityError('Notifications', 'cancelScheduledNotificationAsync');\n  }\n\n  return await NotificationScheduler.cancelScheduledNotificationAsync(identifier);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}