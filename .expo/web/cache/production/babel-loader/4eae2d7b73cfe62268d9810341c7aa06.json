{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import{EventEmitter,UnavailabilityError}from'expo-modules-core';import NotificationsEmitterModule from\"./NotificationsEmitterModule\";var emitter=new EventEmitter(NotificationsEmitterModule);var didReceiveNotificationEventName='onDidReceiveNotification';var didDropNotificationsEventName='onNotificationsDeleted';var didReceiveNotificationResponseEventName='onDidReceiveNotificationResponse';export var DEFAULT_ACTION_IDENTIFIER='expo.modules.notifications.actions.DEFAULT';export function addNotificationReceivedListener(listener){return emitter.addListener(didReceiveNotificationEventName,listener);}export function addNotificationsDroppedListener(listener){return emitter.addListener(didDropNotificationsEventName,listener);}export function addNotificationResponseReceivedListener(listener){return emitter.addListener(didReceiveNotificationResponseEventName,listener);}export function removeNotificationSubscription(subscription){emitter.removeSubscription(subscription);}export function getLastNotificationResponseAsync(){return _regeneratorRuntime.async(function getLastNotificationResponseAsync$(_context){while(1){switch(_context.prev=_context.next){case 0:if(NotificationsEmitterModule.getLastNotificationResponseAsync){_context.next=2;break;}throw new UnavailabilityError('ExpoNotifications','getLastNotificationResponseAsync');case 2:_context.next=4;return _regeneratorRuntime.awrap(NotificationsEmitterModule.getLastNotificationResponseAsync());case 4:return _context.abrupt(\"return\",_context.sent);case 5:case\"end\":return _context.stop();}}},null,null,null,Promise);}","map":{"version":3,"sources":["../src/NotificationsEmitter.ts"],"names":[],"mappings":"4DAAA,OAAS,YAAT,CAAqC,mBAArC,KAAgE,mBAAhE,CAGA,MAAO,CAAA,0BAAP,oCAGA,GAAM,CAAA,OAAO,CAAG,GAAI,CAAA,YAAJ,CAAiB,0BAAjB,CAAhB,CAEA,GAAM,CAAA,+BAA+B,CAAG,0BAAxC,CACA,GAAM,CAAA,6BAA6B,CAAG,wBAAtC,CACA,GAAM,CAAA,uCAAuC,CAAG,kCAAhD,CAEA,MAAO,IAAM,CAAA,yBAAyB,CAAG,4CAAlC,CAEP,MAAM,SAAU,CAAA,+BAAV,CACJ,QADI,CACmC,CAEvC,MAAO,CAAA,OAAO,CAAC,WAAR,CAAkC,+BAAlC,CAAmE,QAAnE,CAAP,CACD,CAED,MAAM,SAAU,CAAA,+BAAV,CAA0C,QAA1C,CAA8D,CAClE,MAAO,CAAA,OAAO,CAAC,WAAR,CAA0B,6BAA1B,CAAyD,QAAzD,CAAP,CACD,CAED,MAAM,SAAU,CAAA,uCAAV,CACJ,QADI,CAC2C,CAE/C,MAAO,CAAA,OAAO,CAAC,WAAR,CACL,uCADK,CAEL,QAFK,CAAP,CAID,CAED,MAAM,SAAU,CAAA,8BAAV,CAAyC,YAAzC,CAAmE,CACvE,OAAO,CAAC,kBAAR,CAA2B,YAA3B,EACD,CAED,MAAO,SAAe,CAAA,gCAAf,gJACA,0BAA0B,CAAC,gCAD3B,8BAEG,IAAI,CAAA,mBAAJ,CAAwB,mBAAxB,CAA6C,kCAA7C,CAFH,yDAIQ,0BAA0B,CAAC,gCAA3B,EAJR","sourcesContent":["import { EventEmitter, Subscription, UnavailabilityError } from 'expo-modules-core';\n\nimport { Notification, NotificationResponse } from './Notifications.types';\nimport NotificationsEmitterModule from './NotificationsEmitterModule';\n\n// Web uses SyntheticEventEmitter\nconst emitter = new EventEmitter(NotificationsEmitterModule);\n\nconst didReceiveNotificationEventName = 'onDidReceiveNotification';\nconst didDropNotificationsEventName = 'onNotificationsDeleted';\nconst didReceiveNotificationResponseEventName = 'onDidReceiveNotificationResponse';\n\nexport const DEFAULT_ACTION_IDENTIFIER = 'expo.modules.notifications.actions.DEFAULT';\n\nexport function addNotificationReceivedListener(\n  listener: (event: Notification) => void\n): Subscription {\n  return emitter.addListener<Notification>(didReceiveNotificationEventName, listener);\n}\n\nexport function addNotificationsDroppedListener(listener: () => void): Subscription {\n  return emitter.addListener<void>(didDropNotificationsEventName, listener);\n}\n\nexport function addNotificationResponseReceivedListener(\n  listener: (event: NotificationResponse) => void\n): Subscription {\n  return emitter.addListener<NotificationResponse>(\n    didReceiveNotificationResponseEventName,\n    listener\n  );\n}\n\nexport function removeNotificationSubscription(subscription: Subscription) {\n  emitter.removeSubscription(subscription);\n}\n\nexport async function getLastNotificationResponseAsync(): Promise<NotificationResponse | null> {\n  if (!NotificationsEmitterModule.getLastNotificationResponseAsync) {\n    throw new UnavailabilityError('ExpoNotifications', 'getLastNotificationResponseAsync');\n  }\n  return await NotificationsEmitterModule.getLastNotificationResponseAsync();\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}