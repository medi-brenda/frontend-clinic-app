{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { validateDoctor, validateStep1Data, validateStep2Data, validateStep3Data, register as registerApi, forgetPassword as forgetPasswordApi, checkOperationPassword as checkOperationPasswordApi, login as loginApi } from \"../services/auth\";\nimport { getDistinct, getBanks, getSpecialities, getAuthorities, getInsurers, getAllBenefits, updateNotificationToken } from \"../services/app\";\nimport { newRegistrationForm } from \"../models/registrationForm\";\nimport { newDoctor } from \"../models/doctor\";\nimport { StackActions } from '@react-navigation/native';\nimport AsyncStorage from \"@react-native-community/async-storage\";\nexport var swapSwiper = function swapSwiper(_ref) {\n  var index = _ref.index,\n      stores = _ref.stores;\n  stores.authStore.setSelectedSlide(index);\n};\nexport var initRegister = function initRegister(_ref2) {\n  var stores, banks, distincts, specialities, authorities, benefits, insurers;\n  return _regeneratorRuntime.async(function initRegister$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          stores = _ref2.stores;\n          _context.prev = 1;\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(getBanks());\n\n        case 4:\n          banks = _context.sent;\n          _context.next = 7;\n          return _regeneratorRuntime.awrap(getDistinct());\n\n        case 7:\n          distincts = _context.sent;\n          _context.next = 10;\n          return _regeneratorRuntime.awrap(getSpecialities());\n\n        case 10:\n          specialities = _context.sent;\n          _context.next = 13;\n          return _regeneratorRuntime.awrap(getAuthorities());\n\n        case 13:\n          authorities = _context.sent;\n          _context.next = 16;\n          return _regeneratorRuntime.awrap(getAllBenefits());\n\n        case 16:\n          benefits = _context.sent;\n          _context.next = 19;\n          return _regeneratorRuntime.awrap(getInsurers());\n\n        case 19:\n          insurers = _context.sent;\n          stores.configStore.setBanks(banks);\n          stores.configStore.setDistricts(distincts);\n          stores.configStore.setSpecialities(specialities);\n          stores.configStore.setAuthorities(authorities);\n          stores.configStore.setInsurers(insurers);\n          stores.configStore.setBenefits(benefits);\n          _context.next = 31;\n          break;\n\n        case 28:\n          _context.prev = 28;\n          _context.t0 = _context[\"catch\"](1);\n          console.error(_context.t0);\n\n        case 31:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[1, 28]], Promise);\n};\nexport var startRegister = function startRegister(_ref3) {\n  var stores = _ref3.stores,\n      navigation = _ref3.navigation;\n  stores.authStore.setRegisterData(newRegistrationForm());\n  navigation.navigate('RegisterStepOne');\n};\nexport var goRegisterStep2 = function goRegisterStep2(_ref4) {\n  var stores = _ref4.stores,\n      data = _ref4.data,\n      navigation = _ref4.navigation;\n  var valid = validateStep1Data(data);\n\n  if (!valid) {\n    return false;\n  }\n\n  stores.authStore.setRegisterData(data);\n  navigation.navigate('RegisterStepTwo');\n  return true;\n};\nexport var goRegisterStep3 = function goRegisterStep3(_ref5) {\n  var stores = _ref5.stores,\n      data = _ref5.data,\n      navigation = _ref5.navigation;\n  var valid = validateStep2Data(data);\n\n  if (!valid) {\n    return false;\n  }\n\n  stores.authStore.setRegisterData(data);\n  navigation.navigate('RegisterStepThree');\n  return true;\n};\nexport var selectServiceHour = function selectServiceHour(_ref6) {\n  var stores = _ref6.stores,\n      type = _ref6.type,\n      navigation = _ref6.navigation;\n  var _stores$authStore = stores.authStore,\n      setScheduleType = _stores$authStore.setScheduleType,\n      registerData = _stores$authStore.registerData,\n      setSchedules = _stores$authStore.setSchedules,\n      doctor = _stores$authStore.doctor;\n  setScheduleType(type);\n\n  switch (type) {\n    case 'doctor':\n      setSchedules(doctor.schedules);\n      break;\n\n    default:\n      setSchedules(registerData.schedules);\n  }\n\n  navigation.navigate('ServiceHour');\n};\nexport var saveServiceHours = function saveServiceHours(_ref7) {\n  var stores = _ref7.stores,\n      data = _ref7.data,\n      navigation = _ref7.navigation;\n  var _stores$authStore2 = stores.authStore,\n      registerData = _stores$authStore2.registerData,\n      scheduleType = _stores$authStore2.scheduleType,\n      doctor = _stores$authStore2.doctor,\n      setRegisterData = _stores$authStore2.setRegisterData,\n      setDoctor = _stores$authStore2.setDoctor;\n\n  switch (scheduleType) {\n    case 'doctor':\n      doctor.schedules = data;\n      setDoctor(doctor);\n      break;\n\n    default:\n      registerData.schedules = data;\n      setRegisterData(registerData);\n  }\n\n  navigation.goBack();\n};\nexport var goDoctorDetail = function goDoctorDetail(_ref8) {\n  var stores = _ref8.stores,\n      type = _ref8.type,\n      _ref8$index = _ref8.index,\n      index = _ref8$index === void 0 ? 0 : _ref8$index,\n      navigation = _ref8.navigation;\n  var _stores$authStore3 = stores.authStore,\n      registerData = _stores$authStore3.registerData,\n      setDoctor = _stores$authStore3.setDoctor,\n      setDoctorType = _stores$authStore3.setDoctorType,\n      setDoctorIndex = _stores$authStore3.setDoctorIndex;\n  setDoctorType(type);\n\n  switch (type) {\n    case 'new':\n      setDoctor(newDoctor());\n      break;\n\n    default:\n      setDoctor(registerData.doctors[index]);\n      setDoctorIndex(index);\n  }\n\n  navigation.navigate('DoctorDetail');\n};\nexport var saveDoctor = function saveDoctor(_ref9) {\n  var stores = _ref9.stores,\n      data = _ref9.data,\n      navigation = _ref9.navigation;\n  var valid = validateDoctor(data);\n\n  if (!valid) {\n    return false;\n  }\n\n  var _stores$authStore4 = stores.authStore,\n      doctorType = _stores$authStore4.doctorType,\n      registerData = _stores$authStore4.registerData,\n      doctorIndex = _stores$authStore4.doctorIndex,\n      setRegisterData = _stores$authStore4.setRegisterData;\n\n  switch (doctorType) {\n    case 'new':\n      registerData.doctors.push(data);\n      break;\n\n    default:\n      registerData.doctors[doctorIndex] = data;\n  }\n\n  setRegisterData(registerData);\n  navigation.goBack();\n  return true;\n};\nexport var goRegisterStep4 = function goRegisterStep4(_ref10) {\n  var stores = _ref10.stores,\n      data = _ref10.data,\n      navigation = _ref10.navigation;\n  var valid = validateStep3Data(data);\n\n  if (!valid) {\n    return false;\n  }\n\n  stores.authStore.setRegisterData(data);\n  navigation.navigate('RegisterStepFour');\n  return true;\n};\nexport var backPage = function backPage(_ref11) {\n  var navigation = _ref11.navigation,\n      index = _ref11.index;\n  var resetAction = StackActions.pop(4 - index);\n  navigation.dispatch(resetAction);\n};\nexport var reviewDoctor = function reviewDoctor(_ref12) {\n  var navigation = _ref12.navigation,\n      stores = _ref12.stores,\n      index = _ref12.index;\n  var _stores$authStore5 = stores.authStore,\n      registerData = _stores$authStore5.registerData,\n      setDoctorType = _stores$authStore5.setDoctorType,\n      setDoctor = _stores$authStore5.setDoctor,\n      setDoctorIndex = _stores$authStore5.setDoctorIndex;\n  setDoctorIndex(index);\n  setDoctorType('modify');\n  setDoctor(registerData.doctors[index]);\n  navigation.pop(1);\n  navigation.navigate('DoctorDetail');\n};\nexport var register = function register(_ref13) {\n  var navigation, stores, _stores$authStore6, registerData, setAuthState;\n\n  return _regeneratorRuntime.async(function register$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          navigation = _ref13.navigation, stores = _ref13.stores;\n          _stores$authStore6 = stores.authStore, registerData = _stores$authStore6.registerData, setAuthState = _stores$authStore6.setAuthState;\n          setAuthState('progress');\n          _context2.prev = 3;\n          _context2.next = 6;\n          return _regeneratorRuntime.awrap(registerApi(registerData));\n\n        case 6:\n          setAuthState('success');\n          _context2.next = 13;\n          break;\n\n        case 9:\n          _context2.prev = 9;\n          _context2.t0 = _context2[\"catch\"](3);\n          setAuthState('failure');\n          return _context2.abrupt(\"return\", _context2.t0.message);\n\n        case 13:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[3, 9]], Promise);\n};\nexport var goLogin = function goLogin(_ref14) {\n  var navigation = _ref14.navigation,\n      stores = _ref14.stores;\n  navigation.navigate('Login');\n};\nexport var forgetPassword = function forgetPassword(_ref15) {\n  var navigation, email, stores, setAuthState, result;\n  return _regeneratorRuntime.async(function forgetPassword$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          navigation = _ref15.navigation, email = _ref15.email, stores = _ref15.stores;\n          setAuthState = stores.authStore.setAuthState;\n          setAuthState('progress');\n          _context3.prev = 3;\n          _context3.next = 6;\n          return _regeneratorRuntime.awrap(forgetPasswordApi(email));\n\n        case 6:\n          result = _context3.sent;\n          setAuthState('success');\n          return _context3.abrupt(\"return\", {\n            success: result,\n            message: result ? 'Auth.ForgetPasswordEmail' : 'Common.UnknownSystemError'\n          });\n\n        case 11:\n          _context3.prev = 11;\n          _context3.t0 = _context3[\"catch\"](3);\n          setAuthState('failure');\n          return _context3.abrupt(\"return\", {\n            success: false,\n            message: _context3.t0.message\n          });\n\n        case 15:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, [[3, 11]], Promise);\n};\nexport var checkOperationPassword = function checkOperationPassword(_ref16) {\n  var password, stores, _stores$appStore, clinicId, token;\n\n  return _regeneratorRuntime.async(function checkOperationPassword$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          password = _ref16.password, stores = _ref16.stores;\n          _context4.prev = 1;\n          _stores$appStore = stores.appStore, clinicId = _stores$appStore.clinicId, token = _stores$appStore.token;\n          _context4.next = 5;\n          return _regeneratorRuntime.awrap(checkOperationPasswordApi({\n            clinicId: clinicId,\n            token: token,\n            password: password\n          }));\n\n        case 5:\n          return _context4.abrupt(\"return\", {\n            success: true\n          });\n\n        case 8:\n          _context4.prev = 8;\n          _context4.t0 = _context4[\"catch\"](1);\n          return _context4.abrupt(\"return\", {\n            success: false,\n            message: 'Error.IncorrectOPPassword'\n          });\n\n        case 11:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, [[1, 8]], Promise);\n};\nexport var login = function login(_ref17) {\n  var stores, navigation, password, username, i18n, _stores$appStore2, setAuthData, notificationToken, _await$loginApi, clinicId, token;\n\n  return _regeneratorRuntime.async(function login$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          stores = _ref17.stores, navigation = _ref17.navigation, password = _ref17.password, username = _ref17.username, i18n = _ref17.i18n;\n          _context5.prev = 1;\n          _stores$appStore2 = stores.appStore, setAuthData = _stores$appStore2.setAuthData, notificationToken = _stores$appStore2.notificationToken;\n          _context5.next = 5;\n          return _regeneratorRuntime.awrap(loginApi({\n            username: username,\n            password: password\n          }));\n\n        case 5:\n          _await$loginApi = _context5.sent;\n          clinicId = _await$loginApi.clinicId;\n          token = _await$loginApi.token;\n          _context5.next = 10;\n          return _regeneratorRuntime.awrap(updateNotificationToken({\n            notificationToken: notificationToken,\n            clinicId: clinicId,\n            token: token,\n            i18n: i18n\n          }));\n\n        case 10:\n          _context5.next = 12;\n          return _regeneratorRuntime.awrap(AsyncStorage.setItem(\"token\", token));\n\n        case 12:\n          _context5.next = 14;\n          return _regeneratorRuntime.awrap(AsyncStorage.setItem(\"clinic_id\", clinicId));\n\n        case 14:\n          setAuthData(token, clinicId);\n          _context5.next = 27;\n          break;\n\n        case 17:\n          _context5.prev = 17;\n          _context5.t0 = _context5[\"catch\"](1);\n          console.log(\"error message\", _context5.t0);\n          _context5.t1 = _context5.t0.message;\n          _context5.next = _context5.t1 === '0002' ? 23 : _context5.t1 === '0009' ? 24 : _context5.t1 === '0010' ? 25 : 26;\n          break;\n\n        case 23:\n          return _context5.abrupt(\"return\", i18n.t('Auth.IncorrectCredential'));\n\n        case 24:\n          return _context5.abrupt(\"return\", i18n.t('Auth.AccountPendingApproval'));\n\n        case 25:\n          return _context5.abrupt(\"return\", i18n.t('Auth.AccountDisabled'));\n\n        case 26:\n          return _context5.abrupt(\"return\", i18n.t('Auth.NetworkError'));\n\n        case 27:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, [[1, 17]], Promise);\n};","map":{"version":3,"names":["validateDoctor","validateStep1Data","validateStep2Data","validateStep3Data","register","registerApi","forgetPassword","forgetPasswordApi","checkOperationPassword","checkOperationPasswordApi","login","loginApi","getDistinct","getBanks","getSpecialities","getAuthorities","getInsurers","getAllBenefits","updateNotificationToken","newRegistrationForm","newDoctor","StackActions","AsyncStorage","swapSwiper","index","stores","authStore","setSelectedSlide","initRegister","banks","distincts","specialities","authorities","benefits","insurers","configStore","setBanks","setDistricts","setSpecialities","setAuthorities","setInsurers","setBenefits","console","error","startRegister","navigation","setRegisterData","navigate","goRegisterStep2","data","valid","goRegisterStep3","selectServiceHour","type","setScheduleType","registerData","setSchedules","doctor","schedules","saveServiceHours","scheduleType","setDoctor","goBack","goDoctorDetail","setDoctorType","setDoctorIndex","doctors","saveDoctor","doctorType","doctorIndex","push","goRegisterStep4","backPage","resetAction","pop","dispatch","reviewDoctor","setAuthState","message","goLogin","email","result","success","password","appStore","clinicId","token","username","i18n","setAuthData","notificationToken","setItem","log","t"],"sources":["I:/Workspace/mediWS/mccWS/frontend-clinic-app/src/actions/auth.ts"],"sourcesContent":["import {\r\n    validateDoctor, validateStep1Data, validateStep2Data, validateStep3Data, register as registerApi,\r\n    forgetPassword as forgetPasswordApi, checkOperationPassword as checkOperationPasswordApi, login as loginApi\r\n} from \"../services/auth\";\r\nimport { getDistinct, getBanks, getSpecialities, getAuthorities, getInsurers, getAllBenefits, updateNotificationToken } from \"../services/app\";\r\nimport { Stores } from \"../stores\"\r\nimport { newRegistrationForm } from \"../models/registrationForm\";\r\nimport { newDoctor } from \"../models/doctor\";\r\nimport { StackActions } from '@react-navigation/native';\r\nimport { i18n } from \"i18next\";\r\nimport AsyncStorage from \"@react-native-community/async-storage\";\r\nimport { request } from \"../utils/request\";\r\nimport { Platform } from \"react-native\";\r\n\r\ntype SwapSwiper = {\r\n    index: number,\r\n    stores: Stores\r\n}\r\n\r\ntype InitRegister = {\r\n    stores: Stores\r\n}\r\n\r\ntype GoRegisterNextStep = {\r\n    stores: Stores,\r\n    data: any,\r\n    navigation: any\r\n}\r\n\r\ntype StartRegister = {\r\n    stores: Stores,\r\n    navigation: any\r\n}\r\n\r\ntype SelectServiceHour = {\r\n    stores: Stores,\r\n    type: string,\r\n    navigation: any\r\n}\r\n\r\ntype GoDoctorDetail = {\r\n    stores: Stores,\r\n    navigation: any,\r\n    type: string,\r\n    index?: number\r\n}\r\n\r\ntype BackPage = {\r\n    navigation: any,\r\n    index: number\r\n}\r\n\r\ntype ReviewDoctor = {\r\n    stores: Stores,\r\n    navigation: any,\r\n    index: number\r\n}\r\n\r\ntype Register = {\r\n    stores: Stores,\r\n    navigation: any\r\n}\r\n\r\ntype GoLogin = {\r\n    stores: Stores,\r\n    navigation: any\r\n}\r\n\r\ntype ForgetEmail = {\r\n    stores: Stores,\r\n    email: string,\r\n    navigation: any\r\n}\r\n\r\ntype CheckOperationPassword = {\r\n    password: string,\r\n    stores: Stores\r\n}\r\n\r\ntype Login = {\r\n    i18n: i18n,\r\n    stores: Stores,\r\n    navigation: any,\r\n    username: string,\r\n    password: string\r\n}\r\n\r\nexport const swapSwiper = ({ index, stores }: SwapSwiper) => {\r\n    stores.authStore.setSelectedSlide(index);\r\n}\r\n\r\nexport const initRegister = async ({ stores }: InitRegister) => {\r\n    try {\r\n        const banks = await getBanks();\r\n        const distincts = await getDistinct();\r\n        const specialities = await getSpecialities();\r\n        const authorities = await getAuthorities();\r\n        const benefits = await getAllBenefits();\r\n        const insurers = await getInsurers();\r\n\r\n        stores.configStore.setBanks(banks);\r\n        stores.configStore.setDistricts(distincts);\r\n        stores.configStore.setSpecialities(specialities);\r\n        stores.configStore.setAuthorities(authorities);\r\n        stores.configStore.setInsurers(insurers);\r\n        stores.configStore.setBenefits(benefits);\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n}\r\n\r\nexport const startRegister = ({ stores, navigation }: StartRegister) => {\r\n    stores.authStore.setRegisterData(newRegistrationForm());\r\n    navigation.navigate('RegisterStepOne');\r\n}\r\n\r\nexport const goRegisterStep2 = ({ stores, data, navigation }: GoRegisterNextStep) => {\r\n    const valid = validateStep1Data(data);\r\n    if (!valid) {\r\n        return false;\r\n    }\r\n\r\n    stores.authStore.setRegisterData(data);\r\n    navigation.navigate('RegisterStepTwo');\r\n    return true;\r\n}\r\n\r\nexport const goRegisterStep3 = ({ stores, data, navigation }: GoRegisterNextStep) => {\r\n    const valid = validateStep2Data(data);\r\n    if (!valid) {\r\n        return false;\r\n    }\r\n\r\n    stores.authStore.setRegisterData(data);\r\n    navigation.navigate('RegisterStepThree');\r\n    return true;\r\n}\r\n\r\nexport const selectServiceHour = ({ stores, type, navigation }: SelectServiceHour) => {\r\n    const { setScheduleType, registerData, setSchedules, doctor } = stores.authStore;\r\n    setScheduleType(type);\r\n    switch (type) {\r\n        case 'doctor':\r\n            setSchedules(doctor.schedules);\r\n            break;\r\n        default:\r\n            setSchedules(registerData.schedules);\r\n    }\r\n    navigation.navigate('ServiceHour');\r\n}\r\n\r\nexport const saveServiceHours = ({ stores, data, navigation }: GoRegisterNextStep) => {\r\n    const { registerData, scheduleType, doctor, setRegisterData, setDoctor } = stores.authStore;\r\n    switch (scheduleType) {\r\n        case 'doctor':\r\n            doctor.schedules = data;\r\n            setDoctor(doctor);\r\n            break;\r\n        default:\r\n            registerData.schedules = data;\r\n            setRegisterData(registerData);\r\n    }\r\n\r\n    navigation.goBack();\r\n}\r\n\r\nexport const goDoctorDetail = ({ stores, type, index = 0, navigation }: GoDoctorDetail) => {\r\n    const { registerData, setDoctor, setDoctorType, setDoctorIndex } = stores.authStore;\r\n    setDoctorType(type);\r\n    switch (type) {\r\n        case 'new':\r\n            setDoctor(newDoctor());\r\n            break;\r\n        default:\r\n            setDoctor(registerData.doctors[index]);\r\n            setDoctorIndex(index);\r\n    }\r\n    navigation.navigate('DoctorDetail');\r\n}\r\n\r\nexport const saveDoctor = ({ stores, data, navigation }: GoRegisterNextStep) => {\r\n    const valid = validateDoctor(data);\r\n    if (!valid) {\r\n        return false;\r\n    }\r\n\r\n    const { doctorType, registerData, doctorIndex, setRegisterData } = stores.authStore;\r\n    switch (doctorType) {\r\n        case 'new':\r\n            registerData.doctors.push(data);\r\n            break;\r\n        default:\r\n            registerData.doctors[doctorIndex] = data;\r\n    }\r\n\r\n    setRegisterData(registerData);\r\n    navigation.goBack();\r\n    return true;\r\n};\r\n\r\nexport const goRegisterStep4 = ({ stores, data, navigation }: GoRegisterNextStep) => {\r\n    const valid = validateStep3Data(data);\r\n    if (!valid) {\r\n        return false;\r\n    }\r\n\r\n    stores.authStore.setRegisterData(data);\r\n    navigation.navigate('RegisterStepFour');\r\n    return true;\r\n}\r\n\r\nexport const backPage = ({ navigation, index }: BackPage) => {\r\n    const resetAction = StackActions.pop(4 - index);\r\n    navigation.dispatch(resetAction);\r\n}\r\n\r\nexport const reviewDoctor = ({ navigation, stores, index }: ReviewDoctor) => {\r\n    const { registerData, setDoctorType, setDoctor, setDoctorIndex } = stores.authStore;\r\n\r\n    setDoctorIndex(index);\r\n    setDoctorType('modify');\r\n    setDoctor(registerData.doctors[index]);\r\n\r\n    navigation.pop(1);\r\n    navigation.navigate('DoctorDetail');\r\n}\r\n\r\nexport const register = async ({ navigation, stores }: Register) => {\r\n    const { registerData, setAuthState } = stores.authStore;\r\n\r\n    setAuthState('progress');\r\n    try {\r\n        await registerApi(registerData);\r\n        setAuthState('success');\r\n    } catch (error) {\r\n        setAuthState('failure');\r\n        return error.message;\r\n    }\r\n}\r\n\r\nexport const goLogin = ({ navigation, stores }: GoLogin) => {\r\n    navigation.navigate('Login');\r\n}\r\n\r\nexport const forgetPassword = async ({ navigation, email, stores }: ForgetEmail) => {\r\n    const { setAuthState } = stores.authStore;\r\n    setAuthState('progress');\r\n    try {\r\n        const result = await forgetPasswordApi(email);\r\n        setAuthState('success');\r\n        return {\r\n            success: result,\r\n            message: result ? 'Auth.ForgetPasswordEmail' : 'Common.UnknownSystemError'\r\n        }\r\n    } catch (error) {\r\n        setAuthState('failure');\r\n        return {\r\n            success: false,\r\n            message: error.message\r\n        };\r\n    }\r\n}\r\n\r\nexport const checkOperationPassword = async ({ password, stores }: CheckOperationPassword) => {\r\n    try {\r\n        const { clinicId, token } = stores.appStore;\r\n        await checkOperationPasswordApi({\r\n            clinicId,\r\n            token,\r\n            password\r\n        });\r\n        return {\r\n            success: true\r\n        };\r\n    } catch (error) {\r\n        return {\r\n            success: false,\r\n            message: 'Error.IncorrectOPPassword'\r\n        }\r\n    }\r\n}\r\n\r\nexport const login = async ({ stores, navigation, password, username, i18n }: Login) => {\r\n    try {\r\n        const { setAuthData, notificationToken } = stores.appStore;\r\n        const { clinicId, token } = await loginApi({ username, password });\r\n        await updateNotificationToken({ notificationToken, clinicId, token, i18n });\r\n\r\n        await AsyncStorage.setItem(\"token\", token);\r\n        await AsyncStorage.setItem(\"clinic_id\", clinicId);\r\n        setAuthData(token, clinicId);\r\n    } catch (error) {\r\n\r\n\r\n        console.log(\"error message\", error);\r\n\r\n        switch (error.message) {\r\n            case '0002':\r\n                return i18n.t('Auth.IncorrectCredential');\r\n            case '0009':\r\n                return i18n.t('Auth.AccountPendingApproval');\r\n            case '0010':\r\n                return i18n.t('Auth.AccountDisabled');\r\n            default:\r\n                return i18n.t('Auth.NetworkError');\r\n        }\r\n    }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}