{"ast":null,"code":"import * as _ from 'lodash';\nexport var validateEmail = function validateEmail(email) {\n  var reg = /\\S+@\\S+\\.\\S+/;\n  return reg.test(String(email).toLowerCase());\n};\nexport var validatePass = function validatePass(password) {\n  var PassLength = password == null ? void 0 : password.length;\n  return PassLength >= 6;\n};\nexport var validateName = function validateName(name) {\n  return (name == null ? void 0 : name.length) > 0;\n};\nexport var validatePhone = function validatePhone(phone) {\n  return (phone == null ? void 0 : phone.length) == 8;\n};\nexport var validateBankAccountNumber = function validateBankAccountNumber(accountNumber) {\n  return (accountNumber == null ? void 0 : accountNumber.length) >= 6 && (accountNumber == null ? void 0 : accountNumber.length) <= 12;\n};\nexport var validateClinicName = function validateClinicName(name) {\n  return (name == null ? void 0 : name.length) > 0;\n};\nexport var validateRegion = function validateRegion(region) {\n  return !!region && region !== 'Select';\n};\nexport var validateDistrict = function validateDistrict(district) {\n  return !!district;\n};\nexport var validatePhoneAllowEmpty = function validatePhoneAllowEmpty(phone) {\n  return !phone || phone.length === 8;\n};\nexport var validateGender = function validateGender(gender) {\n  return !!gender;\n};\nexport var validateMedicalServices = function validateMedicalServices(medicalServices) {\n  return medicalServices.length && !medicalServices.find(function (medi) {\n    return !medi;\n  }) ? true : false;\n};\nexport var validateAuthority = function validateAuthority(authority) {\n  return !!authority;\n};\nexport var validateDocCert = function validateDocCert(cert) {\n  return !!cert;\n};\nexport var validateConsulatation = function validateConsulatation(consultations) {\n  return consultations.map(function (consultation) {\n    return consultation.benefit && consultation.insurer && Number.isInteger(parseInt(consultation.price)) && parseInt(consultation.price) >= 0;\n  }).every(function (i) {\n    return i === true;\n  });\n};\nexport var validateDiagnosis = function validateDiagnosis(dianosis) {\n  return dianosis.length && dianosis.length < 3;\n};\nexport var validateExtraMed = function validateExtraMed(extraMed) {\n  var reg = /[*|,\":<>\\[\\]{}`';()@&$#%]/;\n\n  if (_.uniq(extraMed.map(function (med) {\n    return med.code;\n  })).length !== extraMed.length) {\n    return false;\n  }\n\n  return !_.find(extraMed, function (med) {\n    var price = Number(med.price || 0);\n\n    if (isNaN(price)) {\n      return true;\n    }\n\n    if (!med.code || !price) {\n      return true;\n    }\n\n    if (med.code && !price) {\n      return true;\n    }\n\n    if (price && !med.code) {\n      return true;\n    }\n\n    if (med.code.length > 199) {\n      return true;\n    }\n\n    if (reg.test(med.code)) {\n      return true;\n    }\n  });\n};","map":{"version":3,"names":["_","validateEmail","email","reg","test","String","toLowerCase","validatePass","password","PassLength","length","validateName","name","validatePhone","phone","validateBankAccountNumber","accountNumber","validateClinicName","validateRegion","region","validateDistrict","district","validatePhoneAllowEmpty","validateGender","gender","validateMedicalServices","medicalServices","find","medi","validateAuthority","authority","validateDocCert","cert","validateConsulatation","consultations","map","consultation","benefit","insurer","Number","isInteger","parseInt","price","every","i","validateDiagnosis","dianosis","validateExtraMed","extraMed","uniq","med","code","isNaN"],"sources":["I:/Workspace/mediWS/mccWS/frontend-clinic-app/src/utils/validate.ts"],"sourcesContent":["import { Consultation } from \"../models/consultation\";\r\nimport { ExtraMed } from \"../models/extraMed\";\r\nimport { Option } from \"../models/option\";\r\nimport * as _ from 'lodash';\r\nimport { Item } from \"native-base\";\r\n\r\nexport const validateEmail = (email: string) => {\r\n    var reg = /\\S+@\\S+\\.\\S+/;\r\n    return reg.test(String(email).toLowerCase());\r\n};\r\n\r\nexport const validatePass = (password: string) => {\r\n    let PassLength = password?.length;\r\n    return PassLength >= 6;\r\n};\r\n\r\nexport const validateName = (name: string) => {\r\n    return name?.length > 0;\r\n};\r\n\r\nexport const validatePhone = (phone: string) => {\r\n    return phone?.length == 8;\r\n};\r\n\r\nexport const validateBankAccountNumber = (accountNumber: string) => {\r\n    return accountNumber?.length >= 6 && accountNumber?.length <= 12;\r\n};\r\n\r\nexport const validateClinicName = (name: string) => {\r\n    return name?.length > 0;\r\n};\r\n\r\nexport const validateRegion = (region: string) => {\r\n    return !!region && region !== 'Select';\r\n};\r\n\r\nexport const validateDistrict = (district: string) => {\r\n    return !!district;\r\n};\r\n\r\nexport const validatePhoneAllowEmpty = (phone: string) => {\r\n    return !phone || phone.length === 8;\r\n};\r\n\r\nexport const validateGender = (gender: string) => {\r\n    return !!gender;\r\n}\r\n\r\nexport const validateMedicalServices = (medicalServices: string[]) => {\r\n    return medicalServices.length && !medicalServices.find(medi => !medi) ? true : false;\r\n};\r\n\r\nexport const validateAuthority = (authority: string) => {\r\n    return !!authority;\r\n}\r\n\r\nexport const validateDocCert = (cert: string) => {\r\n    return !!cert;\r\n}\r\n\r\nexport const validateConsulatation = (consultations: Consultation[]) => {\r\n    return consultations\r\n        .map(\r\n            (consultation) =>\r\n                consultation.benefit &&\r\n                consultation.insurer &&\r\n                Number.isInteger(parseInt(consultation.price)) &&\r\n                parseInt(consultation.price) >= 0\r\n        )\r\n        .every((i) => i === true);\r\n}\r\n\r\nexport const validateDiagnosis = (dianosis: Option[]) => {\r\n    return dianosis.length && dianosis.length < 3;\r\n}\r\n\r\nexport const validateExtraMed = (extraMed: ExtraMed[]) => {\r\n    const reg = /[*|,\":<>\\[\\]{}`';()@&$#%]/;\r\n    if (_.uniq(extraMed.map(med => med.code)).length !== extraMed.length) {\r\n        return false;\r\n    }\r\n\r\n    return !_.find(extraMed, (med) => {\r\n        const price = Number(med.price || 0);\r\n        if (isNaN(price)) {\r\n            return true;\r\n        }\r\n\r\n        if (!med.code || !price) {\r\n            return true;\r\n        }\r\n\r\n        if (med.code && !price) {\r\n            return true;\r\n        }\r\n\r\n        if (price && !med.code) {\r\n            return true;\r\n        }\r\n\r\n        if (med.code.length > 199) {\r\n            return true;\r\n        }\r\n\r\n        if (reg.test(med.code)) {\r\n            return true;\r\n        }\r\n    });\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}