{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { CameraType } from \"./Camera.types\";\nimport { canGetUserMedia, isBackCameraAvailableAsync, isFrontCameraAvailableAsync } from \"./WebUserMediaManager\";\nexport default {\n  get name() {\n    return 'ExponentCameraManager';\n  },\n\n  get Type() {\n    return {\n      back: 'back',\n      front: 'front'\n    };\n  },\n\n  get FlashMode() {\n    return {\n      on: 'on',\n      off: 'off',\n      auto: 'auto',\n      torch: 'torch'\n    };\n  },\n\n  get AutoFocus() {\n    return {\n      on: 'on',\n      off: 'off',\n      auto: 'auto',\n      singleShot: 'singleShot'\n    };\n  },\n\n  get WhiteBalance() {\n    return {\n      auto: 'auto',\n      continuous: 'continuous',\n      manual: 'manual'\n    };\n  },\n\n  get VideoQuality() {\n    return {};\n  },\n\n  isAvailableAsync: function isAvailableAsync() {\n    return _regeneratorRuntime.async(function isAvailableAsync$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", canGetUserMedia());\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  takePicture: function takePicture(options, camera) {\n    return _regeneratorRuntime.async(function takePicture$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(camera.takePicture(options));\n\n          case 2:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  pausePreview: function pausePreview(camera) {\n    return _regeneratorRuntime.async(function pausePreview$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _regeneratorRuntime.awrap(camera.pausePreview());\n\n          case 2:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  resumePreview: function resumePreview(camera) {\n    return _regeneratorRuntime.async(function resumePreview$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return _regeneratorRuntime.awrap(camera.resumePreview());\n\n          case 2:\n            return _context4.abrupt(\"return\", _context4.sent);\n\n          case 3:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  getAvailableCameraTypesAsync: function getAvailableCameraTypesAsync() {\n    var devices, types;\n    return _regeneratorRuntime.async(function getAvailableCameraTypesAsync$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            if (!(!canGetUserMedia() || !navigator.mediaDevices.enumerateDevices)) {\n              _context5.next = 2;\n              break;\n            }\n\n            return _context5.abrupt(\"return\", []);\n\n          case 2:\n            _context5.next = 4;\n            return _regeneratorRuntime.awrap(navigator.mediaDevices.enumerateDevices());\n\n          case 4:\n            devices = _context5.sent;\n            _context5.t0 = _regeneratorRuntime;\n            _context5.t1 = Promise;\n            _context5.next = 9;\n            return _regeneratorRuntime.awrap(isFrontCameraAvailableAsync(devices));\n\n          case 9:\n            _context5.t2 = _context5.sent;\n\n            if (!_context5.t2) {\n              _context5.next = 12;\n              break;\n            }\n\n            _context5.t2 = CameraType.front;\n\n          case 12:\n            _context5.t3 = _context5.t2;\n            _context5.next = 15;\n            return _regeneratorRuntime.awrap(isBackCameraAvailableAsync());\n\n          case 15:\n            _context5.t4 = _context5.sent;\n\n            if (!_context5.t4) {\n              _context5.next = 18;\n              break;\n            }\n\n            _context5.t4 = CameraType.back;\n\n          case 18:\n            _context5.t5 = _context5.t4;\n            _context5.t6 = [_context5.t3, _context5.t5];\n            _context5.t7 = _context5.t1.all.call(_context5.t1, _context5.t6);\n            _context5.next = 23;\n            return _context5.t0.awrap.call(_context5.t0, _context5.t7);\n\n          case 23:\n            types = _context5.sent;\n            return _context5.abrupt(\"return\", types.filter(Boolean));\n\n          case 25:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  getAvailablePictureSizes: function getAvailablePictureSizes(ratio, camera) {\n    return _regeneratorRuntime.async(function getAvailablePictureSizes$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.next = 2;\n            return _regeneratorRuntime.awrap(camera.getAvailablePictureSizes(ratio));\n\n          case 2:\n            return _context6.abrupt(\"return\", _context6.sent);\n\n          case 3:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n};","map":{"version":3,"sources":["../src/ExponentCameraManager.web.ts"],"names":[],"mappings":";AAAA,SAAsD,UAAtD;AAEA,SACE,eADF,EAEE,0BAFF,EAGE,2BAHF;AAMA,eAAe;EACb,IAAI,IAAJ,GAAQ;IACN,OAAO,uBAAP;EACD,CAHY;;EAIb,IAAI,IAAJ,GAAQ;IACN,OAAO;MACL,IAAI,EAAE,MADD;MAEL,KAAK,EAAE;IAFF,CAAP;EAID,CATY;;EAUb,IAAI,SAAJ,GAAa;IACX,OAAO;MACL,EAAE,EAAE,IADC;MAEL,GAAG,EAAE,KAFA;MAGL,IAAI,EAAE,MAHD;MAIL,KAAK,EAAE;IAJF,CAAP;EAMD,CAjBY;;EAkBb,IAAI,SAAJ,GAAa;IACX,OAAO;MACL,EAAE,EAAE,IADC;MAEL,GAAG,EAAE,KAFA;MAGL,IAAI,EAAE,MAHD;MAIL,UAAU,EAAE;IAJP,CAAP;EAMD,CAzBY;;EA0Bb,IAAI,YAAJ,GAAgB;IACd,OAAO;MACL,IAAI,EAAE,MADD;MAEL,UAAU,EAAE,YAFP;MAGL,MAAM,EAAE;IAHH,CAAP;EAKD,CAhCY;;EAiCb,IAAI,YAAJ,GAAgB;IACd,OAAO,EAAP;EACD,CAnCY;;EAoCP,gBApCO;IAAA;MAAA;QAAA;UAAA;YAAA,iCAqCJ,eAAe,EArCX;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA;EAuCP,WAvCO,uBAwCX,OAxCW,EAyCX,MAzCW;IAAA;MAAA;QAAA;UAAA;YAAA;YAAA,iCA2CE,MAAM,CAAC,WAAP,CAAmB,OAAnB,CA3CF;;UAAA;YAAA;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA;EA6CP,YA7CO,wBA6CM,MA7CN;IAAA;MAAA;QAAA;UAAA;YAAA;YAAA,iCA8CL,MAAM,CAAC,YAAP,EA9CK;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA;EAgDP,aAhDO,yBAgDO,MAhDP;IAAA;MAAA;QAAA;UAAA;YAAA;YAAA,iCAiDE,MAAM,CAAC,aAAP,EAjDF;;UAAA;YAAA;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA;EAmDP,4BAnDO;IAAA;IAAA;MAAA;QAAA;UAAA;YAAA,MAoDP,CAAC,eAAe,EAAhB,IAAsB,CAAC,SAAS,CAAC,YAAV,CAAuB,gBApDvC;cAAA;cAAA;YAAA;;YAAA,kCAoDgE,EApDhE;;UAAA;YAAA;YAAA,iCAsDW,SAAS,CAAC,YAAV,CAAuB,gBAAvB,EAtDX;;UAAA;YAsDL,OAtDK;YAAA;YAAA,eAwD4B,OAxD5B;YAAA;YAAA,iCAyDF,2BAA2B,CAAC,OAAD,CAzDzB;;UAAA;YAAA;;YAAA;cAAA;cAAA;YAAA;;YAAA,eAyDuC,UAAU,CAAC,KAzDlD;;UAAA;YAAA;YAAA;YAAA,iCA0DF,0BAA0B,EA1DxB;;UAAA;YAAA;;YAAA;cAAA;cAAA;YAAA;;YAAA,eA0D+B,UAAU,CAAC,IA1D1C;;UAAA;YAAA;YAAA;YAAA,4BAwDoC,GAxDpC;YAAA;YAAA;;UAAA;YAwDL,KAxDK;YAAA,kCA6DJ,KAAK,CAAC,MAAN,CAAa,OAAb,CA7DI;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA;EA+DP,wBA/DO,oCA+DkB,KA/DlB,EA+DiC,MA/DjC;IAAA;MAAA;QAAA;UAAA;YAAA;YAAA,iCAgEE,MAAM,CAAC,wBAAP,CAAgC,KAAhC,CAhEF;;UAAA;YAAA;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA;AAAA,CAAf","sourcesContent":["import { CameraCapturedPicture, CameraPictureOptions, CameraType } from './Camera.types';\nimport { ExponentCameraRef } from './ExponentCamera.web';\nimport {\n  canGetUserMedia,\n  isBackCameraAvailableAsync,\n  isFrontCameraAvailableAsync,\n} from './WebUserMediaManager';\n\nexport default {\n  get name(): string {\n    return 'ExponentCameraManager';\n  },\n  get Type() {\n    return {\n      back: 'back',\n      front: 'front',\n    };\n  },\n  get FlashMode() {\n    return {\n      on: 'on',\n      off: 'off',\n      auto: 'auto',\n      torch: 'torch',\n    };\n  },\n  get AutoFocus() {\n    return {\n      on: 'on',\n      off: 'off',\n      auto: 'auto',\n      singleShot: 'singleShot',\n    };\n  },\n  get WhiteBalance() {\n    return {\n      auto: 'auto',\n      continuous: 'continuous',\n      manual: 'manual',\n    };\n  },\n  get VideoQuality() {\n    return {};\n  },\n  async isAvailableAsync(): Promise<boolean> {\n    return canGetUserMedia();\n  },\n  async takePicture(\n    options: CameraPictureOptions,\n    camera: ExponentCameraRef\n  ): Promise<CameraCapturedPicture> {\n    return await camera.takePicture(options);\n  },\n  async pausePreview(camera: ExponentCameraRef): Promise<void> {\n    await camera.pausePreview();\n  },\n  async resumePreview(camera: ExponentCameraRef): Promise<void> {\n    return await camera.resumePreview();\n  },\n  async getAvailableCameraTypesAsync(): Promise<string[]> {\n    if (!canGetUserMedia() || !navigator.mediaDevices.enumerateDevices) return [];\n\n    const devices = await navigator.mediaDevices.enumerateDevices();\n\n    const types: (string | null)[] = await Promise.all([\n      (await isFrontCameraAvailableAsync(devices)) && CameraType.front,\n      (await isBackCameraAvailableAsync()) && CameraType.back,\n    ]);\n\n    return types.filter(Boolean) as string[];\n  },\n  async getAvailablePictureSizes(ratio: string, camera: ExponentCameraRef): Promise<string[]> {\n    return await camera.getAvailablePictureSizes(ratio);\n  },\n\n  // TODO(Bacon): Is video possible?\n  // record(options): Promise\n  // stopRecording(): Promise<void>\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}