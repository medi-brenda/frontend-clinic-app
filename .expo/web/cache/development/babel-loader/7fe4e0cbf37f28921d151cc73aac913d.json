{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport { extendObservable, runInAction } from 'mobx';\nimport { newSetting } from \"../models/setting\";\nexport var ConfigStore = function ConfigStore() {\n  var _this = this;\n\n  _classCallCheck(this, ConfigStore);\n\n  this.banks = [];\n  this.districts = [];\n  this.specialities = [];\n  this.authorities = [];\n  this.insurers = [];\n  this.benefits = [];\n  this.doctors = [];\n  this.diagnosis = [];\n\n  this.setBanks = function (banks) {\n    runInAction(function () {\n      _this.banks = banks;\n    });\n  };\n\n  this.setDistricts = function (districts) {\n    runInAction(function () {\n      _this.districts = districts;\n    });\n  };\n\n  this.setSpecialities = function (specialities) {\n    runInAction(function () {\n      _this.specialities = specialities;\n    });\n  };\n\n  this.setAuthorities = function (authorities) {\n    runInAction(function () {\n      _this.authorities = authorities;\n    });\n  };\n\n  this.setBenefits = function (benefits) {\n    runInAction(function () {\n      _this.benefits = benefits;\n    });\n  };\n\n  this.setInsurers = function (insurers) {\n    runInAction(function () {\n      _this.insurers = insurers;\n    });\n  };\n\n  this.setDoctors = function (doctors) {\n    runInAction(function () {\n      _this.doctors = doctors;\n    });\n  };\n\n  this.setDiagnosis = function (diagnosis) {\n    runInAction(function () {\n      _this.diagnosis = diagnosis;\n    });\n  };\n\n  extendObservable(this, {\n    banks: [],\n    districts: [],\n    specialities: [],\n    authorities: [],\n    benefits: [],\n    insurers: [],\n    doctor: [],\n    diagnosis: [],\n    setting: newSetting()\n  });\n};\nexport default ConfigStore;","map":{"version":3,"names":["extendObservable","runInAction","newSetting","ConfigStore","banks","districts","specialities","authorities","insurers","benefits","doctors","diagnosis","setBanks","setDistricts","setSpecialities","setAuthorities","setBenefits","setInsurers","setDoctors","setDiagnosis","doctor","setting"],"sources":["I:/Workspace/mediWS/mccWS/frontend-clinic-app/src/stores/config.ts"],"sourcesContent":["import {extendObservable, runInAction} from 'mobx';\r\nimport {Authority} from '../models/authorities';\r\nimport {Bank} from '../models/bank';\r\nimport {Benefit} from '../models/benefit';\r\nimport {District} from '../models/district';\r\nimport {Insurer} from '../models/insurer';\r\nimport {Option} from '../models/option';\r\nimport {newSetting} from '../models/setting';\r\nimport {Specialities} from '../models/specialities';\r\n\r\nexport class ConfigStore {\r\n    // registers\r\n    banks: Bank[] = [];\r\n    districts: District[] = [];\r\n    specialities: Specialities[] = [];\r\n    authorities: Authority[] = [];\r\n    insurers: Insurer[] = [];\r\n    benefits: Benefit[] = [];\r\n    doctors: Option[] = [];\r\n    diagnosis: Option[] = [];\r\n\r\n    constructor() {\r\n        extendObservable(this, {\r\n            banks: [],\r\n            districts: [],\r\n            specialities: [],\r\n            authorities: [],\r\n            benefits: [],\r\n            insurers: [],\r\n            doctor: [],\r\n            diagnosis: [],\r\n            setting: newSetting()\r\n        });\r\n    }\r\n\r\n    setBanks = (banks: Bank[]) => {\r\n        runInAction(() => {\r\n            this.banks = banks;\r\n        })\r\n    }\r\n\r\n    setDistricts = (districts: District[]) => {\r\n        runInAction(() => {\r\n            this.districts = districts;\r\n        })\r\n    }\r\n\r\n    setSpecialities = (specialities: Specialities[]) => {\r\n        runInAction(() => {\r\n            this.specialities = specialities;\r\n        })\r\n    }\r\n\r\n    setAuthorities = (authorities: Authority[]) => {\r\n        runInAction(() => {\r\n            this.authorities = authorities;\r\n        })\r\n    }\r\n\r\n    setBenefits = (benefits: Benefit[]) => {\r\n        runInAction(() => {\r\n            this.benefits = benefits;\r\n        })\r\n    }\r\n\r\n    setInsurers = (insurers: Insurer[]) => {\r\n        runInAction(() => {\r\n            this.insurers = insurers;\r\n        })\r\n    }\r\n\r\n    setDoctors = (doctors: Option[]) => {\r\n        runInAction(() => {\r\n            this.doctors = doctors;\r\n        })\r\n    }\r\n\r\n    setDiagnosis = (diagnosis: Option[]) => {\r\n        runInAction(() => {\r\n            this.diagnosis = diagnosis;\r\n        })\r\n    }\r\n\r\n}\r\n\r\nexport default ConfigStore;\r\n"],"mappings":";AAAA,SAAQA,gBAAR,EAA0BC,WAA1B,QAA4C,MAA5C;AAOA,SAAQC,UAAR;AAGA,WAAaC,WAAb,GAWI,uBAAc;EAAA;;EAAA;;EAAA,KATdC,KASc,GATE,EASF;EAAA,KARdC,SAQc,GARU,EAQV;EAAA,KAPdC,YAOc,GAPiB,EAOjB;EAAA,KANdC,WAMc,GANa,EAMb;EAAA,KALdC,QAKc,GALQ,EAKR;EAAA,KAJdC,QAIc,GAJQ,EAIR;EAAA,KAHdC,OAGc,GAHM,EAGN;EAAA,KAFdC,SAEc,GAFQ,EAER;;EAAA,KAcdC,QAdc,GAcH,UAACR,KAAD,EAAmB;IAC1BH,WAAW,CAAC,YAAM;MACd,KAAI,CAACG,KAAL,GAAaA,KAAb;IACH,CAFU,CAAX;EAGH,CAlBa;;EAAA,KAoBdS,YApBc,GAoBC,UAACR,SAAD,EAA2B;IACtCJ,WAAW,CAAC,YAAM;MACd,KAAI,CAACI,SAAL,GAAiBA,SAAjB;IACH,CAFU,CAAX;EAGH,CAxBa;;EAAA,KA0BdS,eA1Bc,GA0BI,UAACR,YAAD,EAAkC;IAChDL,WAAW,CAAC,YAAM;MACd,KAAI,CAACK,YAAL,GAAoBA,YAApB;IACH,CAFU,CAAX;EAGH,CA9Ba;;EAAA,KAgCdS,cAhCc,GAgCG,UAACR,WAAD,EAA8B;IAC3CN,WAAW,CAAC,YAAM;MACd,KAAI,CAACM,WAAL,GAAmBA,WAAnB;IACH,CAFU,CAAX;EAGH,CApCa;;EAAA,KAsCdS,WAtCc,GAsCA,UAACP,QAAD,EAAyB;IACnCR,WAAW,CAAC,YAAM;MACd,KAAI,CAACQ,QAAL,GAAgBA,QAAhB;IACH,CAFU,CAAX;EAGH,CA1Ca;;EAAA,KA4CdQ,WA5Cc,GA4CA,UAACT,QAAD,EAAyB;IACnCP,WAAW,CAAC,YAAM;MACd,KAAI,CAACO,QAAL,GAAgBA,QAAhB;IACH,CAFU,CAAX;EAGH,CAhDa;;EAAA,KAkDdU,UAlDc,GAkDD,UAACR,OAAD,EAAuB;IAChCT,WAAW,CAAC,YAAM;MACd,KAAI,CAACS,OAAL,GAAeA,OAAf;IACH,CAFU,CAAX;EAGH,CAtDa;;EAAA,KAwDdS,YAxDc,GAwDC,UAACR,SAAD,EAAyB;IACpCV,WAAW,CAAC,YAAM;MACd,KAAI,CAACU,SAAL,GAAiBA,SAAjB;IACH,CAFU,CAAX;EAGH,CA5Da;;EACVX,gBAAgB,CAAC,IAAD,EAAO;IACnBI,KAAK,EAAE,EADY;IAEnBC,SAAS,EAAE,EAFQ;IAGnBC,YAAY,EAAE,EAHK;IAInBC,WAAW,EAAE,EAJM;IAKnBE,QAAQ,EAAE,EALS;IAMnBD,QAAQ,EAAE,EANS;IAOnBY,MAAM,EAAE,EAPW;IAQnBT,SAAS,EAAE,EARQ;IASnBU,OAAO,EAAEnB,UAAU;EATA,CAAP,CAAhB;AAWH,CAvBL;AA2EA,eAAeC,WAAf"},"metadata":{},"sourceType":"module"}