{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"I:\\\\Workspace\\\\mediWS\\\\mccWS\\\\frontend-clinic-app\\\\src\\\\pages\\\\doctorProfile\\\\index.tsx\";\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useNavigation } from '@react-navigation/native';\nimport { observer } from 'mobx-react';\nimport { Container, View } from 'native-base';\nimport React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { ScrollView } from 'react-native-gesture-handler';\nimport TitleBar from \"../../components/titleBar\";\nimport { useStores } from \"../../stores\";\nimport { translate } from \"../../utils/string\";\nimport ReadOnlyField from \"../../components/readOnlyField/infex\";\nimport { initDoctorProfileDetail } from \"../../actions/app\";\nimport Loading from \"../loading\";\nimport ErrorPage from \"../error\";\nimport BenefitItem from \"./BenefitItem\";\nimport * as _ from 'lodash';\nimport PhoneCall from \"../../components/phoneCall\";\nvar DoctorProfilePage = observer(function () {\n  var _doctorProfile$specia;\n\n  var _useTranslation = useTranslation(),\n      i18n = _useTranslation.i18n,\n      t = _useTranslation.t;\n\n  var stores = useStores();\n  var navigation = useNavigation();\n  var doctorProfile = stores.dataStore.doctorProfile;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      error = _useState4[0],\n      setError = _useState4[1];\n\n  var doctorProfileList = stores.dataStore.doctorProfileList;\n  useEffect(function () {\n    init();\n  }, []);\n\n  var init = function init() {\n    var errorMsg;\n    return _regeneratorRuntime.async(function init$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setLoading(true);\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(initDoctorProfileDetail({\n              stores: stores,\n              navigation: navigation,\n              i18n: i18n\n            }));\n\n          case 3:\n            errorMsg = _context.sent;\n            setLoading(false);\n\n            if (errorMsg) {\n              setError(errorMsg);\n            }\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var isEng = i18n.language === 'en';\n\n  var existBenefitCodes = _.uniq(_.map(doctorProfile.benefits, 'benefitCode'));\n\n  return React.createElement(Container, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, React.createElement(TitleBar, {\n    title: t('DoctorProfile.Title'),\n    onBack: function onBack() {\n      navigation.goBack();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }\n  }), loading ? React.createElement(Loading, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 27\n    }\n  }) : error ? React.createElement(ErrorPage, {\n    title: error,\n    onRetry: init,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 29\n    }\n  }) : React.createElement(ScrollView, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 25\n    }\n  }, React.createElement(View, {\n    style: styleSheet.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 29\n    }\n  }, React.createElement(ReadOnlyField, {\n    title: t('DoctorProfile.Name_en'),\n    value: doctorProfile.nameEn,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 33\n    }\n  }), React.createElement(ReadOnlyField, {\n    title: t('DoctorProfile.Name_cn'),\n    value: doctorProfile.nameChi,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 33\n    }\n  }), React.createElement(ReadOnlyField, {\n    title: t('DoctorProfile.Gender'),\n    value: doctorProfile.gender === 'F' ? t('DoctorProfile.Female') : t('DoctorProfile.Male'),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 33\n    }\n  }), React.createElement(ReadOnlyField, {\n    title: t('DoctorProfile.Speciality'),\n    value: (_doctorProfile$specia = doctorProfile.speciality) == null ? void 0 : _doctorProfile$specia.map(function (item) {\n      return translate(item, i18n);\n    }),\n    type: 'stringArray',\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 33\n    }\n  }), React.createElement(ReadOnlyField, {\n    title: t('DoctorProfile.Authority'),\n    value: isEng ? doctorProfile.authorityEn : doctorProfile.authorityChi,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 33\n    }\n  }), React.createElement(ReadOnlyField, {\n    title: t('DoctorProfile.Service_hour'),\n    value: doctorProfile.schedules,\n    type: 'schedule',\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 33\n    }\n  }), React.createElement(View, {\n    style: styleSheet.paddingTop,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 33\n    }\n  }, existBenefitCodes.map(function (benefitCode, index) {\n    return React.createElement(BenefitItem, {\n      key: \"benefit-\" + index,\n      benefitCode: benefitCode,\n      benefits: _.filter(doctorProfile.benefits, function (benefit) {\n        return benefit.benefitCode === benefitCode;\n      }),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 45\n      }\n    });\n  })))), React.createElement(PhoneCall, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }\n  }));\n});\nvar styleSheet = StyleSheet.create({\n  container: {\n    paddingLeft: 20,\n    paddingRight: 20\n  },\n  data: {\n    color: \"black\",\n    fontWeight: \"normal\"\n  },\n  divider: {\n    backgroundColor: \"grey\"\n  },\n  serviceHour: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\"\n  },\n  shTitle: {\n    fontSize: 18\n  },\n  paddingTop: {\n    paddingTop: 16\n  }\n});\nexport default DoctorProfilePage;","map":{"version":3,"names":["useNavigation","observer","Container","View","React","useEffect","useState","useTranslation","ScrollView","TitleBar","useStores","translate","ReadOnlyField","initDoctorProfileDetail","Loading","ErrorPage","BenefitItem","_","PhoneCall","DoctorProfilePage","i18n","t","stores","navigation","doctorProfile","dataStore","loading","setLoading","error","setError","doctorProfileList","init","errorMsg","isEng","language","existBenefitCodes","uniq","map","benefits","goBack","styleSheet","container","nameEn","nameChi","gender","speciality","item","authorityEn","authorityChi","schedules","paddingTop","benefitCode","index","filter","benefit","StyleSheet","create","paddingLeft","paddingRight","data","color","fontWeight","divider","backgroundColor","serviceHour","flexDirection","justifyContent","shTitle","fontSize"],"sources":["I:/Workspace/mediWS/mccWS/frontend-clinic-app/src/pages/doctorProfile/index.tsx"],"sourcesContent":["import { useNavigation } from '@react-navigation/native';\r\nimport { observer } from 'mobx-react';\r\nimport { Container, View } from 'native-base';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { StyleSheet } from 'react-native';\r\nimport { ScrollView } from 'react-native-gesture-handler';\r\nimport TitleBar from '../../components/titleBar';\r\nimport { useStores } from '../../stores';\r\nimport { translate } from '../../utils/string';\r\nimport ReadOnlyField from '../../components/readOnlyField/infex';\r\nimport { initDoctorProfileDetail } from '../../actions/app';\r\nimport Loading from '../loading';\r\nimport ErrorPage from '../error';\r\nimport BenefitItem from './BenefitItem';\r\nimport * as _ from 'lodash';\r\nimport PhoneCall from \"../../components/phoneCall\";\r\n\r\nconst DoctorProfilePage = observer(() => {\r\n    const { i18n, t } = useTranslation();\r\n    const stores = useStores();\r\n    const navigation = useNavigation();\r\n\r\n    const { doctorProfile } = stores.dataStore;\r\n\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState('');\r\n\r\n    const { doctorProfileList } = stores.dataStore;\r\n\r\n    useEffect(() => {\r\n        init();\r\n    }, []);\r\n\r\n    const init = async () => {\r\n        setLoading(true);\r\n        const errorMsg = await initDoctorProfileDetail({ stores, navigation, i18n });\r\n        setLoading(false);\r\n        if (errorMsg) {\r\n            setError(errorMsg)\r\n        }\r\n    }\r\n    const isEng = i18n.language === 'en';\r\n    const existBenefitCodes = _.uniq(_.map(doctorProfile.benefits, 'benefitCode'));\r\n\r\n    return (\r\n        <Container>\r\n            <TitleBar\r\n                title={t('DoctorProfile.Title')}\r\n                onBack={() => { navigation.goBack(); }}\r\n            />\r\n            {\r\n                loading ? <Loading /> :\r\n                    error ? <ErrorPage title={error} onRetry={init} /> :\r\n                        <ScrollView>\r\n                            <View style={styleSheet.container}>\r\n                                <ReadOnlyField\r\n                                    title={t('DoctorProfile.Name_en')}\r\n                                    value={doctorProfile.nameEn}\r\n                                />\r\n                                <ReadOnlyField\r\n                                    title={t('DoctorProfile.Name_cn')}\r\n                                    value={doctorProfile.nameChi}\r\n                                />\r\n                                <ReadOnlyField\r\n                                    title={t('DoctorProfile.Gender')}\r\n                                    value={doctorProfile.gender === 'F' ? t('DoctorProfile.Female') : t('DoctorProfile.Male')}\r\n                                />\r\n                                <ReadOnlyField\r\n                                    title={t('DoctorProfile.Speciality')}\r\n                                    value={doctorProfile.speciality?.map((item) => translate(item, i18n))}\r\n                                    type={'stringArray'}\r\n                                />\r\n                                <ReadOnlyField\r\n                                    title={t('DoctorProfile.Authority')}\r\n                                    value={isEng ? doctorProfile.authorityEn : doctorProfile.authorityChi}\r\n                                />\r\n                                <ReadOnlyField\r\n                                    title={t('DoctorProfile.Service_hour')}\r\n                                    value={doctorProfile.schedules}\r\n                                    type={'schedule'}\r\n                                />\r\n                                <View style={styleSheet.paddingTop}>\r\n                                    {\r\n                                        existBenefitCodes.map((benefitCode, index) => (\r\n                                            <BenefitItem\r\n                                                key={`benefit-${index}`}\r\n                                                benefitCode={benefitCode}\r\n                                                benefits={_.filter(doctorProfile.benefits, benefit => benefit.benefitCode === benefitCode)}\r\n                                            />\r\n                                        ))\r\n                                    }\r\n                                </View>\r\n                            </View>\r\n                        </ScrollView>\r\n            }\r\n\r\n            <PhoneCall/>\r\n        </Container>\r\n    )\r\n});\r\n\r\nconst styleSheet = StyleSheet.create({\r\n    container: {\r\n        paddingLeft: 20,\r\n        paddingRight: 20\r\n    },\r\n    data: {\r\n        color: \"black\",\r\n        fontWeight: \"normal\",\r\n    },\r\n    divider: {\r\n        backgroundColor: \"grey\"\r\n    },\r\n    serviceHour: {\r\n        flexDirection: \"row\",\r\n        justifyContent: \"space-between\"\r\n    },\r\n    shTitle: {\r\n        fontSize: 18\r\n    },\r\n    paddingTop: {\r\n        paddingTop: 16\r\n    }\r\n});\r\n\r\nexport default DoctorProfilePage;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}