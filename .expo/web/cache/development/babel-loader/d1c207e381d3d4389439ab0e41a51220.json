{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { newOption } from \"../models/option\";\nimport { request, requestPhp } from \"../utils/request\";\nimport * as _ from 'lodash';\nimport { newMethod } from \"../models/setting\";\nimport { newRecord } from \"../models/record\";\nimport moment from 'moment';\nimport { newPersonalProfile } from \"../models/personalProfile\";\nimport { newClinic } from \"../models/clinic\";\nimport { newDoctorProfile } from \"../models/doctor\";\nimport Config from \"../utils/config\";\nimport { newInsurer } from \"../models/insurer\";\nexport var getDoctors = function getDoctors(_ref) {\n  var token, clinicId, benefitCode, resp;\n  return _regeneratorRuntime.async(function getDoctors$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          token = _ref.token, clinicId = _ref.clinicId, benefitCode = _ref.benefitCode;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(requestPhp({\n            url: 'api/getDoctorsWithBenefitsInClinic.php',\n            data: {\n              token: token,\n              clinic_id: clinicId,\n              benefit: benefitCode\n            }\n          }));\n\n        case 3:\n          resp = _context.sent;\n          return _context.abrupt(\"return\", _.map(resp.data, function (option) {\n            return {\n              code: option.doctor_id,\n              nameEn: option.name_en,\n              nameChi: option.name_cn\n            };\n          }));\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var getDoctorsByClinicInsurerBenefit = function getDoctorsByClinicInsurerBenefit(_ref2) {\n  var token, clinicId, insurerId, benefitCode, resp;\n  return _regeneratorRuntime.async(function getDoctorsByClinicInsurerBenefit$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          token = _ref2.token, clinicId = _ref2.clinicId, insurerId = _ref2.insurerId, benefitCode = _ref2.benefitCode;\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(requestPhp({\n            url: 'api/getDoctorsByClinicInsurerBenefit.php',\n            data: {\n              token: token,\n              clinic_id: clinicId,\n              insurer_id: insurerId,\n              benefit_code: benefitCode\n            }\n          }));\n\n        case 3:\n          resp = _context2.sent;\n          return _context2.abrupt(\"return\", _.map(resp.data, function (option) {\n            return {\n              code: option.doctor_id,\n              nameEn: option.name_en,\n              nameChi: option.name_cn\n            };\n          }));\n\n        case 5:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var getSettings = function getSettings(_ref3) {\n  var token, clinicId, i18n, resp;\n  return _regeneratorRuntime.async(function getSettings$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          token = _ref3.token, clinicId = _ref3.clinicId, i18n = _ref3.i18n;\n          _context3.next = 3;\n          return _regeneratorRuntime.awrap(request({\n            url: 'settings',\n            data: {\n              clinic_id: Number(clinicId)\n            },\n            token: token,\n            i18n: i18n\n          }));\n\n        case 3:\n          resp = _context3.sent;\n          return _context3.abrupt(\"return\", {\n            method: newMethod({\n              physicalCard: Number(resp.card_status) === 1 && Config.method.physicalCard\n            }),\n            displayIncome: Number(resp.display_income_from_network) === 1\n          });\n\n        case 5:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var getDiagnosis = function getDiagnosis(_ref4) {\n  var token, payToken, search, i18n, insurer, icd, data;\n  return _regeneratorRuntime.async(function getDiagnosis$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          token = _ref4.token, payToken = _ref4.payToken, search = _ref4.search, i18n = _ref4.i18n, insurer = _ref4.insurer;\n          icd = _.get(insurer, 'icd', _.startsWith(payToken, 'PCLL') ? 10 : 9);\n          _context4.next = 4;\n          return _regeneratorRuntime.awrap(request({\n            url: 'getDiagnosis',\n            data: {\n              icd: icd,\n              search: search\n            },\n            token: token,\n            i18n: i18n\n          }));\n\n        case 4:\n          data = _context4.sent;\n          return _context4.abrupt(\"return\", _.map(data.diagnosis, function (diagnosis) {\n            return {\n              id: diagnosis.diagnosis_id,\n              code: diagnosis.code,\n              nameChi: diagnosis.name_cn,\n              nameEn: diagnosis.name_en\n            };\n          }));\n\n        case 6:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var getInsurers = function getInsurers(_ref5) {\n  var token, i18n, _await$request, insurers;\n\n  return _regeneratorRuntime.async(function getInsurers$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          token = _ref5.token, i18n = _ref5.i18n;\n          _context5.next = 3;\n          return _regeneratorRuntime.awrap(request({\n            url: 'insurers',\n            token: token,\n            i18n: i18n\n          }));\n\n        case 3:\n          _await$request = _context5.sent;\n          insurers = _await$request.insurers;\n          return _context5.abrupt(\"return\", _.map(insurers, function (option) {\n            return newInsurer({\n              code: option.insurer_id,\n              icd: option.icd,\n              name: option.name,\n              physicalCard: option.support_medical_card === 'T',\n              physicalCardImg: Config.publicUrl + \"admin-portal/\" + option.physical_card_image,\n              physicalCardDesc: {\n                nameChi: _.get(option, 'physical_card_description_cn', ''),\n                nameEn: _.get(option, 'physical_card_description_en', '')\n              },\n              nameEn: option.description_en,\n              nameChi: option.description_cn,\n              shouldInputPayToken: option.should_input_pay_token\n            });\n          }));\n\n        case 6:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var getInsurersByClinic = function getInsurersByClinic(_ref6) {\n  var token, clinicId, _await$requestPhp, data;\n\n  return _regeneratorRuntime.async(function getInsurersByClinic$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          token = _ref6.token, clinicId = _ref6.clinicId;\n          _context6.next = 3;\n          return _regeneratorRuntime.awrap(requestPhp({\n            url: 'api/getInsurersByClinic.php',\n            data: {\n              token: token,\n              clinic_id: clinicId\n            }\n          }));\n\n        case 3:\n          _await$requestPhp = _context6.sent;\n          data = _await$requestPhp.data;\n          return _context6.abrupt(\"return\", _.map(data, function (option) {\n            return newInsurer({\n              code: option.insurer_id,\n              icd: option.icd,\n              name: option.name,\n              physicalCard: option.support_medical_card === 'T',\n              physicalCardImg: Config.publicUrl + \"admin-portal/\" + option.physical_card_image,\n              physicalCardDesc: {\n                nameChi: _.get(option, 'physical_card_description_cn', ''),\n                nameEn: _.get(option, 'physical_card_description_en', '')\n              },\n              nameEn: option.description_en,\n              nameChi: option.description_cn,\n              shouldInputPayToken: option.should_input_pay_token\n            });\n          }));\n\n        case 6:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var getRecords = function getRecords(_ref7) {\n  var token, clinicId, startDate, endDate, i18n, resp;\n  return _regeneratorRuntime.async(function getRecords$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          token = _ref7.token, clinicId = _ref7.clinicId, startDate = _ref7.startDate, endDate = _ref7.endDate, i18n = _ref7.i18n;\n          _context7.next = 3;\n          return _regeneratorRuntime.awrap(request({\n            url: startDate ? 'records/getByDate' : 'records/getAll',\n            data: {\n              clinicId: clinicId,\n              startDate: startDate ? moment(startDate).format('YYYY-MM-DD') : undefined,\n              endDate: startDate ? moment(endDate).format('YYYY-MM-DD') : undefined\n            },\n            token: token,\n            i18n: i18n\n          }));\n\n        case 3:\n          resp = _context7.sent;\n          return _context7.abrupt(\"return\", _.map(resp.data, function (data) {\n            return newRecord(data);\n          }).sort(function (a, b) {\n            return moment(a.transactionTime).diff(moment(b.transactionTime));\n          }));\n\n        case 5:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var getRecord = function getRecord(_ref8) {\n  var token, clinicId, recordId, i18n, resp;\n  return _regeneratorRuntime.async(function getRecord$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          token = _ref8.token, clinicId = _ref8.clinicId, recordId = _ref8.recordId, i18n = _ref8.i18n;\n          _context8.next = 3;\n          return _regeneratorRuntime.awrap(request({\n            url: 'records/getById',\n            data: {\n              token: token,\n              clinicId: clinicId,\n              recordId: recordId\n            },\n            token: token,\n            i18n: i18n\n          }));\n\n        case 3:\n          resp = _context8.sent;\n          return _context8.abrupt(\"return\", newRecord(resp.data));\n\n        case 5:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var downloadReport = function downloadReport(_ref9) {\n  var token, clinicId, year, month, resp;\n  return _regeneratorRuntime.async(function downloadReport$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          token = _ref9.token, clinicId = _ref9.clinicId, year = _ref9.year, month = _ref9.month;\n          _context9.next = 3;\n          return _regeneratorRuntime.awrap(requestPhp({\n            url: 'api/getReport.php',\n            data: {\n              clinic_id: clinicId,\n              token: token,\n              type: 'email',\n              year: year,\n              month: month\n            }\n          }));\n\n        case 3:\n          resp = _context9.sent;\n\n        case 4:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var getPersonalProfile = function getPersonalProfile(_ref10) {\n  var token, clinicId, _await$requestPhp2, data;\n\n  return _regeneratorRuntime.async(function getPersonalProfile$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          token = _ref10.token, clinicId = _ref10.clinicId;\n          _context10.next = 3;\n          return _regeneratorRuntime.awrap(requestPhp({\n            url: 'api/getPersonalProfile.php',\n            data: {\n              clinic_id: clinicId,\n              token: token\n            }\n          }));\n\n        case 3:\n          _await$requestPhp2 = _context10.sent;\n          data = _await$requestPhp2.data;\n          return _context10.abrupt(\"return\", newPersonalProfile({\n            email: data.email,\n            cantactPerson: data.contact_person,\n            phone: data.contact_phone,\n            bankCode: data.bank_code,\n            bankAccount: data.bank_account\n          }));\n\n        case 6:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar formatHm = function formatHm(date) {\n  if (date.length !== 3 && date.length !== 4) {\n    return {\n      h: 0,\n      m: 0\n    };\n  }\n\n  var hourEndPosition = date.length === 3 ? 1 : 2;\n  return {\n    h: Number(date.substring(0, hourEndPosition)),\n    m: Number(date.slice(hourEndPosition))\n  };\n};\n\nvar formatSchedule = function formatSchedule(data) {\n  var resp = [{\n    workingHours: [],\n    closed: true\n  }, {\n    workingHours: [],\n    closed: true\n  }, {\n    workingHours: [],\n    closed: true\n  }, {\n    workingHours: [],\n    closed: true\n  }, {\n    workingHours: [],\n    closed: true\n  }, {\n    workingHours: [],\n    closed: true\n  }, {\n    workingHours: [],\n    closed: true\n  }, {\n    workingHours: [],\n    closed: true\n  }];\n\n  _.forEach(data, function (obj) {\n    resp[obj.day_code].workingHours.push({\n      from: formatHm(obj.time_begin),\n      to: formatHm(obj.time_end)\n    });\n  });\n\n  _.forEach(resp, function (obj) {\n    obj.closed = obj.workingHours.length ? false : true;\n  });\n\n  return resp;\n};\n\nexport var getClinicProfile = function getClinicProfile(_ref11) {\n  var token, clinicId, _await$requestPhp3, data;\n\n  return _regeneratorRuntime.async(function getClinicProfile$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          token = _ref11.token, clinicId = _ref11.clinicId;\n          _context11.next = 3;\n          return _regeneratorRuntime.awrap(requestPhp({\n            url: 'api/getClinicProfile.php',\n            data: {\n              clinic_id: clinicId,\n              token: token\n            }\n          }));\n\n        case 3:\n          _await$requestPhp3 = _context11.sent;\n          data = _await$requestPhp3.data;\n          return _context11.abrupt(\"return\", newClinic({\n            clinicNameEn: data.clinic_name_en,\n            clinicNameChi: data.clinic_name_cn,\n            addressEn: data.address_en,\n            addressChi: data.address_cn,\n            districtNameEn: data.district_name_en,\n            districtNameChi: data.district_name_cn,\n            regionNameEn: data.region_name_en,\n            regionNameChi: data.region_name_cn,\n            phone: data.clinic_phone_1,\n            phone2: data.clinic_phone_2 || 'N/A',\n            fax: data.clinic_fax_1 || 'N/A',\n            schedules: formatSchedule(data.service_hour)\n          }));\n\n        case 6:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var getAllDoctors = function getAllDoctors(_ref12) {\n  var token, clinicId, _await$requestPhp4, data;\n\n  return _regeneratorRuntime.async(function getAllDoctors$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          token = _ref12.token, clinicId = _ref12.clinicId;\n          _context12.next = 3;\n          return _regeneratorRuntime.awrap(requestPhp({\n            url: 'api/getClinicDoctor.php',\n            data: {\n              clinic_id: clinicId,\n              token: token\n            }\n          }));\n\n        case 3:\n          _await$requestPhp4 = _context12.sent;\n          data = _await$requestPhp4.data;\n          return _context12.abrupt(\"return\", _.map(data, function (obj) {\n            return newOption({\n              code: obj.doctor_id,\n              nameEn: obj.name_en,\n              nameChi: obj.name_cn\n            });\n          }));\n\n        case 6:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var getDoctorList = function getDoctorList(_ref13) {\n  var token, clinicId, _await$requestPhp5, data;\n\n  return _regeneratorRuntime.async(function getDoctorList$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          token = _ref13.token, clinicId = _ref13.clinicId;\n          _context13.next = 3;\n          return _regeneratorRuntime.awrap(requestPhp({\n            url: 'api/getClinicDoctor.php',\n            data: {\n              clinic_id: clinicId,\n              token: token\n            }\n          }));\n\n        case 3:\n          _await$requestPhp5 = _context13.sent;\n          data = _await$requestPhp5.data;\n          return _context13.abrupt(\"return\", _.map(data, function (obj) {\n            return newDoctorProfile({\n              id: obj.doctor_id,\n              nameEn: obj.name_en,\n              nameChi: obj.name_cn,\n              gender: obj.gender,\n              speciality: _.map(obj.speciality, function (obj2) {\n                return {\n                  code: obj2.benefit_code,\n                  nameEn: obj2.name_en,\n                  nameChi: obj2.name_cn\n                };\n              }),\n              authorityEn: obj.authority_name_en,\n              authorityChi: obj.authority_name_cn,\n              schedules: formatSchedule(obj.service_hour),\n              status: obj.active_status\n            });\n          }));\n\n        case 6:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var getDoctorProfile = function getDoctorProfile(_ref14) {\n  var token, clinicId, doctor, _await$requestPhp6, data, benefits;\n\n  return _regeneratorRuntime.async(function getDoctorProfile$(_context14) {\n    while (1) {\n      switch (_context14.prev = _context14.next) {\n        case 0:\n          token = _ref14.token, clinicId = _ref14.clinicId, doctor = _ref14.doctor;\n          _context14.next = 3;\n          return _regeneratorRuntime.awrap(requestPhp({\n            url: 'api/getDoctorDetail.php',\n            data: {\n              token: token,\n              doctor_id: doctor.id,\n              clinic_id: clinicId\n            }\n          }));\n\n        case 3:\n          _await$requestPhp6 = _context14.sent;\n          data = _await$requestPhp6.data;\n          benefits = _.map(data.benefits, function (benefit) {\n            return {\n              benefitCode: benefit.benefit_code,\n              insurerId: benefit.insurer_id,\n              doctorCode: benefit.doctor_code,\n              doctorFee: benefit.doctor_fee,\n              location: benefit.location_code,\n              insurer: {\n                nameChi: benefit.description_cn,\n                nameEn: benefit.description_en\n              }\n            };\n          });\n          return _context14.abrupt(\"return\", newDoctorProfile(_.assign(doctor, {\n            benefits: benefits\n          })));\n\n        case 7:\n        case \"end\":\n          return _context14.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var saveSettings = function saveSettings(_ref15) {\n  var token, clinicId, i18n, settings, _await$request2, data;\n\n  return _regeneratorRuntime.async(function saveSettings$(_context15) {\n    while (1) {\n      switch (_context15.prev = _context15.next) {\n        case 0:\n          token = _ref15.token, clinicId = _ref15.clinicId, i18n = _ref15.i18n, settings = _ref15.settings;\n          _context15.next = 3;\n          return _regeneratorRuntime.awrap(request({\n            url: 'settings/update',\n            data: {\n              clinic_id: Number(clinicId),\n              display_income_from_network: settings.displayIncome ? 1 : 0,\n              card_status: settings.method.physicalCard ? 1 : 0\n            },\n            token: token,\n            i18n: i18n\n          }));\n\n        case 3:\n          _await$request2 = _context15.sent;\n          data = _await$request2.data;\n\n        case 5:\n        case \"end\":\n          return _context15.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var changePassword = function changePassword(_ref16) {\n  var clinicId, oldPassword, newPassword, token, i18n, resp;\n  return _regeneratorRuntime.async(function changePassword$(_context16) {\n    while (1) {\n      switch (_context16.prev = _context16.next) {\n        case 0:\n          clinicId = _ref16.clinicId, oldPassword = _ref16.oldPassword, newPassword = _ref16.newPassword, token = _ref16.token, i18n = _ref16.i18n;\n          _context16.next = 3;\n          return _regeneratorRuntime.awrap(request({\n            url: 'changePassword',\n            data: {\n              clinic_id: clinicId,\n              oldPassword: oldPassword,\n              newPassword: newPassword\n            },\n            token: token,\n            i18n: i18n\n          }));\n\n        case 3:\n          resp = _context16.sent;\n          return _context16.abrupt(\"return\", resp.data);\n\n        case 5:\n        case \"end\":\n          return _context16.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var getDoctorInsurers = function getDoctorInsurers(_ref17) {\n  var token, doctorId, i18n, _await$request3, insurers;\n\n  return _regeneratorRuntime.async(function getDoctorInsurers$(_context17) {\n    while (1) {\n      switch (_context17.prev = _context17.next) {\n        case 0:\n          token = _ref17.token, doctorId = _ref17.doctorId, i18n = _ref17.i18n;\n          _context17.next = 3;\n          return _regeneratorRuntime.awrap(request({\n            url: 'insurers',\n            data: {\n              doctor_id: doctorId\n            },\n            token: token,\n            i18n: i18n\n          }));\n\n        case 3:\n          _await$request3 = _context17.sent;\n          insurers = _await$request3.insurers;\n          return _context17.abrupt(\"return\", _.map(insurers, 'insurer_id'));\n\n        case 6:\n        case \"end\":\n          return _context17.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};","map":{"version":3,"names":["newOption","request","requestPhp","_","newMethod","newRecord","moment","newPersonalProfile","newClinic","newDoctorProfile","Config","newInsurer","getDoctors","token","clinicId","benefitCode","url","data","clinic_id","benefit","resp","map","option","code","doctor_id","nameEn","name_en","nameChi","name_cn","getDoctorsByClinicInsurerBenefit","insurerId","insurer_id","benefit_code","getSettings","i18n","Number","method","physicalCard","card_status","displayIncome","display_income_from_network","getDiagnosis","payToken","search","insurer","icd","get","startsWith","diagnosis","id","diagnosis_id","getInsurers","insurers","name","support_medical_card","physicalCardImg","publicUrl","physical_card_image","physicalCardDesc","description_en","description_cn","shouldInputPayToken","should_input_pay_token","getInsurersByClinic","getRecords","startDate","endDate","format","undefined","sort","a","b","transactionTime","diff","getRecord","recordId","downloadReport","year","month","type","getPersonalProfile","email","cantactPerson","contact_person","phone","contact_phone","bankCode","bank_code","bankAccount","bank_account","formatHm","date","length","h","m","hourEndPosition","substring","slice","formatSchedule","workingHours","closed","forEach","obj","day_code","push","from","time_begin","to","time_end","getClinicProfile","clinicNameEn","clinic_name_en","clinicNameChi","clinic_name_cn","addressEn","address_en","addressChi","address_cn","districtNameEn","district_name_en","districtNameChi","district_name_cn","regionNameEn","region_name_en","regionNameChi","region_name_cn","clinic_phone_1","phone2","clinic_phone_2","fax","clinic_fax_1","schedules","service_hour","getAllDoctors","getDoctorList","gender","speciality","obj2","authorityEn","authority_name_en","authorityChi","authority_name_cn","status","active_status","getDoctorProfile","doctor","benefits","doctorCode","doctor_code","doctorFee","doctor_fee","location","location_code","assign","saveSettings","settings","changePassword","oldPassword","newPassword","getDoctorInsurers","doctorId"],"sources":["I:/Workspace/mediWS/mccWS/frontend-clinic-app/src/services/clinic.ts"],"sourcesContent":["import {newOption, Option} from \"../models/option\";\r\nimport { request, requestPhp } from \"../utils/request\"\r\nimport * as _ from 'lodash';\r\nimport { newMethod, Setting } from \"../models/setting\";\r\nimport { newRecord } from \"../models/record\";\r\nimport moment from 'moment';\r\nimport { newPersonalProfile } from \"../models/personalProfile\";\r\nimport { newClinic } from \"../models/clinic\";\r\nimport { Schedule, Period } from \"../models/schedule\";\r\nimport { DoctorProfile, newDoctorProfile } from \"../models/doctor\";\r\nimport { i18n } from \"i18next\";\r\nimport Config from '../utils/config';\r\nimport { Diagnosis } from \"../models/diagnosis\";\r\nimport { Insurer, newInsurer } from \"../models/insurer\";\r\nimport {PendingItem} from \"../models/pendingItem\";\r\n\r\ntype GetDoctors = {\r\n    token: string,\r\n    clinicId: string,\r\n    benefitCode: string\r\n}\r\n\r\ntype GetDoctorsByClinicInsurerBenefit = {\r\n    token: string,\r\n    clinicId: string,\r\n    insurerId: string,\r\n    benefitCode: string\r\n}\r\n\r\ntype GetSettings = {\r\n    token: string,\r\n    clinicId: string,\r\n    i18n: i18n\r\n}\r\n\r\ntype GetDiagnosis = {\r\n    insurer?: Insurer,\r\n    payToken?: string,\r\n    token: string,\r\n    search: string,\r\n    i18n: i18n\r\n}\r\n\r\ntype GetInsurers = {\r\n    token: string,\r\n    i18n: i18n\r\n}\r\n\r\ntype GetInsurersByClinic = {\r\n    token: string,\r\n    clinicId: string\r\n}\r\n\r\ntype GetRecords = {\r\n    token: string,\r\n    clinicId: string,\r\n    startDate?: Date,\r\n    endDate?: Date,\r\n    i18n: i18n\r\n}\r\n\r\ntype GetRecord = {\r\n    token: string,\r\n    clinicId: string,\r\n    recordId: number,\r\n    i18n: i18n\r\n}\r\n\r\ntype DownloadReport = {\r\n    token: string,\r\n    clinicId: string,\r\n    year: number,\r\n    month: number\r\n}\r\n\r\ntype GetProfile = {\r\n    token: string,\r\n    clinicId: string,\r\n}\r\n\r\ntype GetDoctorProfile = {\r\n    token: string,\r\n    clinicId: string,\r\n    doctor: DoctorProfile\r\n}\r\n\r\ntype SaveSettings = {\r\n    token: string,\r\n    clinicId: string,\r\n    settings: Setting,\r\n    i18n: i18n\r\n}\r\n\r\ntype ChangePassword ={\r\n    token: string,\r\n    clinicId: string,\r\n    oldPassword: string,\r\n    newPassword: string,\r\n    i18n: i18n\r\n\r\n}\r\n\r\ntype GetDoctorInsurers = {\r\n    token: string,\r\n    doctorId: string,\r\n    i18n: i18n\r\n}\r\n\r\nexport const getDoctors = async ({ token, clinicId, benefitCode }: GetDoctors): Promise<Option[]> => {\r\n    const resp = await requestPhp({\r\n        url: 'api/getDoctorsWithBenefitsInClinic.php',\r\n        data: {\r\n            token,\r\n            clinic_id: clinicId,\r\n            benefit: benefitCode\r\n        }\r\n    });\r\n\r\n    return _.map(resp.data, option => ({\r\n        code: option.doctor_id,\r\n        nameEn: option.name_en,\r\n        nameChi: option.name_cn\r\n    }));\r\n}\r\n\r\nexport const getDoctorsByClinicInsurerBenefit = async ({ token, clinicId, insurerId, benefitCode }: GetDoctorsByClinicInsurerBenefit): Promise<Option[]> => {\r\n    const resp = await requestPhp({\r\n        url: 'api/getDoctorsByClinicInsurerBenefit.php',\r\n        data: {\r\n            token,\r\n            clinic_id: clinicId,\r\n            insurer_id: insurerId,\r\n            benefit_code: benefitCode\r\n        }\r\n    });\r\n\r\n    return _.map(resp.data, option => ({\r\n        code: option.doctor_id,\r\n        nameEn: option.name_en,\r\n        nameChi: option.name_cn\r\n    }));\r\n}\r\n\r\nexport const getSettings = async ({ token, clinicId, i18n }: GetSettings) => {\r\n    const resp = await request({\r\n        url: 'settings',\r\n        data: {\r\n            clinic_id: Number(clinicId)\r\n        },\r\n        token,\r\n        i18n\r\n    });\r\n\r\n    return {\r\n        method: newMethod({\r\n            physicalCard: Number(resp.card_status) === 1 && Config.method.physicalCard\r\n        }),\r\n        displayIncome: Number(resp.display_income_from_network) === 1\r\n    };\r\n}\r\n\r\nexport const getDiagnosis = async ({ token, payToken, search, i18n, insurer }: GetDiagnosis): Promise<Diagnosis[]> => {\r\n    const icd = _.get(insurer, 'icd', _.startsWith(payToken, 'PCLL') ? 10 : 9);\r\n    const data = await request({\r\n        url: 'getDiagnosis',\r\n        data: {\r\n            icd,\r\n            search\r\n        },\r\n        token,\r\n        i18n\r\n    });\r\n\r\n    return _.map(data.diagnosis, diagnosis => ({\r\n        id: diagnosis.diagnosis_id,\r\n        code: diagnosis.code,\r\n        nameChi: diagnosis.name_cn,\r\n        nameEn: diagnosis.name_en\r\n    }));\r\n}\r\n\r\nexport const getInsurers = async ({ token, i18n }: GetInsurers): Promise<Insurer[]> => {\r\n    let { insurers } = await request({\r\n        url: 'insurers',\r\n        token,\r\n        i18n\r\n    });\r\n\r\n    return _.map(insurers, option => newInsurer({\r\n        code: option.insurer_id,\r\n        icd: option.icd,\r\n        name: option.name,\r\n        physicalCard: option.support_medical_card === 'T',\r\n        physicalCardImg: `${Config.publicUrl}admin-portal/${option.physical_card_image}`,\r\n        physicalCardDesc: {\r\n            nameChi: _.get(option, 'physical_card_description_cn', ''),\r\n            nameEn: _.get(option, 'physical_card_description_en', '')\r\n        },\r\n        nameEn: option.description_en,\r\n        nameChi: option.description_cn,\r\n        shouldInputPayToken:option.should_input_pay_token\r\n    }));\r\n}\r\n\r\nexport const getInsurersByClinic = async ({ token, clinicId }: GetInsurersByClinic): Promise<Insurer[]> => {\r\n    let { data } = await requestPhp({\r\n        url: 'api/getInsurersByClinic.php',\r\n        data: {\r\n            token,\r\n            //i18n, //requestPhp doesnt need i18n\r\n            clinic_id: clinicId\r\n        }\r\n    });\r\n\r\n\r\n    return _.map(data, option => newInsurer({\r\n        code: option.insurer_id,\r\n        icd: option.icd,\r\n        name: option.name,\r\n        physicalCard: option.support_medical_card === 'T',\r\n        physicalCardImg: `${Config.publicUrl}admin-portal/${option.physical_card_image}`,\r\n        physicalCardDesc: {\r\n            nameChi: _.get(option, 'physical_card_description_cn', ''),\r\n            nameEn: _.get(option, 'physical_card_description_en', '')\r\n        },\r\n        nameEn: option.description_en,\r\n        nameChi: option.description_cn,\r\n        shouldInputPayToken:option.should_input_pay_token\r\n    }));\r\n}\r\n\r\nexport const getRecords = async ({ token, clinicId, startDate, endDate, i18n }: GetRecords) => {\r\n    const resp = await request({\r\n        url: startDate ? 'records/getByDate' : 'records/getAll',\r\n        data: {\r\n            clinicId,\r\n            startDate: startDate ? moment(startDate).format('YYYY-MM-DD') : undefined,\r\n            endDate: startDate ? moment(endDate).format('YYYY-MM-DD') : undefined\r\n        },\r\n        token,\r\n        i18n\r\n    });\r\n\r\n    return _.map(resp.data, data => newRecord(data)).sort((a, b) => moment(a.transactionTime).diff(moment(b.transactionTime)));\r\n}\r\n\r\nexport const getRecord = async ({ token, clinicId, recordId, i18n }: GetRecord) => {\r\n    const resp = await request({\r\n        url: 'records/getById',\r\n        data: {\r\n            token,\r\n            clinicId,\r\n            recordId\r\n        },\r\n        token,\r\n        i18n\r\n    });\r\n\r\n    return newRecord(resp.data);\r\n}\r\n\r\nexport const downloadReport = async ({ token, clinicId, year, month }: DownloadReport) => {\r\n    const resp = await requestPhp({\r\n        url: 'api/getReport.php',\r\n        data: {\r\n            clinic_id: clinicId,\r\n            token,\r\n            type: 'email',\r\n            year,\r\n            month\r\n        }\r\n    });\r\n}\r\n\r\nexport const getPersonalProfile = async ({ token, clinicId }: GetProfile) => {\r\n    const { data } = await requestPhp({\r\n        url: 'api/getPersonalProfile.php',\r\n        data: {\r\n            clinic_id: clinicId,\r\n            token\r\n        }\r\n    });\r\n\r\n    return newPersonalProfile({\r\n        email: data.email,\r\n        cantactPerson: data.contact_person,\r\n        phone: data.contact_phone,\r\n        bankCode: data.bank_code,\r\n        bankAccount: data.bank_account\r\n    })\r\n}\r\n\r\nconst formatHm = (date: string): Period => {\r\n    if (date.length !== 3 && date.length !== 4) {\r\n        return { h: 0, m: 0 };\r\n    }\r\n    const hourEndPosition = date.length === 3 ? 1 : 2;\r\n    return {\r\n        h: Number(date.substring(0, hourEndPosition)),\r\n        m: Number(date.slice(hourEndPosition)),\r\n    }\r\n}\r\n\r\nconst formatSchedule = (data: any[]): Schedule[] => {\r\n    const resp: Schedule[] = [\r\n        {\r\n            workingHours: [],\r\n            closed: true\r\n        },\r\n        {\r\n            workingHours: [],\r\n            closed: true\r\n        },\r\n        {\r\n            workingHours: [],\r\n            closed: true\r\n        },\r\n        {\r\n            workingHours: [],\r\n            closed: true\r\n        },\r\n        {\r\n            workingHours: [],\r\n            closed: true\r\n        },\r\n        {\r\n            workingHours: [],\r\n            closed: true\r\n        },\r\n        {\r\n            workingHours: [],\r\n            closed: true\r\n        },\r\n        {\r\n            workingHours: [],\r\n            closed: true\r\n        }\r\n    ];\r\n\r\n    _.forEach(data, obj => {\r\n        resp[obj.day_code].workingHours.push({\r\n            from: formatHm(obj.time_begin),\r\n            to: formatHm(obj.time_end)\r\n        });\r\n    });\r\n\r\n    _.forEach(resp, obj => {\r\n        obj.closed = obj.workingHours.length ? false : true\r\n    });\r\n\r\n    return resp;\r\n}\r\n\r\nexport const getClinicProfile = async ({ token, clinicId }: GetProfile) => {\r\n    const { data } = await requestPhp({\r\n        url: 'api/getClinicProfile.php',\r\n        data: {\r\n            clinic_id: clinicId,\r\n            token\r\n        }\r\n    });\r\n\r\n    return newClinic({\r\n        clinicNameEn: data.clinic_name_en,\r\n        clinicNameChi: data.clinic_name_cn,\r\n        addressEn: data.address_en,\r\n        addressChi: data.address_cn,\r\n        districtNameEn: data.district_name_en,\r\n        districtNameChi: data.district_name_cn,\r\n        regionNameEn: data.region_name_en,\r\n        regionNameChi: data.region_name_cn,\r\n        phone: data.clinic_phone_1,\r\n        phone2: data.clinic_phone_2 || 'N/A',\r\n        fax: data.clinic_fax_1 || 'N/A',\r\n        schedules: formatSchedule(data.service_hour)\r\n    })\r\n}\r\n\r\nexport const getAllDoctors=async({token,clinicId}:GetProfile):Promise<Option[]>=>{\r\n    const { data } = await requestPhp({\r\n        url: 'api/getClinicDoctor.php',\r\n        data: {\r\n            clinic_id: clinicId,\r\n            token\r\n        }\r\n    });\r\n\r\n    return _.map(data,obj=>{\r\n        return newOption({\r\n            code:obj.doctor_id,\r\n            nameEn: obj.name_en,\r\n            nameChi: obj.name_cn,\r\n        })\r\n    });\r\n}\r\n\r\n\r\nexport const getDoctorList = async ({ token, clinicId }: GetProfile) => {\r\n    const { data } = await requestPhp({\r\n        url: 'api/getClinicDoctor.php',\r\n        data: {\r\n            clinic_id: clinicId,\r\n            token\r\n        }\r\n    });\r\n\r\n    return _.map(data, obj => newDoctorProfile({\r\n        id: obj.doctor_id,\r\n        nameEn: obj.name_en,\r\n        nameChi: obj.name_cn,\r\n        gender: obj.gender,\r\n        speciality: _.map(obj.speciality, obj2 => ({\r\n            code: obj2.benefit_code,\r\n            nameEn: obj2.name_en,\r\n            nameChi: obj2.name_cn\r\n        })),\r\n        authorityEn: obj.authority_name_en,\r\n        authorityChi: obj.authority_name_cn,\r\n        schedules: formatSchedule(obj.service_hour),\r\n        status: obj.active_status\r\n    }))\r\n}\r\n\r\nexport const getDoctorProfile = async ({ token, clinicId, doctor }: GetDoctorProfile): Promise<DoctorProfile> => {\r\n    const { data } = await requestPhp({\r\n        url: 'api/getDoctorDetail.php',\r\n        data: {\r\n            token,\r\n            doctor_id: doctor.id,\r\n            clinic_id: clinicId\r\n        }\r\n    });\r\n\r\n    const benefits = _.map(data.benefits, benefit => ({\r\n        benefitCode: benefit.benefit_code,\r\n        insurerId: benefit.insurer_id,\r\n        doctorCode: benefit.doctor_code,\r\n        doctorFee: benefit.doctor_fee,\r\n        location: benefit.location_code,\r\n        insurer: {\r\n            nameChi: benefit.description_cn,\r\n            nameEn: benefit.description_en\r\n        }\r\n    }));\r\n    return newDoctorProfile(_.assign(doctor, { benefits }));\r\n}\r\n\r\nexport const saveSettings = async ({ token, clinicId, i18n, settings }: SaveSettings) => {\r\n    const { data } = await request({\r\n        url: 'settings/update',\r\n        data: {\r\n            clinic_id: Number(clinicId),\r\n            display_income_from_network: settings.displayIncome ? 1 : 0,\r\n            card_status: settings.method.physicalCard ? 1 : 0\r\n        },\r\n        token,\r\n        i18n\r\n    });\r\n}\r\n\r\nexport const changePassword = async ({ clinicId, oldPassword, newPassword,token,i18n }: ChangePassword) => {\r\n    const resp= await request({\r\n        url: 'changePassword',\r\n        data: {\r\n            clinic_id : clinicId,\r\n            oldPassword: oldPassword,\r\n            newPassword: newPassword,\r\n        },\r\n        token,\r\n        i18n\r\n    });\r\n    return resp.data;\r\n}\r\n\r\n\r\n\r\nexport const getDoctorInsurers = async ({ token, doctorId, i18n }: GetDoctorInsurers): Promise<string[]> => {\r\n    let { insurers } = await request({\r\n        url: 'insurers',\r\n        data: {\r\n            doctor_id: doctorId\r\n        },\r\n        token,\r\n        i18n\r\n    });\r\n    return _.map(insurers, 'insurer_id');\r\n}\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}