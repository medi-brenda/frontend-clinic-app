{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"I:\\\\Workspace\\\\mediWS\\\\mccWS\\\\frontend-clinic-app\\\\node_modules\\\\react-native-gesture-handler\\\\DrawerLayout.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport invariant from 'invariant';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport { PanGestureHandler, TapGestureHandler, State } from \"./GestureHandler\";\nvar DRAG_TOSS = 0.05;\nvar IDLE = 'Idle';\nvar DRAGGING = 'Dragging';\nvar SETTLING = 'Settling';\n\nvar DrawerLayout = function (_Component) {\n  _inherits(DrawerLayout, _Component);\n\n  var _super = _createSuper(DrawerLayout);\n\n  function DrawerLayout(_props, context) {\n    var _this;\n\n    _classCallCheck(this, DrawerLayout);\n\n    _this = _super.call(this, _props, context);\n    _this._accessibilityIsModalView = React.createRef();\n    _this._pointerEventsView = React.createRef();\n    _this._panGestureHandler = React.createRef();\n    _this._drawerShown = false;\n\n    _this._updateAnimatedEvent = function (props, state) {\n      var drawerPosition = props.drawerPosition,\n          drawerWidth = props.drawerWidth,\n          drawerType = props.drawerType;\n      var dragXValue = state.dragX,\n          touchXValue = state.touchX,\n          drawerTranslation = state.drawerTranslation,\n          containerWidth = state.containerWidth;\n      var dragX = dragXValue;\n      var touchX = touchXValue;\n\n      if (drawerPosition !== 'left') {\n        dragX = Animated.multiply(new Animated.Value(-1), dragXValue);\n        touchX = Animated.add(new Animated.Value(containerWidth), Animated.multiply(new Animated.Value(-1), touchXValue));\n        touchXValue.setValue(containerWidth);\n      } else {\n        touchXValue.setValue(0);\n      }\n\n      var translationX = dragX;\n\n      if (drawerType === 'front') {\n        var startPositionX = Animated.add(touchX, Animated.multiply(new Animated.Value(-1), dragX));\n        var dragOffsetFromOnStartPosition = startPositionX.interpolate({\n          inputRange: [drawerWidth - 1, drawerWidth, drawerWidth + 1],\n          outputRange: [0, 0, 1]\n        });\n        translationX = Animated.add(dragX, dragOffsetFromOnStartPosition);\n      }\n\n      _this._openValue = Animated.add(translationX, drawerTranslation).interpolate({\n        inputRange: [0, drawerWidth],\n        outputRange: [0, 1],\n        extrapolate: 'clamp'\n      });\n      _this._onGestureEvent = Animated.event([{\n        nativeEvent: {\n          translationX: dragXValue,\n          x: touchXValue\n        }\n      }], {\n        useNativeDriver: props.useNativeAnimations\n      });\n    };\n\n    _this._handleContainerLayout = function (_ref) {\n      var nativeEvent = _ref.nativeEvent;\n\n      _this.setState({\n        containerWidth: nativeEvent.layout.width\n      });\n    };\n\n    _this._emitStateChanged = function (newState, drawerWillShow) {\n      _this.props.onDrawerStateChanged && _this.props.onDrawerStateChanged(newState, drawerWillShow);\n    };\n\n    _this._openingHandlerStateChange = function (_ref2) {\n      var nativeEvent = _ref2.nativeEvent;\n\n      if (nativeEvent.oldState === State.ACTIVE) {\n        _this._handleRelease(nativeEvent);\n      } else if (nativeEvent.state === State.ACTIVE) {\n        _this._emitStateChanged(DRAGGING, false);\n\n        if (_this.props.keyboardDismissMode === 'on-drag') {\n          Keyboard.dismiss();\n        }\n\n        if (_this.props.hideStatusBar) {\n          StatusBar.setHidden(true, _this.props.statusBarAnimation || 'slide');\n        }\n      }\n    };\n\n    _this._onTapHandlerStateChange = function (_ref3) {\n      var nativeEvent = _ref3.nativeEvent;\n\n      if (_this._drawerShown && nativeEvent.oldState === State.ACTIVE && _this.props.drawerLockMode !== 'locked-open') {\n        _this.closeDrawer();\n      }\n    };\n\n    _this._handleRelease = function (nativeEvent) {\n      var _this$props = _this.props,\n          drawerWidth = _this$props.drawerWidth,\n          drawerPosition = _this$props.drawerPosition,\n          drawerType = _this$props.drawerType;\n      var containerWidth = _this.state.containerWidth;\n      var dragX = nativeEvent.translationX,\n          velocityX = nativeEvent.velocityX,\n          touchX = nativeEvent.x;\n\n      if (drawerPosition !== 'left') {\n        dragX = -dragX;\n        touchX = containerWidth - touchX;\n        velocityX = -velocityX;\n      }\n\n      var gestureStartX = touchX - dragX;\n      var dragOffsetBasedOnStart = 0;\n\n      if (drawerType === 'front') {\n        dragOffsetBasedOnStart = gestureStartX > drawerWidth ? gestureStartX - drawerWidth : 0;\n      }\n\n      var startOffsetX = dragX + dragOffsetBasedOnStart + (_this._drawerShown ? drawerWidth : 0);\n      var projOffsetX = startOffsetX + DRAG_TOSS * velocityX;\n      var shouldOpen = projOffsetX > drawerWidth / 2;\n\n      if (shouldOpen) {\n        _this._animateDrawer(startOffsetX, drawerWidth, velocityX);\n      } else {\n        _this._animateDrawer(startOffsetX, 0, velocityX);\n      }\n    };\n\n    _this._updateShowing = function (showing) {\n      _this._drawerShown = showing;\n      _this._accessibilityIsModalView.current && _this._accessibilityIsModalView.current.setNativeProps({\n        accessibilityViewIsModal: showing\n      });\n      _this._pointerEventsView.current && _this._pointerEventsView.current.setNativeProps({\n        pointerEvents: showing ? 'auto' : 'none'\n      });\n      var _this$props2 = _this.props,\n          drawerPosition = _this$props2.drawerPosition,\n          minSwipeDistance = _this$props2.minSwipeDistance,\n          edgeWidth = _this$props2.edgeWidth;\n      var fromLeft = drawerPosition === 'left';\n      var gestureOrientation = (fromLeft ? 1 : -1) * (_this._drawerShown ? -1 : 1);\n      var hitSlop = fromLeft ? {\n        left: 0,\n        width: showing ? undefined : edgeWidth\n      } : {\n        right: 0,\n        width: showing ? undefined : edgeWidth\n      };\n      _this._panGestureHandler.current && _this._panGestureHandler.current.setNativeProps({\n        hitSlop: hitSlop,\n        activeOffsetX: gestureOrientation * minSwipeDistance\n      });\n    };\n\n    _this._animateDrawer = function (fromValue, toValue, velocity) {\n      _this.state.dragX.setValue(0);\n\n      _this.state.touchX.setValue(_this.props.drawerPosition === 'left' ? 0 : _this.state.containerWidth);\n\n      if (fromValue != null) {\n        var nextFramePosition = fromValue;\n\n        if (_this.props.useNativeAnimations) {\n          if (fromValue < toValue && velocity > 0) {\n            nextFramePosition = Math.min(fromValue + velocity / 60.0, toValue);\n          } else if (fromValue > toValue && velocity < 0) {\n            nextFramePosition = Math.max(fromValue + velocity / 60.0, toValue);\n          }\n        }\n\n        _this.state.drawerTranslation.setValue(nextFramePosition);\n      }\n\n      var willShow = toValue !== 0;\n\n      _this._updateShowing(willShow);\n\n      _this._emitStateChanged(SETTLING, willShow);\n\n      if (_this.props.hideStatusBar) {\n        StatusBar.setHidden(willShow, _this.props.statusBarAnimation || 'slide');\n      }\n\n      Animated.spring(_this.state.drawerTranslation, {\n        velocity: velocity,\n        bounciness: 0,\n        toValue: toValue,\n        useNativeDriver: _this.props.useNativeAnimations\n      }).start(function (_ref4) {\n        var finished = _ref4.finished;\n\n        if (finished) {\n          _this._emitStateChanged(IDLE, willShow);\n\n          if (willShow) {\n            _this.props.onDrawerOpen && _this.props.onDrawerOpen();\n          } else {\n            _this.props.onDrawerClose && _this.props.onDrawerClose();\n          }\n        }\n      });\n    };\n\n    _this.openDrawer = function () {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      _this._animateDrawer(undefined, _this.props.drawerWidth, options.velocity ? options.velocity : 0);\n\n      _this.forceUpdate();\n    };\n\n    _this.closeDrawer = function () {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      _this._animateDrawer(undefined, 0, options.velocity ? options.velocity : 0);\n\n      _this.forceUpdate();\n    };\n\n    _this._renderOverlay = function () {\n      invariant(_this._openValue, 'should be set');\n\n      var overlayOpacity = _this._openValue.interpolate({\n        inputRange: [0, 1],\n        outputRange: [0, 1],\n        extrapolate: 'clamp'\n      });\n\n      var dynamicOverlayStyles = {\n        opacity: overlayOpacity,\n        backgroundColor: _this.props.overlayColor\n      };\n      return React.createElement(TapGestureHandler, {\n        onHandlerStateChange: _this._onTapHandlerStateChange,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 7\n        }\n      }, React.createElement(Animated.View, {\n        pointerEvents: _this._drawerShown ? 'auto' : 'none',\n        ref: _this._pointerEventsView,\n        style: [styles.overlay, dynamicOverlayStyles],\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 9\n        }\n      }));\n    };\n\n    _this._renderDrawer = function () {\n      var _this$props3 = _this.props,\n          drawerBackgroundColor = _this$props3.drawerBackgroundColor,\n          drawerWidth = _this$props3.drawerWidth,\n          drawerPosition = _this$props3.drawerPosition,\n          drawerType = _this$props3.drawerType,\n          drawerContainerStyle = _this$props3.drawerContainerStyle,\n          contentContainerStyle = _this$props3.contentContainerStyle;\n      var fromLeft = drawerPosition === 'left';\n      var drawerSlide = drawerType !== 'back';\n      var containerSlide = drawerType !== 'front';\n      var reverseContentDirection = I18nManager.isRTL ? fromLeft : !fromLeft;\n      var dynamicDrawerStyles = {\n        backgroundColor: drawerBackgroundColor,\n        width: drawerWidth\n      };\n      var openValue = _this._openValue;\n      invariant(openValue, 'should be set');\n      var containerStyles;\n\n      if (containerSlide) {\n        var containerTranslateX = openValue.interpolate({\n          inputRange: [0, 1],\n          outputRange: fromLeft ? [0, drawerWidth] : [0, -drawerWidth],\n          extrapolate: 'clamp'\n        });\n        containerStyles = {\n          transform: [{\n            translateX: containerTranslateX\n          }]\n        };\n      }\n\n      var drawerTranslateX = 0;\n\n      if (drawerSlide) {\n        var closedDrawerOffset = fromLeft ? -drawerWidth : drawerWidth;\n        drawerTranslateX = openValue.interpolate({\n          inputRange: [0, 1],\n          outputRange: [closedDrawerOffset, 0],\n          extrapolate: 'clamp'\n        });\n      }\n\n      var drawerStyles = {\n        transform: [{\n          translateX: drawerTranslateX\n        }],\n        flexDirection: reverseContentDirection ? 'row-reverse' : 'row'\n      };\n      return React.createElement(Animated.View, {\n        style: styles.main,\n        onLayout: _this._handleContainerLayout,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 445,\n          columnNumber: 7\n        }\n      }, React.createElement(Animated.View, {\n        style: [drawerType === 'front' ? styles.containerOnBack : styles.containerInFront, containerStyles, contentContainerStyle],\n        importantForAccessibility: _this._drawerShown ? 'no-hide-descendants' : 'yes',\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 446,\n          columnNumber: 9\n        }\n      }, typeof _this.props.children === 'function' ? _this.props.children(_this._openValue) : _this.props.children, _this._renderOverlay()), React.createElement(Animated.View, {\n        pointerEvents: \"box-none\",\n        ref: _this._accessibilityIsModalView,\n        accessibilityViewIsModal: _this._drawerShown,\n        style: [styles.drawerContainer, drawerStyles, drawerContainerStyle],\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 462,\n          columnNumber: 9\n        }\n      }, React.createElement(View, {\n        style: dynamicDrawerStyles,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 467,\n          columnNumber: 11\n        }\n      }, _this.props.renderNavigationView(_this._openValue))));\n    };\n\n    _this._setPanGestureRef = function (ref) {\n      _this._panGestureHandler.current = ref;\n      _this.props.onGestureRef && _this.props.onGestureRef(ref);\n    };\n\n    var _dragX = new Animated.Value(0);\n\n    var _touchX = new Animated.Value(0);\n\n    var _drawerTranslation = new Animated.Value(0);\n\n    _this.state = {\n      dragX: _dragX,\n      touchX: _touchX,\n      drawerTranslation: _drawerTranslation,\n      containerWidth: 0\n    };\n\n    _this._updateAnimatedEvent(_props, _this.state);\n\n    return _this;\n  }\n\n  _createClass(DrawerLayout, [{\n    key: \"UNSAFE_componentWillUpdate\",\n    value: function UNSAFE_componentWillUpdate(props, state) {\n      if (this.props.drawerPosition !== props.drawerPosition || this.props.drawerWidth !== props.drawerWidth || this.props.drawerType !== props.drawerType || this.state.containerWidth !== state.containerWidth) {\n        this._updateAnimatedEvent(props, state);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props4 = this.props,\n          drawerPosition = _this$props4.drawerPosition,\n          drawerLockMode = _this$props4.drawerLockMode,\n          edgeWidth = _this$props4.edgeWidth,\n          minSwipeDistance = _this$props4.minSwipeDistance;\n      var fromLeft = drawerPosition === 'left';\n      var gestureOrientation = (fromLeft ? 1 : -1) * (this._drawerShown ? -1 : 1);\n      var hitSlop = fromLeft ? {\n        left: 0,\n        width: this._drawerShown ? undefined : edgeWidth\n      } : {\n        right: 0,\n        width: this._drawerShown ? undefined : edgeWidth\n      };\n      return React.createElement(PanGestureHandler, {\n        ref: this._setPanGestureRef,\n        hitSlop: hitSlop,\n        activeOffsetX: gestureOrientation * minSwipeDistance,\n        failOffsetY: [-15, 15],\n        onGestureEvent: this._onGestureEvent,\n        onHandlerStateChange: this._openingHandlerStateChange,\n        enabled: drawerLockMode !== 'locked-closed' && drawerLockMode !== 'locked-open',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 504,\n          columnNumber: 7\n        }\n      }, this._renderDrawer());\n    }\n  }]);\n\n  return DrawerLayout;\n}(Component);\n\nDrawerLayout.defaultProps = {\n  drawerWidth: 200,\n  drawerPosition: 'left',\n  useNativeAnimations: true,\n  drawerType: 'front',\n  edgeWidth: 20,\n  minSwipeDistance: 3,\n  overlayColor: 'rgba(0, 0, 0, 0.7)',\n  drawerLockMode: 'unlocked'\n};\nDrawerLayout.positions = {\n  Left: 'left',\n  Right: 'right'\n};\nexport { DrawerLayout as default };\nvar styles = StyleSheet.create({\n  drawerContainer: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    zIndex: 1001,\n    flexDirection: 'row'\n  }),\n  containerInFront: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    zIndex: 1002\n  }),\n  containerOnBack: _objectSpread({}, StyleSheet.absoluteFillObject),\n  main: {\n    flex: 1,\n    zIndex: 0,\n    overflow: 'hidden'\n  },\n  overlay: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    zIndex: 1000\n  })\n});","map":{"version":3,"names":["React","Component","invariant","PanGestureHandler","TapGestureHandler","State","DRAG_TOSS","IDLE","DRAGGING","SETTLING","DrawerLayout","props","context","_accessibilityIsModalView","createRef","_pointerEventsView","_panGestureHandler","_drawerShown","_updateAnimatedEvent","state","drawerPosition","drawerWidth","drawerType","dragXValue","dragX","touchXValue","touchX","drawerTranslation","containerWidth","Animated","multiply","Value","add","setValue","translationX","startPositionX","dragOffsetFromOnStartPosition","interpolate","inputRange","outputRange","_openValue","extrapolate","_onGestureEvent","event","nativeEvent","x","useNativeDriver","useNativeAnimations","_handleContainerLayout","setState","layout","width","_emitStateChanged","newState","drawerWillShow","onDrawerStateChanged","_openingHandlerStateChange","oldState","ACTIVE","_handleRelease","keyboardDismissMode","Keyboard","dismiss","hideStatusBar","StatusBar","setHidden","statusBarAnimation","_onTapHandlerStateChange","drawerLockMode","closeDrawer","velocityX","gestureStartX","dragOffsetBasedOnStart","startOffsetX","projOffsetX","shouldOpen","_animateDrawer","_updateShowing","showing","current","setNativeProps","accessibilityViewIsModal","pointerEvents","minSwipeDistance","edgeWidth","fromLeft","gestureOrientation","hitSlop","left","undefined","right","activeOffsetX","fromValue","toValue","velocity","nextFramePosition","Math","min","max","willShow","spring","bounciness","start","finished","onDrawerOpen","onDrawerClose","openDrawer","options","forceUpdate","_renderOverlay","overlayOpacity","dynamicOverlayStyles","opacity","backgroundColor","overlayColor","styles","overlay","_renderDrawer","drawerBackgroundColor","drawerContainerStyle","contentContainerStyle","drawerSlide","containerSlide","reverseContentDirection","I18nManager","isRTL","dynamicDrawerStyles","openValue","containerStyles","containerTranslateX","transform","translateX","drawerTranslateX","closedDrawerOffset","drawerStyles","flexDirection","main","containerOnBack","containerInFront","children","drawerContainer","renderNavigationView","_setPanGestureRef","ref","onGestureRef","defaultProps","positions","Left","Right","StyleSheet","create","absoluteFillObject","zIndex","flex","overflow"],"sources":["I:/Workspace/mediWS/mccWS/frontend-clinic-app/node_modules/react-native-gesture-handler/DrawerLayout.js"],"sourcesContent":["// @flow\n\n// This component is based on RN's DrawerLayoutAndroid API\n//\n// It perhaps deserves to be put in a separate repo, but since it relies\n// on react-native-gesture-handler library which isn't very popular at the\n// moment I decided to keep it here for the time being. It will allow us\n// to move faster and fix issues that may arise in gesture handler library\n// that could be found when using the drawer component\n\nimport React, { Component } from 'react';\nimport invariant from 'invariant';\nimport {\n  Animated,\n  StyleSheet,\n  View,\n  Keyboard,\n  StatusBar,\n  I18nManager,\n} from 'react-native';\n\nimport { PanGestureHandler, TapGestureHandler, State } from './GestureHandler';\n\nconst DRAG_TOSS = 0.05;\n\nconst IDLE = 'Idle';\nconst DRAGGING = 'Dragging';\nconst SETTLING = 'Settling';\n\nexport type PropType = {\n  children: any,\n  drawerBackgroundColor?: string,\n  drawerPosition: 'left' | 'right',\n  drawerLockMode?: 'unlocked' | 'locked-closed' | 'locked-open',\n  drawerWidth: number,\n  keyboardDismissMode?: 'none' | 'on-drag',\n  onDrawerClose?: Function,\n  onDrawerOpen?: Function,\n  onDrawerStateChanged?: Function,\n  renderNavigationView: (progressAnimatedValue: any) => any,\n  useNativeAnimations: boolean,\n\n  // brand new properties\n  drawerType: 'front' | 'back' | 'slide',\n  edgeWidth: number,\n  minSwipeDistance: number,\n  hideStatusBar?: boolean,\n  statusBarAnimation?: 'slide' | 'none' | 'fade',\n  overlayColor: string,\n  drawerContainerStyle?: any,\n  contentContainerStyle?: any,\n  onGestureRef?: Function,\n\n  // Properties not yet supported\n  // onDrawerSlide?: Function\n};\n\nexport type StateType = {\n  dragX: any,\n  touchX: any,\n  drawerTranslation: any,\n  containerWidth: number,\n};\n\nexport type EventType = {\n  stopPropagation: Function,\n};\n\nexport type DrawerMovementOptionType = {\n  velocity?: number,\n};\n\nexport default class DrawerLayout extends Component<PropType, StateType> {\n  static defaultProps = {\n    drawerWidth: 200,\n    drawerPosition: 'left',\n    useNativeAnimations: true,\n    drawerType: 'front',\n    edgeWidth: 20,\n    minSwipeDistance: 3,\n    overlayColor: 'rgba(0, 0, 0, 0.7)',\n    drawerLockMode: 'unlocked',\n  };\n\n  static positions = {\n    Left: 'left',\n    Right: 'right',\n  };\n  _openValue: ?Animated.Interpolation;\n  _onGestureEvent: ?Animated.Event;\n  _accessibilityIsModalView = React.createRef();\n  _pointerEventsView = React.createRef();\n  _panGestureHandler = React.createRef();\n  _drawerShown = false;\n\n  constructor(props: PropType, context: any) {\n    super(props, context);\n\n    const dragX = new Animated.Value(0);\n    const touchX = new Animated.Value(0);\n    const drawerTranslation = new Animated.Value(0);\n\n    this.state = {\n      dragX,\n      touchX,\n      drawerTranslation,\n      containerWidth: 0,\n    };\n\n    this._updateAnimatedEvent(props, this.state);\n  }\n\n  UNSAFE_componentWillUpdate(props: PropType, state: StateType) {\n    if (\n      this.props.drawerPosition !== props.drawerPosition ||\n      this.props.drawerWidth !== props.drawerWidth ||\n      this.props.drawerType !== props.drawerType ||\n      this.state.containerWidth !== state.containerWidth\n    ) {\n      this._updateAnimatedEvent(props, state);\n    }\n  }\n\n  _updateAnimatedEvent = (props: PropType, state: StateType) => {\n    // Event definition is based on\n    const { drawerPosition, drawerWidth, drawerType } = props;\n    const {\n      dragX: dragXValue,\n      touchX: touchXValue,\n      drawerTranslation,\n      containerWidth,\n    } = state;\n\n    let dragX = dragXValue;\n    let touchX = touchXValue;\n\n    if (drawerPosition !== 'left') {\n      // Most of the code is written in a way to handle left-side drawer.\n      // In order to handle right-side drawer the only thing we need to\n      // do is to reverse events coming from gesture handler in a way they\n      // emulate left-side drawer gestures. E.g. dragX is simply -dragX, and\n      // touchX is calulcated by subtracing real touchX from the width of the\n      // container (such that when touch happens at the right edge the value\n      // is simply 0)\n      dragX = Animated.multiply(new Animated.Value(-1), dragXValue);\n      touchX = Animated.add(\n        new Animated.Value(containerWidth),\n        Animated.multiply(new Animated.Value(-1), touchXValue)\n      );\n      touchXValue.setValue(containerWidth);\n    } else {\n      touchXValue.setValue(0);\n    }\n\n    // While closing the drawer when user starts gesture outside of its area (in greyed\n    // out part of the window), we want the drawer to follow only once finger reaches the\n    // edge of the drawer.\n    // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n    // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n    // an arrow pointing left\n    // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    +---------------+    +---------------+    +---------------+    +---------------+\n    //\n    // For the above to work properly we define animated value that will keep start position\n    // of the gesture. Then we use that value to calculate how much we need to subtract from\n    // the dragX. If the gesture started on the greyed out area we take the distance from the\n    // edge of the drawer to the start position. Otherwise we don't subtract at all and the\n    // drawer be pulled back as soon as you start the pan.\n    //\n    // This is used only when drawerType is \"front\"\n    //\n    let translationX = dragX;\n    if (drawerType === 'front') {\n      const startPositionX = Animated.add(\n        touchX,\n        Animated.multiply(new Animated.Value(-1), dragX)\n      );\n\n      const dragOffsetFromOnStartPosition = startPositionX.interpolate({\n        inputRange: [drawerWidth - 1, drawerWidth, drawerWidth + 1],\n        outputRange: [0, 0, 1],\n      });\n      translationX = Animated.add(dragX, dragOffsetFromOnStartPosition);\n    }\n\n    this._openValue = Animated.add(translationX, drawerTranslation).interpolate(\n      {\n        inputRange: [0, drawerWidth],\n        outputRange: [0, 1],\n        extrapolate: 'clamp',\n      }\n    );\n\n    this._onGestureEvent = Animated.event(\n      [{ nativeEvent: { translationX: dragXValue, x: touchXValue } }],\n      { useNativeDriver: props.useNativeAnimations }\n    );\n  };\n\n  _handleContainerLayout = ({ nativeEvent }) => {\n    this.setState({ containerWidth: nativeEvent.layout.width });\n  };\n\n  _emitStateChanged = (newState: string, drawerWillShow: boolean) => {\n    this.props.onDrawerStateChanged &&\n      this.props.onDrawerStateChanged(newState, drawerWillShow);\n  };\n\n  _openingHandlerStateChange = ({ nativeEvent }) => {\n    if (nativeEvent.oldState === State.ACTIVE) {\n      this._handleRelease(nativeEvent);\n    } else if (nativeEvent.state === State.ACTIVE) {\n      this._emitStateChanged(DRAGGING, false);\n      if (this.props.keyboardDismissMode === 'on-drag') {\n        Keyboard.dismiss();\n      }\n      if (this.props.hideStatusBar) {\n        StatusBar.setHidden(true, this.props.statusBarAnimation || 'slide');\n      }\n    }\n  };\n\n  _onTapHandlerStateChange = ({ nativeEvent }) => {\n    if (\n      this._drawerShown &&\n      nativeEvent.oldState === State.ACTIVE &&\n      this.props.drawerLockMode !== 'locked-open'\n    ) {\n      this.closeDrawer();\n    }\n  };\n\n  _handleRelease = nativeEvent => {\n    const { drawerWidth, drawerPosition, drawerType } = this.props;\n    const { containerWidth } = this.state;\n    let { translationX: dragX, velocityX, x: touchX } = nativeEvent;\n\n    if (drawerPosition !== 'left') {\n      // See description in _updateAnimatedEvent about why events are flipped\n      // for right-side drawer\n      dragX = -dragX;\n      touchX = containerWidth - touchX;\n      velocityX = -velocityX;\n    }\n\n    const gestureStartX = touchX - dragX;\n    let dragOffsetBasedOnStart = 0;\n\n    if (drawerType === 'front') {\n      dragOffsetBasedOnStart =\n        gestureStartX > drawerWidth ? gestureStartX - drawerWidth : 0;\n    }\n\n    const startOffsetX =\n      dragX + dragOffsetBasedOnStart + (this._drawerShown ? drawerWidth : 0);\n    const projOffsetX = startOffsetX + DRAG_TOSS * velocityX;\n\n    const shouldOpen = projOffsetX > drawerWidth / 2;\n\n    if (shouldOpen) {\n      this._animateDrawer(startOffsetX, drawerWidth, velocityX);\n    } else {\n      this._animateDrawer(startOffsetX, 0, velocityX);\n    }\n  };\n\n  _updateShowing = (showing: boolean) => {\n    this._drawerShown = showing;\n    this._accessibilityIsModalView.current &&\n      this._accessibilityIsModalView.current.setNativeProps({\n        accessibilityViewIsModal: showing,\n      });\n    this._pointerEventsView.current &&\n      this._pointerEventsView.current.setNativeProps({\n        pointerEvents: showing ? 'auto' : 'none',\n      });\n    const { drawerPosition, minSwipeDistance, edgeWidth } = this.props;\n    const fromLeft = drawerPosition === 'left';\n    // gestureOrientation is 1 if the expected gesture is from left to right and -1 otherwise\n    // e.g. when drawer is on the left and is closed we expect left to right gesture, thus\n    // orientation will be 1.\n    const gestureOrientation =\n      (fromLeft ? 1 : -1) * (this._drawerShown ? -1 : 1);\n    // When drawer is closed we want the hitSlop to be horizontally shorter\n    // than the container size by the value of SLOP. This will make it only\n    // activate when gesture happens not further than SLOP away from the edge\n    const hitSlop = fromLeft\n      ? { left: 0, width: showing ? undefined : edgeWidth }\n      : { right: 0, width: showing ? undefined : edgeWidth };\n    this._panGestureHandler.current &&\n      this._panGestureHandler.current.setNativeProps({\n        hitSlop,\n        activeOffsetX: gestureOrientation * minSwipeDistance,\n      });\n  };\n\n  _animateDrawer = (fromValue: ?number, toValue: number, velocity: number) => {\n    this.state.dragX.setValue(0);\n    this.state.touchX.setValue(\n      this.props.drawerPosition === 'left' ? 0 : this.state.containerWidth\n    );\n\n    if (fromValue != null) {\n      let nextFramePosition = fromValue;\n      if (this.props.useNativeAnimations) {\n        // When using native driver, we predict the next position of the animation\n        // because it takes one frame of a roundtrip to pass RELEASE event from\n        // native driver to JS before we can start animating. Without it, it is more\n        // noticable that the frame is dropped.\n        if (fromValue < toValue && velocity > 0) {\n          nextFramePosition = Math.min(fromValue + velocity / 60.0, toValue);\n        } else if (fromValue > toValue && velocity < 0) {\n          nextFramePosition = Math.max(fromValue + velocity / 60.0, toValue);\n        }\n      }\n      this.state.drawerTranslation.setValue(nextFramePosition);\n    }\n\n    const willShow = toValue !== 0;\n    this._updateShowing(willShow);\n    this._emitStateChanged(SETTLING, willShow);\n    if (this.props.hideStatusBar) {\n      StatusBar.setHidden(willShow, this.props.statusBarAnimation || 'slide');\n    }\n    Animated.spring(this.state.drawerTranslation, {\n      velocity,\n      bounciness: 0,\n      toValue,\n      useNativeDriver: this.props.useNativeAnimations,\n    }).start(({ finished }) => {\n      if (finished) {\n        this._emitStateChanged(IDLE, willShow);\n        if (willShow) {\n          this.props.onDrawerOpen && this.props.onDrawerOpen();\n        } else {\n          this.props.onDrawerClose && this.props.onDrawerClose();\n        }\n      }\n    });\n  };\n\n  openDrawer = (options: DrawerMovementOptionType = {}) => {\n    this._animateDrawer(\n      undefined,\n      this.props.drawerWidth,\n      options.velocity ? options.velocity : 0\n    );\n\n    // We need to force the update, otherwise the overlay is not rerendered and it would not be clickable\n    this.forceUpdate();\n  };\n\n  closeDrawer = (options: DrawerMovementOptionType = {}) => {\n    this._animateDrawer(undefined, 0, options.velocity ? options.velocity : 0);\n\n    // We need to force the update, otherwise the overlay is not rerendered and it would be still clickable\n    this.forceUpdate();\n  };\n\n  _renderOverlay = () => {\n    /* Overlay styles */\n    invariant(this._openValue, 'should be set');\n    const overlayOpacity = this._openValue.interpolate({\n      inputRange: [0, 1],\n      outputRange: [0, 1],\n      extrapolate: 'clamp',\n    });\n    const dynamicOverlayStyles = {\n      opacity: overlayOpacity,\n      backgroundColor: this.props.overlayColor,\n    };\n\n    return (\n      <TapGestureHandler onHandlerStateChange={this._onTapHandlerStateChange}>\n        <Animated.View\n          pointerEvents={this._drawerShown ? 'auto' : 'none'}\n          ref={this._pointerEventsView}\n          style={[styles.overlay, dynamicOverlayStyles]}\n        />\n      </TapGestureHandler>\n    );\n  };\n\n  _renderDrawer = () => {\n    const {\n      drawerBackgroundColor,\n      drawerWidth,\n      drawerPosition,\n      drawerType,\n      drawerContainerStyle,\n      contentContainerStyle,\n    } = this.props;\n\n    const fromLeft = drawerPosition === 'left';\n    const drawerSlide = drawerType !== 'back';\n    const containerSlide = drawerType !== 'front';\n\n    // we rely on row and row-reverse flex directions to position the drawer\n    // properly. Apparently for RTL these are flipped which requires us to use\n    // the opposite setting for the drawer to appear from left or right according\n    // to the drawerPosition prop\n    const reverseContentDirection = I18nManager.isRTL ? fromLeft : !fromLeft;\n\n    const dynamicDrawerStyles = {\n      backgroundColor: drawerBackgroundColor,\n      width: drawerWidth,\n    };\n    const openValue = this._openValue;\n    invariant(openValue, 'should be set');\n\n    let containerStyles;\n    if (containerSlide) {\n      const containerTranslateX = openValue.interpolate({\n        inputRange: [0, 1],\n        outputRange: fromLeft ? [0, drawerWidth] : [0, -drawerWidth],\n        extrapolate: 'clamp',\n      });\n      containerStyles = {\n        transform: [{ translateX: containerTranslateX }],\n      };\n    }\n\n    let drawerTranslateX = 0;\n    if (drawerSlide) {\n      const closedDrawerOffset = fromLeft ? -drawerWidth : drawerWidth;\n      drawerTranslateX = openValue.interpolate({\n        inputRange: [0, 1],\n        outputRange: [closedDrawerOffset, 0],\n        extrapolate: 'clamp',\n      });\n    }\n    const drawerStyles = {\n      transform: [{ translateX: drawerTranslateX }],\n      flexDirection: reverseContentDirection ? 'row-reverse' : 'row',\n    };\n\n    return (\n      <Animated.View style={styles.main} onLayout={this._handleContainerLayout}>\n        <Animated.View\n          style={[\n            drawerType === 'front'\n              ? styles.containerOnBack\n              : styles.containerInFront,\n            containerStyles,\n            contentContainerStyle,\n          ]}\n          importantForAccessibility={\n            this._drawerShown ? 'no-hide-descendants' : 'yes'\n          }>\n          {typeof this.props.children === 'function'\n            ? this.props.children(this._openValue)\n            : this.props.children}\n          {this._renderOverlay()}\n        </Animated.View>\n        <Animated.View\n          pointerEvents=\"box-none\"\n          ref={this._accessibilityIsModalView}\n          accessibilityViewIsModal={this._drawerShown}\n          style={[styles.drawerContainer, drawerStyles, drawerContainerStyle]}>\n          <View style={dynamicDrawerStyles}>\n            {this.props.renderNavigationView(this._openValue)}\n          </View>\n        </Animated.View>\n      </Animated.View>\n    );\n  };\n\n  _setPanGestureRef = ref => {\n    this._panGestureHandler.current = ref;\n    this.props.onGestureRef && this.props.onGestureRef(ref);\n  };\n\n  render() {\n    const {\n      drawerPosition,\n      drawerLockMode,\n      edgeWidth,\n      minSwipeDistance,\n    } = this.props;\n\n    const fromLeft = drawerPosition === 'left';\n\n    // gestureOrientation is 1 if the expected gesture is from left to right and -1 otherwise\n    // e.g. when drawer is on the left and is closed we expect left to right gesture, thus\n    // orientation will be 1.\n    const gestureOrientation =\n      (fromLeft ? 1 : -1) * (this._drawerShown ? -1 : 1);\n\n    // When drawer is closed we want the hitSlop to be horizontally shorter\n    // than the container size by the value of SLOP. This will make it only\n    // activate when gesture happens not further than SLOP away from the edge\n    const hitSlop = fromLeft\n      ? { left: 0, width: this._drawerShown ? undefined : edgeWidth }\n      : { right: 0, width: this._drawerShown ? undefined : edgeWidth };\n\n    return (\n      <PanGestureHandler\n        ref={this._setPanGestureRef}\n        hitSlop={hitSlop}\n        activeOffsetX={gestureOrientation * minSwipeDistance}\n        failOffsetY={[-15, 15]}\n        onGestureEvent={this._onGestureEvent}\n        onHandlerStateChange={this._openingHandlerStateChange}\n        enabled={\n          drawerLockMode !== 'locked-closed' && drawerLockMode !== 'locked-open'\n        }>\n        {this._renderDrawer()}\n      </PanGestureHandler>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  drawerContainer: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: 1001,\n    flexDirection: 'row',\n  },\n  containerInFront: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: 1002,\n  },\n  containerOnBack: {\n    ...StyleSheet.absoluteFillObject,\n  },\n  main: {\n    flex: 1,\n    zIndex: 0,\n    overflow: 'hidden',\n  },\n  overlay: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: 1000,\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}