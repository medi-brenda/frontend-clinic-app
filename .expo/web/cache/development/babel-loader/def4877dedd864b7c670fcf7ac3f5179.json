{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _deepAssign = _interopRequireDefault(require(\"deep-assign\"));\n\nvar mergeLocalStorageItem = function mergeLocalStorageItem(key, value) {\n  var oldValue = window.localStorage.getItem(key);\n  var oldObject = JSON.parse(oldValue);\n  var newObject = JSON.parse(value);\n  var nextValue = JSON.stringify((0, _deepAssign.default)({}, oldObject, newObject));\n  window.localStorage.setItem(key, nextValue);\n};\n\nvar createPromise = function createPromise(getValue, callback) {\n  return new Promise(function (resolve, reject) {\n    try {\n      var value = getValue();\n\n      if (callback) {\n        callback(null, value);\n      }\n\n      resolve(value);\n    } catch (err) {\n      if (callback) {\n        callback(err);\n      }\n\n      reject(err);\n    }\n  });\n};\n\nvar createPromiseAll = function createPromiseAll(promises, callback, processResult) {\n  return Promise.all(promises).then(function (result) {\n    var value = processResult ? processResult(result) : null;\n    callback && callback(null, value);\n    return Promise.resolve(value);\n  }, function (errors) {\n    callback && callback(errors);\n    return Promise.reject(errors);\n  });\n};\n\nvar AsyncStorage = function () {\n  function AsyncStorage() {\n    (0, _classCallCheck2.default)(this, AsyncStorage);\n  }\n\n  (0, _createClass2.default)(AsyncStorage, null, [{\n    key: \"getItem\",\n    value: function getItem(key, callback) {\n      return createPromise(function () {\n        return window.localStorage.getItem(key);\n      }, callback);\n    }\n  }, {\n    key: \"setItem\",\n    value: function setItem(key, value, callback) {\n      return createPromise(function () {\n        window.localStorage.setItem(key, value);\n      }, callback);\n    }\n  }, {\n    key: \"removeItem\",\n    value: function removeItem(key, callback) {\n      return createPromise(function () {\n        return window.localStorage.removeItem(key);\n      }, callback);\n    }\n  }, {\n    key: \"mergeItem\",\n    value: function mergeItem(key, value, callback) {\n      return createPromise(function () {\n        mergeLocalStorageItem(key, value);\n      }, callback);\n    }\n  }, {\n    key: \"clear\",\n    value: function clear(callback) {\n      return createPromise(function () {\n        window.localStorage.clear();\n      }, callback);\n    }\n  }, {\n    key: \"getAllKeys\",\n    value: function getAllKeys(callback) {\n      return createPromise(function () {\n        var numberOfKeys = window.localStorage.length;\n        var keys = [];\n\n        for (var i = 0; i < numberOfKeys; i += 1) {\n          var key = window.localStorage.key(i);\n          keys.push(key);\n        }\n\n        return keys;\n      }, callback);\n    }\n  }, {\n    key: \"flushGetRequests\",\n    value: function flushGetRequests() {}\n  }, {\n    key: \"multiGet\",\n    value: function multiGet(keys, callback) {\n      var promises = keys.map(function (key) {\n        return AsyncStorage.getItem(key);\n      });\n\n      var processResult = function processResult(result) {\n        return result.map(function (value, i) {\n          return [keys[i], value];\n        });\n      };\n\n      return createPromiseAll(promises, callback, processResult);\n    }\n  }, {\n    key: \"multiSet\",\n    value: function multiSet(keyValuePairs, callback) {\n      var promises = keyValuePairs.map(function (item) {\n        return AsyncStorage.setItem(item[0], item[1]);\n      });\n      return createPromiseAll(promises, callback);\n    }\n  }, {\n    key: \"multiRemove\",\n    value: function multiRemove(keys, callback) {\n      var promises = keys.map(function (key) {\n        return AsyncStorage.removeItem(key);\n      });\n      return createPromiseAll(promises, callback);\n    }\n  }, {\n    key: \"multiMerge\",\n    value: function multiMerge(keyValuePairs, callback) {\n      var promises = keyValuePairs.map(function (item) {\n        return AsyncStorage.mergeItem(item[0], item[1]);\n      });\n      return createPromiseAll(promises, callback);\n    }\n  }]);\n  return AsyncStorage;\n}();\n\nexports.default = AsyncStorage;","map":{"version":3,"sources":["AsyncStorage.js"],"names":["mergeLocalStorageItem","oldValue","window","oldObject","JSON","newObject","nextValue","createPromise","value","getValue","callback","resolve","reject","createPromiseAll","Promise","processResult","AsyncStorage","key","numberOfKeys","keys","i","promises","result","keyValuePairs","item"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport merge from 'deep-assign';\n\nconst mergeLocalStorageItem = (key, value) => {\n  const oldValue = window.localStorage.getItem(key);\n  const oldObject = JSON.parse(oldValue);\n  const newObject = JSON.parse(value);\n  const nextValue = JSON.stringify(merge({}, oldObject, newObject));\n  window.localStorage.setItem(key, nextValue);\n};\n\nconst createPromise = (getValue, callback): Promise<*> => {\n  return new Promise((resolve, reject) => {\n    try {\n      const value = getValue();\n      if (callback) {\n        callback(null, value);\n      }\n      resolve(value);\n    } catch (err) {\n      if (callback) {\n        callback(err);\n      }\n      reject(err);\n    }\n  });\n};\n\nconst createPromiseAll = (promises, callback, processResult): Promise<*> => {\n  return Promise.all(promises).then(\n    result => {\n      const value = processResult ? processResult(result) : null;\n      callback && callback(null, value);\n      return Promise.resolve(value);\n    },\n    errors => {\n      callback && callback(errors);\n      return Promise.reject(errors);\n    }\n  );\n};\n\nexport default class AsyncStorage {\n\n  /**\n   * Fetches `key` value.\n   */\n  static getItem(key: string, callback?: Function): Promise<*> {\n    return createPromise(() => {\n      return window.localStorage.getItem(key);\n    }, callback);\n  }\n\n  /**\n   * Sets `value` for `key`.\n   */\n  static setItem(key: string, value: string, callback?: Function): Promise<*> {\n    return createPromise(() => {\n      window.localStorage.setItem(key, value);\n    }, callback);\n  }\n\n  /**\n   * Removes a `key`\n   */\n  static removeItem(key: string, callback?: Function): Promise<*> {\n    return createPromise(() => {\n      return window.localStorage.removeItem(key);\n    }, callback);\n  }\n\n  /**\n   * Merges existing value with input value, assuming they are stringified JSON.\n   */\n  static mergeItem(key: string, value: string, callback?: Function): Promise<*> {\n    return createPromise(() => {\n      mergeLocalStorageItem(key, value);\n    }, callback);\n  }\n\n  /**\n   * Erases *all* AsyncStorage for the domain.\n   */\n  static clear(callback?: Function): Promise<*> {\n    return createPromise(() => {\n      window.localStorage.clear();\n    }, callback);\n  }\n\n  /**\n   * Gets *all* keys known to the app, for all callers, libraries, etc.\n   */\n  static getAllKeys(callback?: Function): Promise<*> {\n    return createPromise(() => {\n      const numberOfKeys = window.localStorage.length;\n      const keys = [];\n      for (let i = 0; i < numberOfKeys; i += 1) {\n        const key = window.localStorage.key(i);\n        keys.push(key);\n      }\n      return keys;\n    }, callback);\n  }\n\n  /**\n   * (stub) Flushes any pending requests using a single batch call to get the data.\n   */\n  static flushGetRequests() {}\n\n  /**\n   * multiGet resolves to an array of key-value pair arrays that matches the\n   * input format of multiSet.\n   *\n   *   multiGet(['k1', 'k2']) -> [['k1', 'val1'], ['k2', 'val2']]\n   */\n  static multiGet(keys: Array<string>, callback?: Function): Promise<*> {\n    const promises = keys.map(key => AsyncStorage.getItem(key));\n    const processResult = result => result.map((value, i) => [keys[i], value]);\n    return createPromiseAll(promises, callback, processResult);\n  }\n\n  /**\n   * Takes an array of key-value array pairs.\n   *   multiSet([['k1', 'val1'], ['k2', 'val2']])\n   */\n  static multiSet(keyValuePairs: Array<Array<string>>, callback?: Function): Promise<*> {\n    const promises = keyValuePairs.map(item => AsyncStorage.setItem(item[0], item[1]));\n    return createPromiseAll(promises, callback);\n  }\n\n  /**\n   * Delete all the keys in the `keys` array.\n   */\n  static multiRemove(keys: Array<string>, callback?: Function): Promise<*> {\n    const promises = keys.map(key => AsyncStorage.removeItem(key));\n    return createPromiseAll(promises, callback);\n  }\n\n  /**\n   * Takes an array of key-value array pairs and merges them with existing\n   * values, assuming they are stringified JSON.\n   *\n   *   multiMerge([['k1', 'val1'], ['k2', 'val2']])\n   */\n  static multiMerge(keyValuePairs: Array<Array<string>>, callback?: Function): Promise<*> {\n    const promises = keyValuePairs.map(item => AsyncStorage.mergeItem(item[0], item[1]));\n    return createPromiseAll(promises, callback);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}