{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as Font from \"expo-font\";\nimport * as _ from 'lodash';\nimport { getBanners, changeLang as changeAppLang, getLocalLang, getBenefits, getReminders as getRemindersApi, getNewsList as getNewsListApi, getNewsDetail, getPromotionList, getAboutUs, checkVersion, registerNofiticationToken, updateNotificationToken, getCooperators as getCooperatorsApi, getNewProducts as getNewProductsApi, getResources as getResourcesApi, getFavoriteDiagnosis as getFavoriteDiagnosisApi, toggleFavoriteDiagnosis as toggleFavoriteDiagnosisApi } from \"../services/app\";\nimport * as ClinicService from \"../services/clinic\";\nimport { getAuthData } from \"../utils/request\";\nimport { validateDiagnosis, validateExtraMed } from \"../utils/validate\";\nimport Config from \"../utils/config\";\nimport AsyncStorage from \"@react-native-community/async-storage\";\nimport Constants from 'expo-constants';\nimport * as Updates from 'expo-updates';\nimport { findInsurer } from \"../utils/common\";\nexport var changeLang = function changeLang(i18n) {\n  changeAppLang(i18n);\n};\nexport var checkCodePush = function checkCodePush() {\n  var update;\n  return _regeneratorRuntime.async(function checkCodePush$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (!(Constants.manifest.releaseChannel === 'prod' || Constants.manifest.releaseChannel === 'testing' || Constants.manifest.releaseChannel === 'staging')) {\n            _context.next = 9;\n            break;\n          }\n\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(Updates.checkForUpdateAsync());\n\n        case 3:\n          update = _context.sent;\n\n          if (!update.isAvailable) {\n            _context.next = 9;\n            break;\n          }\n\n          _context.next = 7;\n          return _regeneratorRuntime.awrap(Updates.fetchUpdateAsync().catch(function (error) {\n            return error.message;\n          }));\n\n        case 7:\n          _context.next = 9;\n          return _regeneratorRuntime.awrap(Updates.reloadAsync().catch(function (error) {\n            return error.message;\n          }));\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var initApp = function initApp(_ref) {\n  var stores, i18n, platform, _stores$appStore, setBanners, setAuthData, setVersion, setInited, setNotificationToken, banners, localLang, _await$getAuthData, clinicId, token, notificationToken;\n\n  return _regeneratorRuntime.async(function initApp$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          stores = _ref.stores, i18n = _ref.i18n, platform = _ref.platform;\n          _context2.prev = 1;\n          _context2.next = 4;\n          return _regeneratorRuntime.awrap(checkCodePush());\n\n        case 4:\n          _stores$appStore = stores.appStore, setBanners = _stores$appStore.setBanners, setAuthData = _stores$appStore.setAuthData, setVersion = _stores$appStore.setVersion, setInited = _stores$appStore.setInited, setNotificationToken = _stores$appStore.setNotificationToken;\n          _context2.next = 7;\n          return _regeneratorRuntime.awrap(Font.loadAsync({\n            'Roboto': require('native-base/Fonts/Roboto.ttf'),\n            'Roboto_medium': require('native-base/Fonts/Roboto_medium.ttf'),\n            \"space-mono\": require(\"../assets/fonts/SpaceMono-Regular.ttf\"),\n            '\"Times New Roman\"': require(\"../assets/fonts/times-new-roman.ttf\"),\n            \"'Times New Roman'\": require(\"../assets/fonts/times-new-roman.ttf\"),\n            '\"Calibri\",sans-serif': require(\"../assets/fonts/calibri.ttf\"),\n            \"'Calibri',sans-serif\": require(\"../assets/fonts/calibri.ttf\")\n          }));\n\n        case 7:\n          _context2.next = 9;\n          return _regeneratorRuntime.awrap(getBanners());\n\n        case 9:\n          banners = _context2.sent;\n          setBanners(banners);\n          _context2.next = 13;\n          return _regeneratorRuntime.awrap(getLocalLang());\n\n        case 13:\n          localLang = _context2.sent;\n          i18n.changeLanguage(localLang);\n          _context2.next = 17;\n          return _regeneratorRuntime.awrap(getAuthData());\n\n        case 17:\n          _await$getAuthData = _context2.sent;\n          clinicId = _await$getAuthData.clinicId;\n          token = _await$getAuthData.token;\n          console.log('clinic id: ', clinicId, 'token: ', token);\n\n          if (token && clinicId) {\n            setAuthData(token, clinicId);\n          }\n\n          _context2.next = 24;\n          return _regeneratorRuntime.awrap(registerNofiticationToken());\n\n        case 24:\n          notificationToken = _context2.sent;\n          setNotificationToken(notificationToken);\n          console.log(notificationToken);\n          setVersion(Constants.manifest.version);\n          setInited();\n          _context2.next = 35;\n          break;\n\n        case 31:\n          _context2.prev = 31;\n          _context2.t0 = _context2[\"catch\"](1);\n          console.log('error in side initApp', _context2.t0.message);\n          return _context2.abrupt(\"return\", _context2.t0.message);\n\n        case 35:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[1, 31]], Promise);\n};\nexport var initVerify = function initVerify(_ref2) {\n  var stores, navigation, i18n, _stores$appStore2, clinicId, token, setSetting, setCurrentTab, resetData, setInsurers, insurers, setting;\n\n  return _regeneratorRuntime.async(function initVerify$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          stores = _ref2.stores, navigation = _ref2.navigation, i18n = _ref2.i18n;\n          _context3.prev = 1;\n          _stores$appStore2 = stores.appStore, clinicId = _stores$appStore2.clinicId, token = _stores$appStore2.token, setSetting = _stores$appStore2.setSetting, setCurrentTab = _stores$appStore2.setCurrentTab;\n          resetData = stores.dataStore.resetData;\n          setInsurers = stores.configStore.setInsurers;\n          setCurrentTab('Verify');\n          resetData();\n          _context3.next = 9;\n          return _regeneratorRuntime.awrap(ClinicService.getInsurers({\n            token: token,\n            i18n: i18n\n          }));\n\n        case 9:\n          insurers = _context3.sent;\n          setInsurers(insurers);\n          _context3.next = 13;\n          return _regeneratorRuntime.awrap(ClinicService.getSettings({\n            clinicId: clinicId,\n            token: token,\n            i18n: i18n\n          }));\n\n        case 13:\n          setting = _context3.sent;\n          setSetting(setting);\n          console.log('inside initVerify, about to navigation reset to verifyInsurer');\n          navigation.reset({\n            index: 0,\n            routes: [{\n              name: 'VerifyInsurer'\n            }]\n          });\n          _context3.next = 22;\n          break;\n\n        case 19:\n          _context3.prev = 19;\n          _context3.t0 = _context3[\"catch\"](1);\n          return _context3.abrupt(\"return\", _context3.t0.message);\n\n        case 22:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, [[1, 19]], Promise);\n};\nexport var initModify = function initModify(_ref3) {\n  var stores, navigation, i18n, _stores$appStore3, clinicId, token, setSetting, setCurrentTab, resetData, setInsurers, insurers, setting;\n\n  return _regeneratorRuntime.async(function initModify$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          stores = _ref3.stores, navigation = _ref3.navigation, i18n = _ref3.i18n;\n          _context4.prev = 1;\n          _stores$appStore3 = stores.appStore, clinicId = _stores$appStore3.clinicId, token = _stores$appStore3.token, setSetting = _stores$appStore3.setSetting, setCurrentTab = _stores$appStore3.setCurrentTab;\n          resetData = stores.dataStore.resetData;\n          setInsurers = stores.configStore.setInsurers;\n          setCurrentTab('Modify');\n          resetData();\n          _context4.next = 9;\n          return _regeneratorRuntime.awrap(ClinicService.getInsurers({\n            token: token,\n            i18n: i18n\n          }));\n\n        case 9:\n          insurers = _context4.sent;\n          setInsurers(insurers);\n          _context4.next = 13;\n          return _regeneratorRuntime.awrap(ClinicService.getSettings({\n            clinicId: clinicId,\n            token: token,\n            i18n: i18n\n          }));\n\n        case 13:\n          setting = _context4.sent;\n          setSetting(setting);\n          navigation.reset({\n            index: 0,\n            routes: [{\n              name: 'ModifyPendingList'\n            }]\n          });\n          _context4.next = 21;\n          break;\n\n        case 18:\n          _context4.prev = 18;\n          _context4.t0 = _context4[\"catch\"](1);\n          return _context4.abrupt(\"return\", _context4.t0.message);\n\n        case 21:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, [[1, 18]], Promise);\n};\nexport var initRecords = function initRecords(_ref4) {\n  var stores, navigation, i18n, _stores$appStore4, clinicId, token, _stores$configStore, setInsurers, setBenefits, insurers, benefits;\n\n  return _regeneratorRuntime.async(function initRecords$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          stores = _ref4.stores, navigation = _ref4.navigation, i18n = _ref4.i18n;\n          _context5.prev = 1;\n          _stores$appStore4 = stores.appStore, clinicId = _stores$appStore4.clinicId, token = _stores$appStore4.token;\n          _stores$configStore = stores.configStore, setInsurers = _stores$configStore.setInsurers, setBenefits = _stores$configStore.setBenefits;\n          _context5.next = 6;\n          return _regeneratorRuntime.awrap(ClinicService.getInsurers({\n            token: token,\n            i18n: i18n\n          }));\n\n        case 6:\n          insurers = _context5.sent;\n          setInsurers(insurers);\n          _context5.next = 10;\n          return _regeneratorRuntime.awrap(getBenefits({\n            token: token,\n            clinicId: clinicId\n          }));\n\n        case 10:\n          benefits = _context5.sent;\n          setBenefits(benefits);\n          navigation.reset({\n            index: 0,\n            routes: [{\n              name: 'RecordList'\n            }]\n          });\n          _context5.next = 18;\n          break;\n\n        case 15:\n          _context5.prev = 15;\n          _context5.t0 = _context5[\"catch\"](1);\n          return _context5.abrupt(\"return\", _context5.t0.message);\n\n        case 18:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, [[1, 15]], Promise);\n};\nexport var initSetting = function initSetting(_ref5) {\n  var stores, navigation, i18n, _stores$appStore5, clinicId, token, setSetting, setting;\n\n  return _regeneratorRuntime.async(function initSetting$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          stores = _ref5.stores, navigation = _ref5.navigation, i18n = _ref5.i18n;\n          _context6.prev = 1;\n          _stores$appStore5 = stores.appStore, clinicId = _stores$appStore5.clinicId, token = _stores$appStore5.token, setSetting = _stores$appStore5.setSetting;\n          _context6.next = 5;\n          return _regeneratorRuntime.awrap(ClinicService.getSettings({\n            clinicId: clinicId,\n            token: token,\n            i18n: i18n\n          }));\n\n        case 5:\n          setting = _context6.sent;\n          setSetting(setting);\n          _context6.next = 12;\n          break;\n\n        case 9:\n          _context6.prev = 9;\n          _context6.t0 = _context6[\"catch\"](1);\n          return _context6.abrupt(\"return\", _context6.t0.message);\n\n        case 12:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, [[1, 9]], Promise);\n};\nexport var goSelectBenefit = function goSelectBenefit(_ref6) {\n  var stores, insurer, insurerName, navigation, currentTab, _stores$dataStore, values, setValues;\n\n  return _regeneratorRuntime.async(function goSelectBenefit$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          stores = _ref6.stores, insurer = _ref6.insurer, insurerName = _ref6.insurerName, navigation = _ref6.navigation;\n          currentTab = stores.appStore.currentTab;\n          _stores$dataStore = stores.dataStore, values = _stores$dataStore.values, setValues = _stores$dataStore.setValues;\n          values.insurerId = insurer;\n          values.insurerName = insurerName;\n          setValues(values);\n          navigation.navigate(currentTab + \"Benefit\");\n\n        case 7:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var goSelectDoctor = function goSelectDoctor(_ref7) {\n  var stores, benefit, benefitName, navigation, currentTab, _stores$dataStore2, values, setValues;\n\n  return _regeneratorRuntime.async(function goSelectDoctor$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          stores = _ref7.stores, benefit = _ref7.benefit, benefitName = _ref7.benefitName, navigation = _ref7.navigation;\n          currentTab = stores.appStore.currentTab;\n          _stores$dataStore2 = stores.dataStore, values = _stores$dataStore2.values, setValues = _stores$dataStore2.setValues;\n          values.benefitCode = benefit;\n          values.benefitName = benefitName;\n          setValues(values);\n          navigation.navigate(currentTab + \"Doctor\");\n\n        case 7:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var goSelectMethod = function goSelectMethod(_ref8) {\n  var stores, doctorId, navigation, i18n, _stores$appStore6, currentTab, setting, token, _stores$dataStore3, values, setValues, setMethod, setDoctorInsurerIds, insurerIds;\n\n  return _regeneratorRuntime.async(function goSelectMethod$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          stores = _ref8.stores, doctorId = _ref8.doctorId, navigation = _ref8.navigation, i18n = _ref8.i18n;\n          _context9.prev = 1;\n          _stores$appStore6 = stores.appStore, currentTab = _stores$appStore6.currentTab, setting = _stores$appStore6.setting, token = _stores$appStore6.token;\n          _stores$dataStore3 = stores.dataStore, values = _stores$dataStore3.values, setValues = _stores$dataStore3.setValues, setMethod = _stores$dataStore3.setMethod, setDoctorInsurerIds = _stores$dataStore3.setDoctorInsurerIds;\n          _context9.next = 6;\n          return _regeneratorRuntime.awrap(ClinicService.getDoctorInsurers({\n            token: token,\n            doctorId: doctorId,\n            i18n: i18n\n          }));\n\n        case 6:\n          insurerIds = _context9.sent;\n          setDoctorInsurerIds(insurerIds);\n          values.doctorId = doctorId;\n          setValues(values);\n\n          if (Config.method.physicalCard && setting.method.physicalCard) {\n            navigation.navigate(currentTab + \"Method\");\n          } else {\n            setMethod('QrCode');\n            navigation.navigate(currentTab + \"QrScan\");\n          }\n\n          _context9.next = 16;\n          break;\n\n        case 13:\n          _context9.prev = 13;\n          _context9.t0 = _context9[\"catch\"](1);\n          return _context9.abrupt(\"return\", _context9.t0.message);\n\n        case 16:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, null, null, [[1, 13]], Promise);\n};\nexport var goQrScanner = function goQrScanner(_ref9) {\n  var stores, navigation, currentTab, setMethod;\n  return _regeneratorRuntime.async(function goQrScanner$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          stores = _ref9.stores, navigation = _ref9.navigation;\n          currentTab = stores.appStore.currentTab;\n          setMethod = stores.dataStore.setMethod;\n          setMethod('QrCode');\n          navigation.navigate(currentTab + \"QrScan\");\n\n        case 5:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var goPhysicalCard = function goPhysicalCard(_ref10) {\n  var stores, navigation, currentTab, setMethod;\n  return _regeneratorRuntime.async(function goPhysicalCard$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          stores = _ref10.stores, navigation = _ref10.navigation;\n          currentTab = stores.appStore.currentTab;\n          setMethod = stores.dataStore.setMethod;\n          setMethod('PhysicalCard');\n          navigation.navigate(currentTab + \"PhysicalCard\");\n\n        case 5:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var goSelectExtraMed = function goSelectExtraMed(_ref11) {\n  var stores = _ref11.stores,\n      navigation = _ref11.navigation,\n      diagnosis = _ref11.diagnosis;\n  var valid = validateDiagnosis(diagnosis);\n\n  if (!valid) {\n    return 'Modify.InvalidNumberOfDiagnosis';\n  }\n\n  var _stores$dataStore4 = stores.dataStore,\n      values = _stores$dataStore4.values,\n      setValues = _stores$dataStore4.setValues;\n  values.diagnosis = diagnosis;\n  setValues(values);\n  navigation.navigate('SelectExtraMed');\n};\nexport var goDetailPage = function goDetailPage(_ref12) {\n  var stores = _ref12.stores,\n      navigation = _ref12.navigation,\n      extraMed = _ref12.extraMed;\n  var valid = validateExtraMed(extraMed);\n\n  if (!valid) {\n    return 'Modify.InvalidExtraMedFields';\n  }\n\n  var setting = stores.appStore.setting;\n  var _stores$dataStore5 = stores.dataStore,\n      method = _stores$dataStore5.method,\n      values = _stores$dataStore5.values,\n      setValues = _stores$dataStore5.setValues;\n  setValues(_objectSpread(_objectSpread({}, values), {}, {\n    extraMed: extraMed\n  }));\n\n  if (setting.method.physicalCard && method === 'PhysicalCard') {\n    navigation.navigate('PatientDetail');\n  } else {\n    navigation.navigate('ConfirmPay');\n  }\n};\nexport var goConfirmPayPage = function goConfirmPayPage(_ref13) {\n  var stores = _ref13.stores,\n      navigation = _ref13.navigation,\n      signature = _ref13.signature;\n  var _stores$dataStore6 = stores.dataStore,\n      values = _stores$dataStore6.values,\n      setValues = _stores$dataStore6.setValues;\n  values.signature = signature;\n  setValues(values);\n  navigation.navigate('ConfirmPay');\n};\nexport var goTab = function goTab(_ref14) {\n  var navigation = _ref14.navigation,\n      tabName = _ref14.tabName;\n  var state = navigation.dangerouslyGetState();\n  var tab = state.routes.find(function (route) {\n    return route.name === tabName;\n  });\n\n  var routeName = _.get(tab, 'state.routes[0].name', tabName);\n\n  navigation.navigate(routeName);\n};\nexport var goTransactionSuccess = function goTransactionSuccess(_ref15) {\n  var stores = _ref15.stores,\n      navigation = _ref15.navigation;\n  var method = stores.dataStore.method;\n\n  if (method === 'PhysicalCard') {\n    return navigation.navigate('TransactionSuccess');\n  }\n\n  return navigation.navigate('Record');\n};\nexport var goRecord = function goRecord(_ref16) {\n  var stores = _ref16.stores,\n      navigation = _ref16.navigation,\n      record = _ref16.record;\n  var setRecord = stores.dataStore.setRecord;\n  setRecord(record);\n  navigation.navigate('RecordDetail');\n};\nexport var goNews = function goNews(_ref17) {\n  var stores = _ref17.stores,\n      navigation = _ref17.navigation,\n      news = _ref17.news;\n  var setNews = stores.appStore.setNews;\n  setNews(news);\n  navigation.navigate('NewsDetail');\n};\nexport var goPromotion = function goPromotion(_ref18) {\n  var stores = _ref18.stores,\n      navigation = _ref18.navigation,\n      promotion = _ref18.promotion;\n  var setPromotion = stores.appStore.setPromotion;\n  setPromotion(promotion);\n  navigation.navigate('PromotionDetail');\n};\nexport var getReminders = function getReminders(_ref19) {\n  var stores, navigation, i18n, platform, _stores$appStore7, clinicId, token, setReminders, setVersion, setNewsList, _await$checkVersion, version, updateVersion, installVersion, updated, versionReminders, reminders, news;\n\n  return _regeneratorRuntime.async(function getReminders$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          stores = _ref19.stores, navigation = _ref19.navigation, i18n = _ref19.i18n, platform = _ref19.platform;\n          _context12.prev = 1;\n          _stores$appStore7 = stores.appStore, clinicId = _stores$appStore7.clinicId, token = _stores$appStore7.token, setReminders = _stores$appStore7.setReminders, setVersion = _stores$appStore7.setVersion, setNewsList = _stores$appStore7.setNewsList;\n          _context12.next = 5;\n          return _regeneratorRuntime.awrap(checkVersion({\n            i18n: i18n,\n            platform: platform\n          }));\n\n        case 5:\n          _await$checkVersion = _context12.sent;\n          version = _await$checkVersion.version;\n          updateVersion = _await$checkVersion.updateVersion;\n          installVersion = _await$checkVersion.installVersion;\n          updated = _await$checkVersion.updated;\n          setVersion(version);\n          versionReminders = [];\n\n          if (installVersion) {\n            versionReminders = [{\n              id: 'install',\n              newsId: '',\n              descriptionEn: \"Here is a updated version(v\" + installVersion + \") published to app store, it is advised to install the latest version.\",\n              descriptionChi: \"\\u6700\\u65B0\\u7248\\u672C(v\" + installVersion + \")\\u5DF2\\u4E0A\\u7DDA\\uFF0C\\u5EFA\\u8B70\\u524D\\u5F80\\u4E0B\\u6234\\u6700\\u65B0\\u7248\\u672C\",\n              titleEn: 'System Update',\n              titleChi: '系統更新'\n            }];\n          } else if (updateVersion) {\n            versionReminders = [{\n              id: 'updated',\n              newsId: '',\n              descriptionEn: \"Here is a updated version(v\" + updateVersion + \"), Are you want to updated?\",\n              descriptionChi: \"\\u6700\\u65B0\\u7248\\u672C(v\" + updateVersion + \")\\u5DF2\\u4E0A\\u7DDA\\uFF0C\\u662F\\u5426\\u66F4\\u65B0\",\n              titleEn: 'System Update',\n              titleChi: '系統更新'\n            }];\n          } else if (updated.length) {\n            versionReminders = [{\n              id: 'updatedDetail',\n              newsId: '',\n              descriptionEn: _.map(updated, 'descriptionEn').join('\\n'),\n              descriptionChi: _.map(updated, 'descriptionChi').join('\\n'),\n              titleEn: 'System Update',\n              titleChi: '系統更新'\n            }];\n          }\n\n          _context12.next = 15;\n          return _regeneratorRuntime.awrap(getRemindersApi({\n            clinicId: clinicId,\n            token: token,\n            i18n: i18n\n          }));\n\n        case 15:\n          reminders = _context12.sent;\n          setReminders(_.concat(versionReminders, reminders));\n          _context12.next = 19;\n          return _regeneratorRuntime.awrap(getNewsListApi({\n            i18n: i18n,\n            token: token\n          }));\n\n        case 19:\n          news = _context12.sent;\n          setNewsList(news);\n          _context12.next = 26;\n          break;\n\n        case 23:\n          _context12.prev = 23;\n          _context12.t0 = _context12[\"catch\"](1);\n          console.error(_context12.t0);\n\n        case 26:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, null, null, [[1, 23]], Promise);\n};\nexport var readReminders = function readReminders(_ref20) {\n  var stores = _ref20.stores;\n  stores.appStore.setReadReminders(true);\n};\nexport var initNewsList = function initNewsList(_ref21) {\n  var stores, navigation, i18n, _stores$appStore8, token, setNewsList, newsList;\n\n  return _regeneratorRuntime.async(function initNewsList$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          stores = _ref21.stores, navigation = _ref21.navigation, i18n = _ref21.i18n;\n          _context13.prev = 1;\n          _stores$appStore8 = stores.appStore, token = _stores$appStore8.token, setNewsList = _stores$appStore8.setNewsList;\n          _context13.next = 5;\n          return _regeneratorRuntime.awrap(getNewsListApi({\n            i18n: i18n,\n            token: token\n          }));\n\n        case 5:\n          newsList = _context13.sent;\n          setNewsList(newsList);\n          _context13.next = 12;\n          break;\n\n        case 9:\n          _context13.prev = 9;\n          _context13.t0 = _context13[\"catch\"](1);\n          return _context13.abrupt(\"return\", _context13.t0.message);\n\n        case 12:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, null, null, [[1, 9]], Promise);\n};\nexport var initNewsDetail = function initNewsDetail(_ref22) {\n  var stores, navigation, i18n, _stores$appStore9, token, news, setNews, newNews;\n\n  return _regeneratorRuntime.async(function initNewsDetail$(_context14) {\n    while (1) {\n      switch (_context14.prev = _context14.next) {\n        case 0:\n          stores = _ref22.stores, navigation = _ref22.navigation, i18n = _ref22.i18n;\n          _context14.prev = 1;\n          _stores$appStore9 = stores.appStore, token = _stores$appStore9.token, news = _stores$appStore9.news, setNews = _stores$appStore9.setNews;\n          _context14.next = 5;\n          return _regeneratorRuntime.awrap(getNewsDetail({\n            i18n: i18n,\n            token: token,\n            newsId: news.id\n          }));\n\n        case 5:\n          newNews = _context14.sent;\n          setNews(newNews);\n          _context14.next = 12;\n          break;\n\n        case 9:\n          _context14.prev = 9;\n          _context14.t0 = _context14[\"catch\"](1);\n          return _context14.abrupt(\"return\", _context14.t0.message);\n\n        case 12:\n        case \"end\":\n          return _context14.stop();\n      }\n    }\n  }, null, null, [[1, 9]], Promise);\n};\nexport var initPersonalProfile = function initPersonalProfile(_ref23) {\n  var stores, navigation, i18n, _stores$appStore10, token, clinicId, setPersonalProfile, profile;\n\n  return _regeneratorRuntime.async(function initPersonalProfile$(_context15) {\n    while (1) {\n      switch (_context15.prev = _context15.next) {\n        case 0:\n          stores = _ref23.stores, navigation = _ref23.navigation, i18n = _ref23.i18n;\n          _context15.prev = 1;\n          _stores$appStore10 = stores.appStore, token = _stores$appStore10.token, clinicId = _stores$appStore10.clinicId;\n          setPersonalProfile = stores.dataStore.setPersonalProfile;\n          _context15.next = 6;\n          return _regeneratorRuntime.awrap(ClinicService.getPersonalProfile({\n            clinicId: clinicId,\n            token: token\n          }));\n\n        case 6:\n          profile = _context15.sent;\n          setPersonalProfile(profile);\n          _context15.next = 13;\n          break;\n\n        case 10:\n          _context15.prev = 10;\n          _context15.t0 = _context15[\"catch\"](1);\n          return _context15.abrupt(\"return\", _context15.t0.message);\n\n        case 13:\n        case \"end\":\n          return _context15.stop();\n      }\n    }\n  }, null, null, [[1, 10]], Promise);\n};\nexport var initClinicProfile = function initClinicProfile(_ref24) {\n  var stores, navigation, i18n, _stores$appStore11, token, clinicId, setClinic, clinic;\n\n  return _regeneratorRuntime.async(function initClinicProfile$(_context16) {\n    while (1) {\n      switch (_context16.prev = _context16.next) {\n        case 0:\n          stores = _ref24.stores, navigation = _ref24.navigation, i18n = _ref24.i18n;\n          _context16.prev = 1;\n          _stores$appStore11 = stores.appStore, token = _stores$appStore11.token, clinicId = _stores$appStore11.clinicId;\n          setClinic = stores.dataStore.setClinic;\n          _context16.next = 6;\n          return _regeneratorRuntime.awrap(ClinicService.getClinicProfile({\n            clinicId: clinicId,\n            token: token\n          }));\n\n        case 6:\n          clinic = _context16.sent;\n          setClinic(clinic);\n          _context16.next = 13;\n          break;\n\n        case 10:\n          _context16.prev = 10;\n          _context16.t0 = _context16[\"catch\"](1);\n          return _context16.abrupt(\"return\", _context16.t0.message);\n\n        case 13:\n        case \"end\":\n          return _context16.stop();\n      }\n    }\n  }, null, null, [[1, 10]], Promise);\n};\nexport var initAboutUs = function initAboutUs(_ref25) {\n  var stores, navigation, i18n, setAboutUs, aboutUs;\n  return _regeneratorRuntime.async(function initAboutUs$(_context17) {\n    while (1) {\n      switch (_context17.prev = _context17.next) {\n        case 0:\n          stores = _ref25.stores, navigation = _ref25.navigation, i18n = _ref25.i18n;\n          _context17.prev = 1;\n          setAboutUs = stores.appStore.setAboutUs;\n          _context17.next = 5;\n          return _regeneratorRuntime.awrap(getAboutUs());\n\n        case 5:\n          aboutUs = _context17.sent;\n          setAboutUs(aboutUs);\n          _context17.next = 12;\n          break;\n\n        case 9:\n          _context17.prev = 9;\n          _context17.t0 = _context17[\"catch\"](1);\n          return _context17.abrupt(\"return\", _context17.t0.message);\n\n        case 12:\n        case \"end\":\n          return _context17.stop();\n      }\n    }\n  }, null, null, [[1, 9]], Promise);\n};\nexport var initDoctorProfile = function initDoctorProfile(_ref26) {\n  var stores, navigation, i18n, _stores$appStore12, token, clinicId, setDoctorProfileList, doctorProfileList;\n\n  return _regeneratorRuntime.async(function initDoctorProfile$(_context18) {\n    while (1) {\n      switch (_context18.prev = _context18.next) {\n        case 0:\n          stores = _ref26.stores, navigation = _ref26.navigation, i18n = _ref26.i18n;\n          _context18.prev = 1;\n          _stores$appStore12 = stores.appStore, token = _stores$appStore12.token, clinicId = _stores$appStore12.clinicId;\n          setDoctorProfileList = stores.dataStore.setDoctorProfileList;\n          _context18.next = 6;\n          return _regeneratorRuntime.awrap(ClinicService.getDoctorList({\n            clinicId: clinicId,\n            token: token\n          }));\n\n        case 6:\n          doctorProfileList = _context18.sent;\n          setDoctorProfileList(doctorProfileList);\n          _context18.next = 13;\n          break;\n\n        case 10:\n          _context18.prev = 10;\n          _context18.t0 = _context18[\"catch\"](1);\n          return _context18.abrupt(\"return\", _context18.t0.message);\n\n        case 13:\n        case \"end\":\n          return _context18.stop();\n      }\n    }\n  }, null, null, [[1, 10]], Promise);\n};\nexport var initDoctorProfileDetail = function initDoctorProfileDetail(_ref27) {\n  var stores, navigation, i18n, _stores$appStore13, token, clinicId, _stores$dataStore7, doctorProfile, setDoctorProfile, newDoctorProfile;\n\n  return _regeneratorRuntime.async(function initDoctorProfileDetail$(_context19) {\n    while (1) {\n      switch (_context19.prev = _context19.next) {\n        case 0:\n          stores = _ref27.stores, navigation = _ref27.navigation, i18n = _ref27.i18n;\n          _context19.prev = 1;\n          _stores$appStore13 = stores.appStore, token = _stores$appStore13.token, clinicId = _stores$appStore13.clinicId;\n          _stores$dataStore7 = stores.dataStore, doctorProfile = _stores$dataStore7.doctorProfile, setDoctorProfile = _stores$dataStore7.setDoctorProfile;\n          _context19.next = 6;\n          return _regeneratorRuntime.awrap(ClinicService.getDoctorProfile({\n            clinicId: clinicId,\n            token: token,\n            doctor: doctorProfile\n          }));\n\n        case 6:\n          newDoctorProfile = _context19.sent;\n          setDoctorProfile(newDoctorProfile);\n          _context19.next = 13;\n          break;\n\n        case 10:\n          _context19.prev = 10;\n          _context19.t0 = _context19[\"catch\"](1);\n          return _context19.abrupt(\"return\", _context19.t0.message);\n\n        case 13:\n        case \"end\":\n          return _context19.stop();\n      }\n    }\n  }, null, null, [[1, 10]], Promise);\n};\nexport var initPromotionList = function initPromotionList(_ref28) {\n  var stores, navigation, i18n, _stores$appStore14, token, clinicId, setPromotionList, promotionList;\n\n  return _regeneratorRuntime.async(function initPromotionList$(_context20) {\n    while (1) {\n      switch (_context20.prev = _context20.next) {\n        case 0:\n          stores = _ref28.stores, navigation = _ref28.navigation, i18n = _ref28.i18n;\n          _context20.prev = 1;\n          _stores$appStore14 = stores.appStore, token = _stores$appStore14.token, clinicId = _stores$appStore14.clinicId, setPromotionList = _stores$appStore14.setPromotionList;\n          _context20.next = 5;\n          return _regeneratorRuntime.awrap(getPromotionList({\n            clinicId: clinicId,\n            token: token\n          }));\n\n        case 5:\n          promotionList = _context20.sent;\n          setPromotionList(promotionList);\n          _context20.next = 12;\n          break;\n\n        case 9:\n          _context20.prev = 9;\n          _context20.t0 = _context20[\"catch\"](1);\n          return _context20.abrupt(\"return\", _context20.t0.message);\n\n        case 12:\n        case \"end\":\n          return _context20.stop();\n      }\n    }\n  }, null, null, [[1, 9]], Promise);\n};\nexport var downloadReport = function downloadReport(_ref29) {\n  var stores, navigation, year, month, _stores$appStore15, token, clinicId;\n\n  return _regeneratorRuntime.async(function downloadReport$(_context21) {\n    while (1) {\n      switch (_context21.prev = _context21.next) {\n        case 0:\n          stores = _ref29.stores, navigation = _ref29.navigation, year = _ref29.year, month = _ref29.month;\n          _context21.prev = 1;\n          _stores$appStore15 = stores.appStore, token = _stores$appStore15.token, clinicId = _stores$appStore15.clinicId;\n          _context21.next = 5;\n          return _regeneratorRuntime.awrap(ClinicService.downloadReport({\n            token: token,\n            clinicId: clinicId,\n            year: year,\n            month: month\n          }));\n\n        case 5:\n          _context21.next = 10;\n          break;\n\n        case 7:\n          _context21.prev = 7;\n          _context21.t0 = _context21[\"catch\"](1);\n          return _context21.abrupt(\"return\", _context21.t0.message);\n\n        case 10:\n        case \"end\":\n          return _context21.stop();\n      }\n    }\n  }, null, null, [[1, 7]], Promise);\n};\nexport var goDoctorProfile = function goDoctorProfile(_ref30) {\n  var stores, navigation, doctorProfile, setDoctorProfile;\n  return _regeneratorRuntime.async(function goDoctorProfile$(_context22) {\n    while (1) {\n      switch (_context22.prev = _context22.next) {\n        case 0:\n          stores = _ref30.stores, navigation = _ref30.navigation, doctorProfile = _ref30.doctorProfile;\n          setDoctorProfile = stores.dataStore.setDoctorProfile;\n          setDoctorProfile(doctorProfile);\n          navigation.navigate('DoctorProfile');\n\n        case 4:\n        case \"end\":\n          return _context22.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var saveSettings = function saveSettings(_ref31) {\n  var stores, navigation, settings, i18n, _stores$appStore16, token, clinicId;\n\n  return _regeneratorRuntime.async(function saveSettings$(_context23) {\n    while (1) {\n      switch (_context23.prev = _context23.next) {\n        case 0:\n          stores = _ref31.stores, navigation = _ref31.navigation, settings = _ref31.settings, i18n = _ref31.i18n;\n          _context23.prev = 1;\n          _stores$appStore16 = stores.appStore, token = _stores$appStore16.token, clinicId = _stores$appStore16.clinicId;\n          _context23.next = 5;\n          return _regeneratorRuntime.awrap(ClinicService.saveSettings({\n            token: token,\n            clinicId: clinicId,\n            settings: settings,\n            i18n: i18n\n          }));\n\n        case 5:\n          _context23.next = 10;\n          break;\n\n        case 7:\n          _context23.prev = 7;\n          _context23.t0 = _context23[\"catch\"](1);\n          return _context23.abrupt(\"return\", _context23.t0.message);\n\n        case 10:\n        case \"end\":\n          return _context23.stop();\n      }\n    }\n  }, null, null, [[1, 7]], Promise);\n};\nexport var changePassword = function changePassword(_ref32) {\n  var stores, oldPassword, newPassword, token, i18n, _stores$appStore17, _token, clinicId;\n\n  return _regeneratorRuntime.async(function changePassword$(_context24) {\n    while (1) {\n      switch (_context24.prev = _context24.next) {\n        case 0:\n          stores = _ref32.stores, oldPassword = _ref32.oldPassword, newPassword = _ref32.newPassword, token = _ref32.token, i18n = _ref32.i18n;\n          _context24.prev = 1;\n          _stores$appStore17 = stores.appStore, _token = _stores$appStore17.token, clinicId = _stores$appStore17.clinicId;\n          _context24.next = 5;\n          return _regeneratorRuntime.awrap(ClinicService.changePassword({\n            clinicId: clinicId,\n            oldPassword: oldPassword,\n            newPassword: newPassword,\n            token: _token,\n            i18n: i18n\n          }));\n\n        case 5:\n          _context24.next = 10;\n          break;\n\n        case 7:\n          _context24.prev = 7;\n          _context24.t0 = _context24[\"catch\"](1);\n          return _context24.abrupt(\"return\", _context24.t0.message);\n\n        case 10:\n        case \"end\":\n          return _context24.stop();\n      }\n    }\n  }, null, null, [[1, 7]], Promise);\n};\nexport var logout = function logout(_ref33) {\n  var stores, navigation, i18n, _stores$appStore18, resetData, notificationToken, token, clinicId;\n\n  return _regeneratorRuntime.async(function logout$(_context25) {\n    while (1) {\n      switch (_context25.prev = _context25.next) {\n        case 0:\n          stores = _ref33.stores, navigation = _ref33.navigation, i18n = _ref33.i18n;\n          _stores$appStore18 = stores.appStore, resetData = _stores$appStore18.resetData, notificationToken = _stores$appStore18.notificationToken, token = _stores$appStore18.token, clinicId = _stores$appStore18.clinicId;\n          _context25.next = 4;\n          return _regeneratorRuntime.awrap(updateNotificationToken({\n            notificationToken: notificationToken,\n            token: token,\n            clinicId: clinicId,\n            i18n: i18n\n          }));\n\n        case 4:\n          resetData();\n          _context25.next = 7;\n          return _regeneratorRuntime.awrap(AsyncStorage.removeItem('token'));\n\n        case 7:\n          _context25.next = 9;\n          return _regeneratorRuntime.awrap(AsyncStorage.removeItem('clinic_id'));\n\n        case 9:\n        case \"end\":\n          return _context25.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var updateApp = function updateApp(_ref34) {\n  var i18n, _await$checkVersion2, updateVersion;\n\n  return _regeneratorRuntime.async(function updateApp$(_context26) {\n    while (1) {\n      switch (_context26.prev = _context26.next) {\n        case 0:\n          i18n = _ref34.i18n;\n          _context26.prev = 1;\n          _context26.next = 4;\n          return _regeneratorRuntime.awrap(checkVersion({\n            i18n: i18n,\n            platform: 'android'\n          }));\n\n        case 4:\n          _await$checkVersion2 = _context26.sent;\n          updateVersion = _await$checkVersion2.updateVersion;\n\n          if (updateVersion) {\n            _context26.next = 8;\n            break;\n          }\n\n          throw new Error('Common.UnknownSystemError');\n\n        case 8:\n          _context26.next = 10;\n          return _regeneratorRuntime.awrap(Updates.fetchUpdateAsync());\n\n        case 10:\n          _context26.next = 15;\n          break;\n\n        case 12:\n          _context26.prev = 12;\n          _context26.t0 = _context26[\"catch\"](1);\n          return _context26.abrupt(\"return\", _context26.t0.message);\n\n        case 15:\n        case \"end\":\n          return _context26.stop();\n      }\n    }\n  }, null, null, [[1, 12]], Promise);\n};\nexport var restartApp = function restartApp() {\n  Updates.reloadAsync();\n};\nexport var initCooperators = function initCooperators(_ref35) {\n  var stores, navigation, i18n, platform, _stores$appStore19, clinicId, token, setCooperators, setNewProducts, cooperators, newProducts;\n\n  return _regeneratorRuntime.async(function initCooperators$(_context27) {\n    while (1) {\n      switch (_context27.prev = _context27.next) {\n        case 0:\n          stores = _ref35.stores, navigation = _ref35.navigation, i18n = _ref35.i18n, platform = _ref35.platform;\n          _context27.prev = 1;\n          _stores$appStore19 = stores.appStore, clinicId = _stores$appStore19.clinicId, token = _stores$appStore19.token, setCooperators = _stores$appStore19.setCooperators, setNewProducts = _stores$appStore19.setNewProducts;\n          _context27.next = 5;\n          return _regeneratorRuntime.awrap(getCooperatorsApi({\n            clinicId: clinicId,\n            token: token,\n            i18n: i18n\n          }));\n\n        case 5:\n          cooperators = _context27.sent;\n          _context27.next = 8;\n          return _regeneratorRuntime.awrap(getNewProductsApi({\n            clinicId: clinicId,\n            token: token,\n            i18n: i18n\n          }));\n\n        case 8:\n          newProducts = _context27.sent;\n          setCooperators(cooperators);\n          setNewProducts(newProducts);\n          _context27.next = 16;\n          break;\n\n        case 13:\n          _context27.prev = 13;\n          _context27.t0 = _context27[\"catch\"](1);\n          return _context27.abrupt(\"return\", _context27.t0.message);\n\n        case 16:\n        case \"end\":\n          return _context27.stop();\n      }\n    }\n  }, null, null, [[1, 13]], Promise);\n};\nexport var initResourceCenter = function initResourceCenter(_ref36) {\n  var stores, navigation, i18n, platform, _stores$appStore20, clinicId, token, setNewResources, resources;\n\n  return _regeneratorRuntime.async(function initResourceCenter$(_context28) {\n    while (1) {\n      switch (_context28.prev = _context28.next) {\n        case 0:\n          stores = _ref36.stores, navigation = _ref36.navigation, i18n = _ref36.i18n, platform = _ref36.platform;\n          _context28.prev = 1;\n          _stores$appStore20 = stores.appStore, clinicId = _stores$appStore20.clinicId, token = _stores$appStore20.token, setNewResources = _stores$appStore20.setNewResources;\n          _context28.next = 5;\n          return _regeneratorRuntime.awrap(getResourcesApi({\n            clinicId: clinicId,\n            token: token,\n            i18n: i18n\n          }));\n\n        case 5:\n          resources = _context28.sent;\n          setNewResources(resources);\n          _context28.next = 12;\n          break;\n\n        case 9:\n          _context28.prev = 9;\n          _context28.t0 = _context28[\"catch\"](1);\n          return _context28.abrupt(\"return\", _context28.t0.message);\n\n        case 12:\n        case \"end\":\n          return _context28.stop();\n      }\n    }\n  }, null, null, [[1, 9]], Promise);\n};\nexport var goNextAfterSelectingPendingItem = function goNextAfterSelectingPendingItem(_ref37) {\n  var stores = _ref37.stores,\n      navigation = _ref37.navigation,\n      pendingItem = _ref37.pendingItem;\n  var benefitCode = pendingItem.benefitCode,\n      doctor = pendingItem.doctor,\n      insurerId = pendingItem.insurerId,\n      extraMed = pendingItem.extraMed,\n      extraMedLimit = pendingItem.extraMedLimit,\n      copayment = pendingItem.copayment,\n      patientName = pendingItem.patientName,\n      patientId = pendingItem.patientId;\n  var _stores$dataStore8 = stores.dataStore,\n      values = _stores$dataStore8.values,\n      setValues = _stores$dataStore8.setValues,\n      setMethod = _stores$dataStore8.setMethod;\n  var insurers = stores.configStore.insurers;\n  var setPendingItem = stores.dataStore.setPendingItem;\n  setValues(_objectSpread(_objectSpread({}, values), {}, {\n    benefitCode: benefitCode,\n    doctorId: doctor.code,\n    insurerId: insurerId.toString(),\n    extraMed: extraMed,\n    extraMedLimit: extraMedLimit,\n    copayment: copayment,\n    patientName: patientName,\n    member: patientId\n  }));\n  setPendingItem(pendingItem);\n  var isQR = pendingItem.verifyType === 1;\n  var insurer = findInsurer(insurers, insurerId);\n\n  if (isQR && !insurer.shouldInputPayToken) {\n    setMethod('QrCode');\n    navigation.navigate('SelectDiagnosis');\n    return;\n  }\n\n  if (isQR) {\n    setMethod('QrCode');\n    navigation.navigate('ModifyQrScan');\n    return;\n  } else {\n    setMethod('PhysicalCard');\n    navigation.navigate('SelectDiagnosis');\n    return;\n  }\n};\nexport var initFavoriteDiagnosis = function initFavoriteDiagnosis(_ref38) {\n  var stores, navigation, i18n, platform, _stores$appStore21, clinicId, token, setNewFavoriteDiagnosis, favoriteDiagnosis;\n\n  return _regeneratorRuntime.async(function initFavoriteDiagnosis$(_context29) {\n    while (1) {\n      switch (_context29.prev = _context29.next) {\n        case 0:\n          stores = _ref38.stores, navigation = _ref38.navigation, i18n = _ref38.i18n, platform = _ref38.platform;\n          _context29.prev = 1;\n          _stores$appStore21 = stores.appStore, clinicId = _stores$appStore21.clinicId, token = _stores$appStore21.token, setNewFavoriteDiagnosis = _stores$appStore21.setNewFavoriteDiagnosis;\n          _context29.next = 5;\n          return _regeneratorRuntime.awrap(getFavoriteDiagnosisApi({\n            clinicId: clinicId,\n            token: token,\n            i18n: i18n\n          }));\n\n        case 5:\n          favoriteDiagnosis = _context29.sent;\n          setNewFavoriteDiagnosis(favoriteDiagnosis);\n          _context29.next = 12;\n          break;\n\n        case 9:\n          _context29.prev = 9;\n          _context29.t0 = _context29[\"catch\"](1);\n          return _context29.abrupt(\"return\", _context29.t0.message);\n\n        case 12:\n        case \"end\":\n          return _context29.stop();\n      }\n    }\n  }, null, null, [[1, 9]], Promise);\n};\nexport var toggleFavoriteDiagnosis = function toggleFavoriteDiagnosis(_ref39) {\n  var stores, navigation, i18n, platform, diagnosisId, type, _stores$appStore22, clinicId, token, setNewFavoriteDiagnosis, favoriteDiagnosis;\n\n  return _regeneratorRuntime.async(function toggleFavoriteDiagnosis$(_context30) {\n    while (1) {\n      switch (_context30.prev = _context30.next) {\n        case 0:\n          stores = _ref39.stores, navigation = _ref39.navigation, i18n = _ref39.i18n, platform = _ref39.platform, diagnosisId = _ref39.diagnosisId, type = _ref39.type;\n          _context30.prev = 1;\n          _stores$appStore22 = stores.appStore, clinicId = _stores$appStore22.clinicId, token = _stores$appStore22.token, setNewFavoriteDiagnosis = _stores$appStore22.setNewFavoriteDiagnosis;\n          _context30.next = 5;\n          return _regeneratorRuntime.awrap(toggleFavoriteDiagnosisApi({\n            clinicId: clinicId,\n            token: token,\n            i18n: i18n,\n            diagnosisId: diagnosisId,\n            type: type\n          }));\n\n        case 5:\n          favoriteDiagnosis = _context30.sent;\n          setNewFavoriteDiagnosis(favoriteDiagnosis);\n          return _context30.abrupt(\"return\", favoriteDiagnosis);\n\n        case 10:\n          _context30.prev = 10;\n          _context30.t0 = _context30[\"catch\"](1);\n          return _context30.abrupt(\"return\", _context30.t0.message);\n\n        case 13:\n        case \"end\":\n          return _context30.stop();\n      }\n    }\n  }, null, null, [[1, 10]], Promise);\n};","map":{"version":3,"names":["Font","_","getBanners","changeLang","changeAppLang","getLocalLang","getBenefits","getReminders","getRemindersApi","getNewsList","getNewsListApi","getNewsDetail","getPromotionList","getAboutUs","checkVersion","registerNofiticationToken","updateNotificationToken","getCooperators","getCooperatorsApi","getNewProducts","getNewProductsApi","getResources","getResourcesApi","getFavoriteDiagnosis","getFavoriteDiagnosisApi","toggleFavoriteDiagnosis","toggleFavoriteDiagnosisApi","ClinicService","getAuthData","validateDiagnosis","validateExtraMed","Config","AsyncStorage","Constants","Updates","findInsurer","i18n","checkCodePush","manifest","releaseChannel","checkForUpdateAsync","update","isAvailable","fetchUpdateAsync","catch","error","message","reloadAsync","initApp","stores","platform","appStore","setBanners","setAuthData","setVersion","setInited","setNotificationToken","loadAsync","require","banners","localLang","changeLanguage","clinicId","token","console","log","notificationToken","version","initVerify","navigation","setSetting","setCurrentTab","resetData","dataStore","setInsurers","configStore","getInsurers","insurers","getSettings","setting","reset","index","routes","name","initModify","initRecords","setBenefits","benefits","initSetting","goSelectBenefit","insurer","insurerName","currentTab","values","setValues","insurerId","navigate","goSelectDoctor","benefit","benefitName","benefitCode","goSelectMethod","doctorId","setMethod","setDoctorInsurerIds","getDoctorInsurers","insurerIds","method","physicalCard","goQrScanner","goPhysicalCard","goSelectExtraMed","diagnosis","valid","goDetailPage","extraMed","goConfirmPayPage","signature","goTab","tabName","state","dangerouslyGetState","tab","find","route","routeName","get","goTransactionSuccess","goRecord","record","setRecord","goNews","news","setNews","goPromotion","promotion","setPromotion","setReminders","setNewsList","updateVersion","installVersion","updated","versionReminders","id","newsId","descriptionEn","descriptionChi","titleEn","titleChi","length","map","join","reminders","concat","readReminders","setReadReminders","initNewsList","newsList","initNewsDetail","newNews","initPersonalProfile","setPersonalProfile","getPersonalProfile","profile","initClinicProfile","setClinic","getClinicProfile","clinic","initAboutUs","setAboutUs","aboutUs","initDoctorProfile","setDoctorProfileList","getDoctorList","doctorProfileList","initDoctorProfileDetail","doctorProfile","setDoctorProfile","getDoctorProfile","doctor","newDoctorProfile","initPromotionList","setPromotionList","promotionList","downloadReport","year","month","goDoctorProfile","saveSettings","settings","changePassword","oldPassword","newPassword","logout","removeItem","updateApp","Error","restartApp","initCooperators","setCooperators","setNewProducts","cooperators","newProducts","initResourceCenter","setNewResources","resources","goNextAfterSelectingPendingItem","pendingItem","extraMedLimit","copayment","patientName","patientId","setPendingItem","code","toString","member","isQR","verifyType","shouldInputPayToken","initFavoriteDiagnosis","setNewFavoriteDiagnosis","favoriteDiagnosis","diagnosisId","type"],"sources":["I:/Workspace/mediWS/mccWS/frontend-clinic-app/src/actions/app.ts"],"sourcesContent":["import { i18n } from \"i18next\";\r\nimport { Stores } from \"../stores\";\r\nimport * as Font from \"expo-font\";\r\nimport * as _ from 'lodash';\r\nimport {\r\n    getBanners, changeLang as changeAppLang, getLocalLang, getBenefits,\r\n    getReminders as getRemindersApi, getNewsList as getNewsListApi, getNewsDetail, getPromotionList, getAboutUs, getVersion, checkVersion, registerNofiticationToken, updateNotificationToken,\r\n    getCooperators as getCooperatorsApi, getNewProducts as getNewProductsApi, getResources as getResourcesApi, getFavoriteDiagnosis as getFavoriteDiagnosisApi, toggleFavoriteDiagnosis as toggleFavoriteDiagnosisApi\r\n} from \"../services/app\";\r\nimport * as ClinicService from '../services/clinic';\r\nimport { getAuthData } from \"../utils/request\";\r\nimport { validateDiagnosis, validateExtraMed } from \"../utils/validate\";\r\nimport { ExtraMed } from \"../models/extraMed\";\r\nimport { Diagnosis } from \"../models/diagnosis\";\r\nimport { Record } from \"../models/record\";\r\nimport { News } from \"../models/news\";\r\nimport { Promotion } from \"../models/promotion\";\r\nimport { DoctorProfile } from \"../models/doctor\";\r\nimport { Setting } from \"../models/setting\";\r\nimport Config from \"../utils/config\";\r\nimport AsyncStorage from \"@react-native-community/async-storage\";\r\nimport { Reminder } from \"../models/reminder\";\r\nimport Constants from 'expo-constants';\r\nimport * as Updates from 'expo-updates';\r\nimport {PendingItem} from \"../models/pendingItem\";\r\nimport { findInsurer } from \"../utils/common\";\r\n\r\ntype UpdateApp = {\r\n    i18n: i18n\r\n}\r\n\r\ntype InitApp = {\r\n    stores: Stores,\r\n    i18n: i18n,\r\n    platform: string\r\n}\r\n\r\ntype GoSelectBenefit = {\r\n    insurer: string,\r\n    insurerName: string,\r\n    stores: Stores,\r\n    navigation: any\r\n}\r\n\r\ntype GoSelectDoctor = {\r\n    benefit: string,\r\n    benefitName: string,\r\n    stores: Stores,\r\n    navigation: any\r\n}\r\n\r\ntype GoSelectMethod = {\r\n    doctorId: string,\r\n    stores: Stores,\r\n    navigation: any,\r\n    i18n: i18n\r\n}\r\n\r\ntype GoSelectExtraMed = {\r\n    diagnosis: Diagnosis[],\r\n    stores: Stores,\r\n    navigation: any\r\n}\r\n\r\ntype GoPage = {\r\n    stores: Stores,\r\n    navigation: any\r\n}\r\n\r\ntype GoTab = {\r\n    tabName: string,\r\n    navigation: any\r\n}\r\n\r\ntype GetReminders = {\r\n    stores: Stores,\r\n    navigation: any,\r\n    i18n: i18n,\r\n    platform: string\r\n}\r\n\r\ntype InitPage = {\r\n    stores: Stores,\r\n    navigation: any,\r\n    i18n: i18n\r\n}\r\n\r\ntype ReadReminders = {\r\n    stores: Stores\r\n}\r\n\r\ntype GoDetailPage = {\r\n    stores: Stores,\r\n    navigation: any,\r\n    extraMed: ExtraMed[]\r\n}\r\n\r\ntype GoConfirmPayPage = {\r\n    stores: Stores,\r\n    navigation: any,\r\n    signature: string\r\n}\r\n\r\ntype GoRecord = {\r\n    stores: Stores,\r\n    navigation: any,\r\n    record: Record\r\n}\r\n\r\ntype GoNews = {\r\n    stores: Stores,\r\n    navigation: any,\r\n    news: News\r\n}\r\n\r\ntype GoPromotion = {\r\n    stores: Stores,\r\n    navigation: any,\r\n    promotion: Promotion\r\n}\r\n\r\ntype DownloadReport = {\r\n    stores: Stores,\r\n    navigation: any,\r\n    year: number,\r\n    month: number\r\n}\r\n\r\ntype GoDoctorProfile = {\r\n    stores: Stores,\r\n    navigation: any,\r\n    doctorProfile: DoctorProfile\r\n}\r\n\r\ntype SaveSettings = {\r\n    stores: Stores,\r\n    navigation: any,\r\n    settings: Setting,\r\n    i18n: i18n\r\n}\r\n\r\ntype Logout = {\r\n    stores: Stores,\r\n    navigation: any,\r\n    i18n: i18n\r\n}\r\n\r\ntype InitCooperators = {\r\n    stores: Stores,\r\n    navigation: any,\r\n    i18n: i18n,\r\n    platform: string\r\n}\r\n\r\ntype ChangePassword ={\r\n    stores: Stores,\r\n    token: string,\r\n    clinicId: string,\r\n    oldPassword: string,\r\n    newPassword: string,\r\n    i18n: i18n\r\n\r\n}\r\n\r\n\r\ntype InitResourceCenter = {\r\n    stores: Stores,\r\n    navigation: any,\r\n    i18n: i18n,\r\n    platform: string\r\n}\r\n\r\ntype GoNextAfterSelectingPendingItem={\r\n    stores:Stores,\r\n    navigation:any,\r\n    pendingItem:PendingItem\r\n}\r\n\r\ntype InitFavoriteDiagnosis = {\r\n    stores: Stores,\r\n    navigation: any,\r\n    i18n: i18n,\r\n    platform: string\r\n}\r\n\r\ntype ToggleFavoriteDiagnosis = {\r\n    stores: Stores,\r\n    navigation: any,\r\n    i18n: i18n,\r\n    platform: string,\r\n    diagnosisId: string,\r\n    type: string,\r\n}\r\n\r\nexport const changeLang = (i18n: i18n) => {\r\n    changeAppLang(i18n);\r\n}\r\n\r\nexport const checkCodePush = async () => {\r\n    if(Constants.manifest.releaseChannel === 'prod' || Constants.manifest.releaseChannel === 'testing' || Constants.manifest.releaseChannel === 'staging') {\r\n        // check update\r\n        const update = await Updates.checkForUpdateAsync();\r\n        if (update.isAvailable) {\r\n        await Updates.fetchUpdateAsync().catch((error: Error) => {\r\n            return error.message;\r\n        })\r\n        // ... notify user of update ...\r\n        await Updates.reloadAsync().catch((error: Error) => {\r\n            return error.message;\r\n        })\r\n        }\r\n    }\r\n}\r\n\r\nexport const initApp = async ({ stores, i18n, platform }: InitApp) => {\r\n    try {\r\n        await checkCodePush();\r\n        const { setBanners, setAuthData, setVersion, setInited, setNotificationToken } = stores.appStore;\r\n        // load resources\r\n        await Font\r\n            .loadAsync({\r\n                'Roboto': require('native-base/Fonts/Roboto.ttf'),\r\n                'Roboto_medium': require('native-base/Fonts/Roboto_medium.ttf'),\r\n                \"space-mono\": require(\"../assets/fonts/SpaceMono-Regular.ttf\"),\r\n                '\"Times New Roman\"': require(\"../assets/fonts/times-new-roman.ttf\"),\r\n                \"'Times New Roman'\": require(\"../assets/fonts/times-new-roman.ttf\"),\r\n                '\"Calibri\",sans-serif': require(\"../assets/fonts/calibri.ttf\"),\r\n                \"'Calibri',sans-serif\": require(\"../assets/fonts/calibri.ttf\"),\r\n            });\r\n\r\n        const banners = await getBanners();\r\n        setBanners(banners);\r\n\r\n        const localLang = await getLocalLang();\r\n        i18n.changeLanguage(localLang);\r\n\r\n        \r\n        const { clinicId, token } = await getAuthData();\r\n\r\n        console.log( 'clinic id: ', clinicId, 'token: ', token);\r\n\r\n        if (token && clinicId) {\r\n            setAuthData(token, clinicId);\r\n        }\r\n\r\n        const notificationToken = await registerNofiticationToken();\r\n        setNotificationToken(notificationToken);\r\n        console.log(notificationToken);\r\n\r\n        setVersion(Constants.manifest.version);\r\n\r\n        setInited();\r\n    }\r\n    catch (error) {\r\n\r\n        console.log('error in side initApp', error.message);\r\n        return error.message;\r\n    }\r\n}\r\n\r\nexport const initVerify = async ({ stores, navigation, i18n }: InitPage) => {\r\n    try {\r\n        const { clinicId, token, setSetting, setCurrentTab } = stores.appStore;\r\n        const { resetData } = stores.dataStore;\r\n        const { setInsurers } = stores.configStore;\r\n\r\n        setCurrentTab('Verify');\r\n        resetData();\r\n\r\n        const insurers = await ClinicService.getInsurers({ token, i18n });\r\n        setInsurers(insurers);\r\n\r\n        const setting = await ClinicService.getSettings({ clinicId, token, i18n });\r\n        setSetting(setting);\r\n\r\n        console.log('inside initVerify, about to navigation reset to verifyInsurer');\r\n\r\n        navigation.reset({\r\n            index: 0,\r\n            routes: [{ name: 'VerifyInsurer' }]\r\n        })\r\n        // navigation.navigate('VerifyBenefit');\r\n    } catch (error) {\r\n        return error.message\r\n    }\r\n}\r\n\r\nexport const initModify = async ({ stores, navigation, i18n }: InitPage) => {\r\n    try {\r\n        const { clinicId, token, setSetting, setCurrentTab } = stores.appStore;\r\n        const { resetData } = stores.dataStore;\r\n        const { setInsurers } = stores.configStore;\r\n\r\n        setCurrentTab('Modify');\r\n        resetData();\r\n\r\n        const insurers = await ClinicService.getInsurers({ token, i18n });\r\n        setInsurers(insurers);\r\n\r\n        const setting = await ClinicService.getSettings({ clinicId, token, i18n });\r\n        setSetting(setting);\r\n\r\n        navigation.reset({\r\n            index: 0,\r\n            routes: [{ name: 'ModifyPendingList' }]\r\n        });\r\n    } catch (error) {\r\n        return error.message\r\n    }\r\n}\r\n\r\nexport const initRecords = async ({ stores, navigation, i18n }: InitPage) => {\r\n    try {\r\n        const { clinicId, token } = stores.appStore;\r\n        const { setInsurers, setBenefits } = stores.configStore;\r\n\r\n        const insurers = await ClinicService.getInsurers({ token, i18n });\r\n        setInsurers(insurers);\r\n\r\n        const benefits = await getBenefits({ token, clinicId });\r\n        setBenefits(benefits);\r\n        navigation.reset({\r\n            index: 0,\r\n            routes: [{ name: 'RecordList' }]\r\n        });\r\n    } catch (error) {\r\n        return error.message;\r\n    }\r\n}\r\n\r\nexport const initSetting = async ({ stores, navigation, i18n }: InitPage) => {\r\n    try {\r\n        const { clinicId, token, setSetting } = stores.appStore;\r\n        const setting = await ClinicService.getSettings({ clinicId, token, i18n });\r\n        setSetting(setting);\r\n    }\r\n    catch (error) {\r\n        return error.message;\r\n    }\r\n}\r\n\r\nexport const goSelectBenefit = async ({ stores, insurer, insurerName, navigation }: GoSelectBenefit) => {\r\n    const { currentTab } = stores.appStore;\r\n    const { values, setValues } = stores.dataStore;\r\n    values.insurerId = insurer;\r\n    values.insurerName = insurerName;\r\n    setValues(values);\r\n    navigation.navigate(`${currentTab}Benefit`);\r\n}\r\n\r\nexport const goSelectDoctor = async ({ stores, benefit, benefitName, navigation }: GoSelectDoctor) => {\r\n    const { currentTab } = stores.appStore;\r\n    const { values, setValues } = stores.dataStore;\r\n    values.benefitCode = benefit;\r\n    values.benefitName = benefitName;\r\n    setValues(values);\r\n    navigation.navigate(`${currentTab}Doctor`);\r\n}\r\n\r\nexport const goSelectMethod = async ({ stores, doctorId, navigation, i18n }: GoSelectMethod) => {\r\n    try {\r\n        // get doctor insurer list first\r\n        const { currentTab, setting, token } = stores.appStore;\r\n        const { values, setValues, setMethod, setDoctorInsurerIds } = stores.dataStore;\r\n\r\n        const insurerIds = await ClinicService.getDoctorInsurers({ token, doctorId, i18n });\r\n        setDoctorInsurerIds(insurerIds);\r\n\r\n        values.doctorId = doctorId;\r\n        setValues(values);\r\n\r\n        if (Config.method.physicalCard && setting.method.physicalCard) {\r\n            navigation.navigate(`${currentTab}Method`);\r\n        }\r\n        else {\r\n            setMethod('QrCode');\r\n            navigation.navigate(`${currentTab}QrScan`);\r\n        }\r\n    } catch (error) {\r\n        return error.message\r\n    }\r\n}\r\n\r\nexport const goQrScanner = async ({ stores, navigation }: GoPage) => {\r\n    const { currentTab } = stores.appStore;\r\n    const { setMethod } = stores.dataStore;\r\n    setMethod('QrCode');\r\n    navigation.navigate(`${currentTab}QrScan`);\r\n}\r\n\r\nexport const goPhysicalCard = async ({ stores, navigation }: GoPage) => {\r\n    const { currentTab } = stores.appStore;\r\n    const { setMethod } = stores.dataStore;\r\n    setMethod('PhysicalCard');\r\n    navigation.navigate(`${currentTab}PhysicalCard`);\r\n}\r\n\r\nexport const goSelectExtraMed = ({ stores, navigation, diagnosis }: GoSelectExtraMed) => {\r\n    const valid = validateDiagnosis(diagnosis);\r\n    if (!valid) {\r\n        return 'Modify.InvalidNumberOfDiagnosis';\r\n    }\r\n\r\n    const { values, setValues } = stores.dataStore;\r\n    values.diagnosis = diagnosis;\r\n    setValues(values);\r\n    navigation.navigate('SelectExtraMed');\r\n}\r\n\r\nexport const goDetailPage = ({ stores, navigation, extraMed }: GoDetailPage) => {\r\n    const valid = validateExtraMed(extraMed);\r\n    if (!valid) {\r\n        return 'Modify.InvalidExtraMedFields';\r\n    }\r\n\r\n    const { setting } = stores.appStore;\r\n    const { method, values, setValues } = stores.dataStore;\r\n\r\n    setValues({\r\n        ...values,\r\n        extraMed\r\n    });\r\n\r\n    if (setting.method.physicalCard && method === 'PhysicalCard') {\r\n        navigation.navigate('PatientDetail');\r\n    }\r\n    else {\r\n        navigation.navigate('ConfirmPay');\r\n    }\r\n}\r\n\r\nexport const goConfirmPayPage = ({ stores, navigation, signature }: GoConfirmPayPage) => {\r\n    const { values, setValues } = stores.dataStore;\r\n    values.signature = signature;\r\n    setValues(values);\r\n    navigation.navigate('ConfirmPay');\r\n}\r\n\r\nexport const goTab = ({ navigation, tabName }: GoTab) => {\r\n    const state = navigation.dangerouslyGetState();\r\n    const tab = state.routes.find((route: any) => route.name === tabName);\r\n    const routeName = _.get(tab, 'state.routes[0].name', tabName);\r\n    navigation.navigate(routeName);\r\n}\r\n\r\nexport const goTransactionSuccess = ({ stores, navigation }: GoPage) => {\r\n    const { method } = stores.dataStore;\r\n    if (method === 'PhysicalCard') {\r\n        return navigation.navigate('TransactionSuccess');\r\n    }\r\n\r\n    return navigation.navigate('Record');\r\n}\r\n\r\nexport const goRecord = ({ stores, navigation, record }: GoRecord) => {\r\n    const { setRecord } = stores.dataStore;\r\n    setRecord(record);\r\n    navigation.navigate('RecordDetail');\r\n}\r\n\r\nexport const goNews = ({ stores, navigation, news }: GoNews) => {\r\n    const { setNews } = stores.appStore;\r\n    setNews(news);\r\n    navigation.navigate('NewsDetail');\r\n}\r\n\r\nexport const goPromotion = ({ stores, navigation, promotion }: GoPromotion) => {\r\n    const { setPromotion } = stores.appStore;\r\n    setPromotion(promotion);\r\n    navigation.navigate('PromotionDetail');\r\n}\r\n\r\nexport const getReminders = async ({ stores, navigation, i18n, platform }: GetReminders) => {\r\n    try {\r\n        const { clinicId, token, setReminders, setVersion, setNewsList } = stores.appStore;\r\n\r\n        const { version, updateVersion, installVersion, updated } = await checkVersion({ i18n, platform });\r\n        setVersion(version);\r\n        let versionReminders: Reminder[] = [];\r\n\r\n        if (installVersion) {\r\n            versionReminders = [{\r\n                id: 'install',\r\n                newsId: '',\r\n                descriptionEn: `Here is a updated version(v${installVersion}) published to app store, it is advised to install the latest version.`,\r\n                descriptionChi: `最新版本(v${installVersion})已上線，建議前往下戴最新版本`,\r\n                titleEn: 'System Update',\r\n                titleChi: '系統更新'\r\n            }];\r\n        }\r\n        else if (updateVersion) {\r\n            versionReminders = [{\r\n                id: 'updated',\r\n                newsId: '',\r\n                descriptionEn: `Here is a updated version(v${updateVersion}), Are you want to updated?`,\r\n                descriptionChi: `最新版本(v${updateVersion})已上線，是否更新`,\r\n                titleEn: 'System Update',\r\n                titleChi: '系統更新'\r\n            }];\r\n        }\r\n        else if (updated.length) {\r\n            versionReminders = [{\r\n                id: 'updatedDetail',\r\n                newsId: '',\r\n                descriptionEn: _.map(updated, 'descriptionEn').join('\\n'),\r\n                descriptionChi: _.map(updated, 'descriptionChi').join('\\n'),\r\n                titleEn: 'System Update',\r\n                titleChi: '系統更新'\r\n            }];\r\n        }\r\n\r\n        const reminders = await getRemindersApi({ clinicId, token, i18n });\r\n        setReminders(_.concat(versionReminders, reminders));\r\n\r\n        const news = await getNewsListApi({ i18n, token });\r\n        setNewsList(news);\r\n\r\n    } catch (error) {\r\n        // do nothing\r\n        console.error(error);\r\n    }\r\n}\r\n\r\nexport const readReminders = ({ stores }: ReadReminders) => {\r\n    stores.appStore.setReadReminders(true);\r\n}\r\n\r\nexport const initNewsList = async ({ stores, navigation, i18n }: InitPage) => {\r\n    try {\r\n        const { token, setNewsList } = stores.appStore;\r\n        const newsList = await getNewsListApi({ i18n, token });\r\n        setNewsList(newsList);\r\n    } catch (error) {\r\n        return error.message\r\n    }\r\n}\r\n\r\nexport const initNewsDetail = async ({ stores, navigation, i18n }: InitPage) => {\r\n    try {\r\n        const { token, news, setNews } = stores.appStore;\r\n        const newNews = await getNewsDetail({ i18n, token, newsId: news.id });\r\n        setNews(newNews);\r\n    } catch (error) {\r\n        return error.message\r\n    }\r\n}\r\n\r\nexport const initPersonalProfile = async ({ stores, navigation, i18n }: InitPage) => {\r\n    try {\r\n        const { token, clinicId } = stores.appStore;\r\n        const { setPersonalProfile } = stores.dataStore;\r\n        const profile = await ClinicService.getPersonalProfile({ clinicId, token });\r\n        setPersonalProfile(profile);\r\n    } catch (error) {\r\n        return error.message\r\n    }\r\n}\r\n\r\nexport const initClinicProfile = async ({ stores, navigation, i18n }: InitPage) => {\r\n    try {\r\n        const { token, clinicId } = stores.appStore;\r\n        const { setClinic } = stores.dataStore;\r\n        const clinic = await ClinicService.getClinicProfile({ clinicId, token });\r\n        setClinic(clinic);\r\n    } catch (error) {\r\n        return error.message\r\n    }\r\n}\r\n\r\nexport const initAboutUs = async ({ stores, navigation, i18n }: InitPage) => {\r\n    try {\r\n        const { setAboutUs } = stores.appStore;\r\n        const aboutUs = await getAboutUs();\r\n        setAboutUs(aboutUs);\r\n    } catch (error) {\r\n        return error.message\r\n    }\r\n}\r\n\r\nexport const initDoctorProfile = async ({ stores, navigation, i18n }: InitPage) => {\r\n    try {\r\n        const { token, clinicId } = stores.appStore;\r\n        const { setDoctorProfileList } = stores.dataStore;\r\n        const doctorProfileList = await ClinicService.getDoctorList({ clinicId, token });\r\n        setDoctorProfileList(doctorProfileList);\r\n    } catch (error) {\r\n        return error.message\r\n    }\r\n}\r\n\r\nexport const initDoctorProfileDetail = async ({ stores, navigation, i18n }: InitPage) => {\r\n    try {\r\n        const { token, clinicId } = stores.appStore;\r\n        const { doctorProfile, setDoctorProfile } = stores.dataStore;\r\n        const newDoctorProfile = await ClinicService.getDoctorProfile({ clinicId, token, doctor: doctorProfile });\r\n        setDoctorProfile(newDoctorProfile);\r\n    } catch (error) {\r\n        return error.message\r\n    }\r\n}\r\n\r\nexport const initPromotionList = async ({ stores, navigation, i18n }: InitPage) => {\r\n    try {\r\n        const { token, clinicId, setPromotionList } = stores.appStore;\r\n        const promotionList = await getPromotionList({ clinicId, token });\r\n        setPromotionList(promotionList);\r\n    } catch (error) {\r\n        return error.message\r\n    }\r\n}\r\n\r\nexport const downloadReport = async ({ stores, navigation, year, month }: DownloadReport) => {\r\n    try {\r\n        const { token, clinicId } = stores.appStore;\r\n        await ClinicService.downloadReport({ token, clinicId, year, month });\r\n    } catch (error) {\r\n        return error.message\r\n    }\r\n}\r\n\r\nexport const goDoctorProfile = async ({ stores, navigation, doctorProfile }: GoDoctorProfile) => {\r\n    const { setDoctorProfile } = stores.dataStore;\r\n    setDoctorProfile(doctorProfile);\r\n    navigation.navigate('DoctorProfile');\r\n}\r\n\r\nexport const saveSettings = async ({ stores, navigation, settings, i18n }: SaveSettings) => {\r\n    try {\r\n        const { token, clinicId } = stores.appStore;\r\n        await ClinicService.saveSettings({ token, clinicId, settings, i18n });\r\n    } catch (error) {\r\n        return error.message\r\n    }\r\n}\r\n\r\nexport const changePassword = async ({ stores, oldPassword, newPassword,token, i18n }: ChangePassword) => {\r\n    try {\r\n        const { token, clinicId } = stores.appStore;\r\n        await ClinicService.changePassword({ clinicId, oldPassword, newPassword, token,i18n });\r\n    } catch (error) {\r\n        return error.message\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const logout = async ({ stores, navigation, i18n }: Logout) => {\r\n    const { resetData, notificationToken, token, clinicId } = stores.appStore;\r\n    await updateNotificationToken({ notificationToken, token, clinicId, i18n });\r\n    resetData();\r\n    await AsyncStorage.removeItem('token');\r\n    await AsyncStorage.removeItem('clinic_id');\r\n}\r\n\r\nexport const updateApp = async ({ i18n }: UpdateApp) => {\r\n    try {\r\n        // check again ensure it can update first\r\n        const { updateVersion } = await checkVersion({ i18n, platform: 'android' });\r\n        if (!updateVersion) {\r\n            throw new Error('Common.UnknownSystemError');\r\n        }\r\n\r\n        await Updates.fetchUpdateAsync();\r\n    } catch (error) {\r\n        return error.message;\r\n    }\r\n}\r\n\r\nexport const restartApp = () => {\r\n    Updates.reloadAsync();\r\n}\r\n\r\nexport const initCooperators = async ({ stores, navigation, i18n, platform }: InitCooperators) => {\r\n    try {\r\n        const { clinicId, token, setCooperators, setNewProducts } = stores.appStore;\r\n        const cooperators = await getCooperatorsApi({ clinicId, token, i18n });\r\n        const newProducts = await getNewProductsApi({ clinicId, token, i18n });\r\n\r\n        setCooperators(cooperators);\r\n        setNewProducts(newProducts);\r\n    } catch (error) {\r\n        return error.message;\r\n    }\r\n}\r\n\r\nexport const initResourceCenter = async ({ stores, navigation, i18n, platform }: InitResourceCenter) => {\r\n    try {\r\n        const { clinicId, token, setNewResources } = stores.appStore;\r\n        const resources = await getResourcesApi({ clinicId, token, i18n });\r\n        setNewResources(resources);\r\n    } catch (error) {\r\n        return error.message;\r\n    }\r\n}\r\n\r\n\r\nexport const goNextAfterSelectingPendingItem=({ stores, navigation,pendingItem}:GoNextAfterSelectingPendingItem)=>{\r\n    const {\r\n        benefitCode,\r\n        doctor,\r\n        insurerId,\r\n        extraMed,\r\n        extraMedLimit,\r\n        copayment,\r\n        patientName,\r\n        patientId\r\n    } = pendingItem;\r\n    \r\n\r\n    const {values,setValues,setMethod}=stores.dataStore;\r\n    const { insurers } = stores.configStore;\r\n    const {setPendingItem} = stores.dataStore;\r\n\r\n\r\n    setValues({\r\n        ...values,\r\n        benefitCode,\r\n        doctorId:doctor.code,\r\n        insurerId:insurerId.toString(), //cater for legacy problem when store 's insurer id is defined as string\r\n        extraMed,\r\n        extraMedLimit,\r\n        copayment,\r\n        patientName,\r\n        member:patientId\r\n    });\r\n\r\n\r\n    setPendingItem(pendingItem);\r\n    const isQR = pendingItem.verifyType === 1;\r\n\r\n    const insurer = findInsurer(insurers, insurerId) !;\r\n\r\n    if (isQR && !insurer.shouldInputPayToken){\r\n        setMethod('QrCode');\r\n        navigation.navigate('SelectDiagnosis');\r\n        return;\r\n    }\r\n    if (isQR) {\r\n        setMethod('QrCode');\r\n        navigation.navigate('ModifyQrScan');\r\n        return;\r\n    } else {\r\n        setMethod('PhysicalCard');\r\n        navigation.navigate('SelectDiagnosis');\r\n        return;\r\n    }\r\n}\r\n\r\nexport const initFavoriteDiagnosis = async ({ stores, navigation, i18n, platform }: InitFavoriteDiagnosis) => {\r\n    try {\r\n        const { clinicId, token, setNewFavoriteDiagnosis} = stores.appStore;\r\n        const favoriteDiagnosis = await getFavoriteDiagnosisApi({ clinicId, token, i18n });\r\n        setNewFavoriteDiagnosis(favoriteDiagnosis);\r\n    } catch (error) {\r\n        return error.message;\r\n    }\r\n}\r\n\r\nexport const toggleFavoriteDiagnosis = async ({ stores, navigation, i18n, platform, diagnosisId, type }: ToggleFavoriteDiagnosis) => {\r\n    try {\r\n        const { clinicId, token, setNewFavoriteDiagnosis} = stores.appStore;\r\n        const favoriteDiagnosis = await toggleFavoriteDiagnosisApi({ clinicId, token, i18n, diagnosisId, type });\r\n        setNewFavoriteDiagnosis(favoriteDiagnosis);\r\n        return favoriteDiagnosis;\r\n    } catch (error) {\r\n        return error.message;\r\n    }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}