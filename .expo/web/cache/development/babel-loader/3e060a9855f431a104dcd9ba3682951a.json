{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nimport { v4 as uuidv4 } from 'uuid';\nimport { ExecutionEnvironment } from \"./Constants.types\";\nvar ID_KEY = 'EXPO_CONSTANTS_INSTALLATION_ID';\n\nvar _sessionId = uuidv4();\n\nfunction getBrowserName() {\n  if (canUseDOM) {\n    var agent = navigator.userAgent.toLowerCase();\n\n    if (agent.includes('edge')) {\n      return 'Edge';\n    } else if (agent.includes('edg')) {\n      return 'Chromium Edge';\n    } else if (agent.includes('opr') && !!window['opr']) {\n      return 'Opera';\n    } else if (agent.includes('chrome') && !!window['chrome']) {\n      return 'Chrome';\n    } else if (agent.includes('trident')) {\n      return 'IE';\n    } else if (agent.includes('firefox')) {\n      return 'Firefox';\n    } else if (agent.includes('safari')) {\n      return 'Safari';\n    }\n  }\n\n  return undefined;\n}\n\nexport default {\n  get name() {\n    return 'ExponentConstants';\n  },\n\n  get appOwnership() {\n    return null;\n  },\n\n  get executionEnvironment() {\n    return ExecutionEnvironment.Bare;\n  },\n\n  get installationId() {\n    var installationId;\n\n    try {\n      installationId = localStorage.getItem(ID_KEY);\n\n      if (installationId == null || typeof installationId !== 'string') {\n        installationId = uuidv4();\n        localStorage.setItem(ID_KEY, installationId);\n      }\n    } catch (error) {\n      installationId = _sessionId;\n    } finally {\n      return installationId;\n    }\n  },\n\n  get sessionId() {\n    return _sessionId;\n  },\n\n  get platform() {\n    return {\n      web: canUseDOM ? {\n        ua: navigator.userAgent\n      } : undefined\n    };\n  },\n\n  get isHeadless() {\n    if (!canUseDOM) return true;\n    return /\\bHeadlessChrome\\//.test(navigator.userAgent);\n  },\n\n  get isDevice() {\n    return true;\n  },\n\n  get expoVersion() {\n    return this.manifest.sdkVersion || null;\n  },\n\n  get linkingUri() {\n    if (canUseDOM) {\n      return location.origin;\n    } else {\n      return '';\n    }\n  },\n\n  get expoRuntimeVersion() {\n    return this.expoVersion;\n  },\n\n  get deviceName() {\n    return getBrowserName();\n  },\n\n  get nativeAppVersion() {\n    return null;\n  },\n\n  get nativeBuildVersion() {\n    return null;\n  },\n\n  get systemFonts() {\n    return [];\n  },\n\n  get statusBarHeight() {\n    return 0;\n  },\n\n  get deviceYearClass() {\n    return null;\n  },\n\n  get manifest() {\n    return process.env.APP_MANIFEST || {};\n  },\n\n  get experienceUrl() {\n    if (canUseDOM) {\n      return location.origin;\n    } else {\n      return '';\n    }\n  },\n\n  get debugMode() {\n    return __DEV__;\n  },\n\n  getWebViewUserAgentAsync: function getWebViewUserAgentAsync() {\n    return _regeneratorRuntime.async(function getWebViewUserAgentAsync$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!canUseDOM) {\n              _context.next = 4;\n              break;\n            }\n\n            return _context.abrupt(\"return\", navigator.userAgent);\n\n          case 4:\n            return _context.abrupt(\"return\", null);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n};","map":{"version":3,"sources":["../src/ExponentConstants.web.ts"],"names":[],"mappings":"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","sourcesContent":["import { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport {\n  ExecutionEnvironment,\n  NativeConstants,\n  PlatformManifest,\n  WebManifest,\n} from './Constants.types';\n\nconst ID_KEY = 'EXPO_CONSTANTS_INSTALLATION_ID';\n\ndeclare var __DEV__: boolean;\ndeclare var process: { env: any };\ndeclare var navigator: Navigator;\ndeclare var location: Location;\ndeclare var localStorage: Storage;\n\nconst _sessionId = uuidv4();\n\nfunction getBrowserName(): string | undefined {\n  if (canUseDOM) {\n    const agent = navigator.userAgent.toLowerCase();\n    if (agent.includes('edge')) {\n      return 'Edge';\n    } else if (agent.includes('edg')) {\n      return 'Chromium Edge';\n    } else if (agent.includes('opr') && !!window['opr']) {\n      return 'Opera';\n    } else if (agent.includes('chrome') && !!window['chrome']) {\n      return 'Chrome';\n    } else if (agent.includes('trident')) {\n      return 'IE';\n    } else if (agent.includes('firefox')) {\n      return 'Firefox';\n    } else if (agent.includes('safari')) {\n      return 'Safari';\n    }\n  }\n\n  return undefined;\n}\n\nexport default {\n  get name(): string {\n    return 'ExponentConstants';\n  },\n  get appOwnership() {\n    return null;\n  },\n  get executionEnvironment() {\n    return ExecutionEnvironment.Bare;\n  },\n  get installationId(): string {\n    let installationId;\n    try {\n      installationId = localStorage.getItem(ID_KEY);\n      if (installationId == null || typeof installationId !== 'string') {\n        installationId = uuidv4();\n        localStorage.setItem(ID_KEY, installationId as string);\n      }\n    } catch (error) {\n      installationId = _sessionId;\n    } finally {\n      return installationId;\n    }\n  },\n  get sessionId(): string {\n    return _sessionId;\n  },\n  get platform(): PlatformManifest {\n    return { web: canUseDOM ? { ua: navigator.userAgent } : undefined };\n  },\n  get isHeadless(): boolean {\n    if (!canUseDOM) return true;\n\n    return /\\bHeadlessChrome\\//.test(navigator.userAgent);\n  },\n  get isDevice(): true {\n    // TODO: Bacon: Possibly want to add information regarding simulators\n    return true;\n  },\n  get expoVersion(): string | null {\n    return this.manifest.sdkVersion || null;\n  },\n  get linkingUri(): string {\n    if (canUseDOM) {\n      // On native this is `exp://`\n      // On web we should use the protocol and hostname (location.origin)\n      return location.origin;\n    } else {\n      return '';\n    }\n  },\n  get expoRuntimeVersion(): string | null {\n    return this.expoVersion;\n  },\n  get deviceName(): string | undefined {\n    return getBrowserName();\n  },\n  get nativeAppVersion(): null {\n    return null;\n  },\n  get nativeBuildVersion(): null {\n    return null;\n  },\n  get systemFonts(): string[] {\n    // TODO: Bacon: Maybe possible.\n    return [];\n  },\n  get statusBarHeight(): number {\n    return 0;\n  },\n  get deviceYearClass(): number | null {\n    // TODO: Bacon: The android version isn't very accurate either, maybe we could try and guess this value.\n    return null;\n  },\n  get manifest(): WebManifest {\n    // This is defined by @expo/webpack-config.\n    // If your site is bundled with a different config then you may not have access to the app.json automatically.\n    return process.env.APP_MANIFEST || {};\n  },\n  get experienceUrl(): string {\n    if (canUseDOM) {\n      return location.origin;\n    } else {\n      return '';\n    }\n  },\n  get debugMode(): boolean {\n    return __DEV__;\n  },\n  async getWebViewUserAgentAsync(): Promise<string | null> {\n    if (canUseDOM) {\n      return navigator.userAgent;\n    } else {\n      return null;\n    }\n  },\n} as NativeConstants;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}