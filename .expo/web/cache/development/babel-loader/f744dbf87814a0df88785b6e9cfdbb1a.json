{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"I:\\\\Workspace\\\\mediWS\\\\mccWS\\\\frontend-clinic-app\\\\src\\\\App.tsx\";\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect, useState } from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport CustomErrorBoundary from \"./errors\";\nimport AuthNavigator from \"./routers/auth\";\nimport { observer } from 'mobx-react';\nimport { initApp } from \"./actions/app\";\nimport { useStores } from \"./stores\";\nimport { useTranslation } from 'react-i18next';\nimport Loading from \"./pages/loading\";\nimport MainNavigator from \"./routers/main\";\nimport ErrorPage from \"./pages/error\";\nimport * as Notifications from 'expo-notifications';\nNotifications.setNotificationHandler({\n  handleNotification: function handleNotification() {\n    return _regeneratorRuntime.async(function handleNotification$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", {\n              shouldShowAlert: true,\n              shouldPlaySound: true,\n              shouldSetBadge: false\n            });\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n});\nvar App = observer(function () {\n  var stores = useStores();\n\n  var _useTranslation = useTranslation(),\n      i18n = _useTranslation.i18n,\n      t = _useTranslation.t;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      error = _useState4[0],\n      setError = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      appState = _useState6[0],\n      setAppState = _useState6[1];\n\n  useEffect(function () {\n    StatusBar.setBarStyle(\"light-content\");\n    init();\n  }, []);\n\n  var init = function init() {\n    var errorMsg;\n    return _regeneratorRuntime.async(function init$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            setLoading(true);\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(initApp({\n              stores: stores,\n              i18n: i18n,\n              platform: Platform.OS\n            }));\n\n          case 3:\n            errorMsg = _context2.sent;\n            setLoading(false);\n            console.log('errorMsg in App.tsx:', errorMsg);\n\n            if (errorMsg) {\n              setError(errorMsg);\n            }\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  if (loading) {\n    return React.createElement(CustomErrorBoundary, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }\n    }, React.createElement(Loading, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }\n    }));\n  }\n\n  if (error) {\n    return React.createElement(CustomErrorBoundary, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }\n    }, React.createElement(ErrorPage, {\n      title: error,\n      onRetry: init,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }\n    }));\n  }\n\n  if (!stores.appStore.token) {\n    return React.createElement(CustomErrorBoundary, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }\n    }, React.createElement(AuthNavigator, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }\n    }));\n  }\n\n  return React.createElement(CustomErrorBoundary, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }, React.createElement(MainNavigator, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  }));\n});\nexport default App;","map":{"version":3,"names":["React","useEffect","useState","CustomErrorBoundary","AuthNavigator","observer","initApp","useStores","useTranslation","Loading","MainNavigator","ErrorPage","Notifications","setNotificationHandler","handleNotification","shouldShowAlert","shouldPlaySound","shouldSetBadge","App","stores","i18n","t","loading","setLoading","error","setError","appState","setAppState","StatusBar","setBarStyle","init","platform","Platform","OS","errorMsg","console","log","appStore","token"],"sources":["I:/Workspace/mediWS/mccWS/frontend-clinic-app/src/App.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport { Platform, StatusBar, AppState } from \"react-native\";\r\nimport CustomErrorBoundary from './errors';\r\nimport AuthNavigator from './routers/auth';\r\nimport { observer } from 'mobx-react';\r\nimport { initApp, checkCodePush } from './actions/app';\r\nimport { useStores } from './stores';\r\nimport { useTranslation } from 'react-i18next';\r\nimport Loading from './pages/loading';\r\nimport MainNavigator from './routers/main';\r\nimport ErrorPage from './pages/error';\r\nimport * as Notifications from 'expo-notifications';\r\nimport * as _ from 'lodash';\r\nimport { useNavigation } from '@react-navigation/native';\r\n// import { useNavigation } from '@react-navigation/native';\r\n\r\nNotifications.setNotificationHandler({\r\n    handleNotification: async () => ({\r\n        shouldShowAlert: true,\r\n        shouldPlaySound: true,\r\n        shouldSetBadge: false,\r\n    }),\r\n});\r\n\r\nconst App = observer(() => {\r\n    const stores = useStores();\r\n    const { i18n, t } = useTranslation();\r\n\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState('');\r\n    const [appState, setAppState] = useState('');\r\n\r\n    useEffect(() => {\r\n        StatusBar.setBarStyle(\"light-content\");\r\n        init();\r\n\r\n        // AppState.addEventListener('change', handleAppStateChange);\r\n\r\n        // // returned function will be called on component unmount \r\n        // return () => {\r\n        //     AppState.removeEventListener('change', handleAppStateChange);\r\n        // }\r\n    }, []);\r\n\r\n    // const handleAppStateChange = async (nextAppState: string) => {\r\n    //     if (appState.match(/inactive|background/) && nextAppState === 'active') {\r\n    //         console.log('App has come to the foreground!')\r\n    //     }\r\n    //     else {\r\n    //         await checkCodePush();\r\n    //     }\r\n    //     setAppState(nextAppState);\r\n    // };\r\n\r\n    const init = async () => {\r\n        setLoading(true);\r\n        const errorMsg = await initApp({ stores, i18n, platform: Platform.OS });\r\n        setLoading(false);\r\n        console.log('errorMsg in App.tsx:', errorMsg);\r\n\r\n        if (errorMsg) {\r\n            setError(errorMsg);\r\n        }\r\n    }\r\n\r\n    if (loading) {\r\n        return (\r\n            <CustomErrorBoundary>\r\n                <Loading />\r\n            </CustomErrorBoundary>\r\n        );\r\n    }\r\n\r\n    if (error) {\r\n        return (\r\n            <CustomErrorBoundary>\r\n                <ErrorPage title={error} onRetry={init} />\r\n            </CustomErrorBoundary>\r\n        );\r\n    }\r\n\r\n    if (!stores.appStore.token) {\r\n        return (\r\n            <CustomErrorBoundary>\r\n                <AuthNavigator />\r\n            </CustomErrorBoundary>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <CustomErrorBoundary>\r\n            <MainNavigator />\r\n        </CustomErrorBoundary>\r\n    )\r\n});\r\n\r\nexport default App;"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAAmCC,QAAnC,QAAmD,OAAnD;;;AAEA,OAAOC,mBAAP;AACA,OAAOC,aAAP;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,SAASC,OAAT;AACA,SAASC,SAAT;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,OAAOC,OAAP;AACA,OAAOC,aAAP;AACA,OAAOC,SAAP;AACA,OAAO,KAAKC,aAAZ,MAA+B,oBAA/B;AAKAA,aAAa,CAACC,sBAAd,CAAqC;EACjCC,kBAAkB,EAAE;IAAA;MAAA;QAAA;UAAA;YAAA,iCAAa;cAC7BC,eAAe,EAAE,IADY;cAE7BC,eAAe,EAAE,IAFY;cAG7BC,cAAc,EAAE;YAHa,CAAb;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA;AADa,CAArC;AAQA,IAAMC,GAAG,GAAGb,QAAQ,CAAC,YAAM;EACvB,IAAMc,MAAM,GAAGZ,SAAS,EAAxB;;EACA,sBAAoBC,cAAc,EAAlC;EAAA,IAAQY,IAAR,mBAAQA,IAAR;EAAA,IAAcC,CAAd,mBAAcA,CAAd;;EAEA,gBAA8BnB,QAAQ,CAAC,KAAD,CAAtC;EAAA;EAAA,IAAOoB,OAAP;EAAA,IAAgBC,UAAhB;;EACA,iBAA0BrB,QAAQ,CAAC,EAAD,CAAlC;EAAA;EAAA,IAAOsB,KAAP;EAAA,IAAcC,QAAd;;EACA,iBAAgCvB,QAAQ,CAAC,EAAD,CAAxC;EAAA;EAAA,IAAOwB,QAAP;EAAA,IAAiBC,WAAjB;;EAEA1B,SAAS,CAAC,YAAM;IACZ2B,SAAS,CAACC,WAAV,CAAsB,eAAtB;IACAC,IAAI;EAQP,CAVQ,EAUN,EAVM,CAAT;;EAsBA,IAAMA,IAAI,GAAG,SAAPA,IAAO;IAAA;IAAA;MAAA;QAAA;UAAA;YACTP,UAAU,CAAC,IAAD,CAAV;YADS;YAAA,iCAEcjB,OAAO,CAAC;cAAEa,MAAM,EAANA,MAAF;cAAUC,IAAI,EAAJA,IAAV;cAAgBW,QAAQ,EAAEC,QAAQ,CAACC;YAAnC,CAAD,CAFrB;;UAAA;YAEHC,QAFG;YAGTX,UAAU,CAAC,KAAD,CAAV;YACAY,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCF,QAApC;;YAEA,IAAIA,QAAJ,EAAc;cACVT,QAAQ,CAACS,QAAD,CAAR;YACH;;UARQ;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAb;;EAWA,IAAIZ,OAAJ,EAAa;IACT,OACI,oBAAC,mBAAD;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACI,oBAAC,OAAD;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EADJ,CADJ;EAKH;;EAED,IAAIE,KAAJ,EAAW;IACP,OACI,oBAAC,mBAAD;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACI,oBAAC,SAAD;MAAW,KAAK,EAAEA,KAAlB;MAAyB,OAAO,EAAEM,IAAlC;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EADJ,CADJ;EAKH;;EAED,IAAI,CAACX,MAAM,CAACkB,QAAP,CAAgBC,KAArB,EAA4B;IACxB,OACI,oBAAC,mBAAD;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACI,oBAAC,aAAD;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EADJ,CADJ;EAKH;;EAED,OACI,oBAAC,mBAAD;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACI,oBAAC,aAAD;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EADJ,CADJ;AAKH,CAtEmB,CAApB;AAwEA,eAAepB,GAAf"},"metadata":{},"sourceType":"module"}