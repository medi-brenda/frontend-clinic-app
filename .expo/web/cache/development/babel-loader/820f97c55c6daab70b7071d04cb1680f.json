{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { request } from \"../utils/request\";\nimport * as _ from 'lodash';\n\nvar verifyToken = function verifyToken(qrCode) {\n  var prerequisite = _.isString(qrCode) && _.startsWith(qrCode, 'V');\n\n  var appropriateLength = _.startsWith(qrCode, 'VZHP') ? 14 : 12;\n  return prerequisite && qrCode.length === appropriateLength;\n};\n\nexport var verifyQrCode = function verifyQrCode(_ref) {\n  var qrCode, token, clinicId, benefitCode, doctorId, i18n, resp;\n  return _regeneratorRuntime.async(function verifyQrCode$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          qrCode = _ref.qrCode, token = _ref.token, clinicId = _ref.clinicId, benefitCode = _ref.benefitCode, doctorId = _ref.doctorId, i18n = _ref.i18n;\n\n          if (verifyToken(qrCode)) {\n            _context.next = 3;\n            break;\n          }\n\n          throw new Error(\"\" + i18n.t(\"Scan.IncorrectCodeFormat\"));\n\n        case 3:\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(request({\n            url: 'verifyByPendingList',\n            data: {\n              clinic_id: clinicId,\n              doctor_id: doctorId,\n              benefit: benefitCode,\n              token: qrCode,\n              method: {\n                verify_type: 'verify_qr'\n              }\n            },\n            token: token,\n            i18n: i18n\n          }));\n\n        case 5:\n          resp = _context.sent;\n          return _context.abrupt(\"return\", {\n            copayment: resp.copayment,\n            extraMedLimit: resp.extra_med_limit,\n            insurerName: resp.insurer_name,\n            member: resp.member,\n            referenceLetter: resp.ref_letter,\n            token: qrCode,\n            insurerDescription: {\n              en: resp.insurer_description_en,\n              chi: resp.insurer_description_cn\n            }\n          });\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var verifyPhysicalCard = function verifyPhysicalCard(_ref2) {\n  var insurerId, policyNo, token, clinicId, benefitCode, doctorId, i18n, data;\n  return _regeneratorRuntime.async(function verifyPhysicalCard$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          insurerId = _ref2.insurerId, policyNo = _ref2.policyNo, token = _ref2.token, clinicId = _ref2.clinicId, benefitCode = _ref2.benefitCode, doctorId = _ref2.doctorId, i18n = _ref2.i18n;\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(request({\n            url: 'verifyByPendingList',\n            data: {\n              clinic_id: Number(clinicId),\n              doctor_id: Number(doctorId),\n              benefit: benefitCode,\n              insurer_id: Number(insurerId),\n              method: {\n                verify_type: 'verify_card'\n              },\n              member_key: policyNo\n            },\n            token: token,\n            i18n: i18n\n          }));\n\n        case 3:\n          data = _context2.sent;\n          return _context2.abrupt(\"return\", {\n            copayment: data.copayment,\n            extraMedLimit: data.extra_med_limit,\n            member: data.policy_number,\n            referenceLetter: data.ref_letter.toString(),\n            patientName: data.patient_name,\n            insurerDescription: {\n              en: data.insurer_description_en,\n              chi: data.insurer_description_cn\n            }\n          });\n\n        case 5:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};","map":{"version":3,"names":["request","_","verifyToken","qrCode","prerequisite","isString","startsWith","appropriateLength","length","verifyQrCode","token","clinicId","benefitCode","doctorId","i18n","Error","t","url","data","clinic_id","doctor_id","benefit","method","verify_type","resp","copayment","extraMedLimit","extra_med_limit","insurerName","insurer_name","member","referenceLetter","ref_letter","insurerDescription","en","insurer_description_en","chi","insurer_description_cn","verifyPhysicalCard","insurerId","policyNo","Number","insurer_id","member_key","policy_number","toString","patientName","patient_name"],"sources":["I:/Workspace/mediWS/mccWS/frontend-clinic-app/src/services/verify.ts"],"sourcesContent":["import { request } from \"../utils/request\";\r\nimport * as _ from 'lodash';\r\nimport { i18n } from \"i18next\";\r\n\r\ntype VerifyQrCode = {\r\n    qrCode: string,\r\n    token: string,\r\n    clinicId: string,\r\n    benefitCode: string,\r\n    doctorId: string,\r\n    i18n: i18n\r\n}\r\n\r\ntype VerifyPhysicalCard = {\r\n    insurerId: string,\r\n    policyNo: string,\r\n    token: string,\r\n    clinicId: string,\r\n    benefitCode: string,\r\n    doctorId: string,\r\n    i18n: i18n\r\n}\r\n\r\nconst verifyToken = (qrCode: string) => {\r\n    const prerequisite = _.isString(qrCode) && _.startsWith(qrCode, 'V');\r\n    const appropriateLength = _.startsWith(qrCode, 'VZHP') ? 14 : 12;\r\n    return prerequisite && qrCode.length === appropriateLength\r\n}\r\n\r\nexport const verifyQrCode = async ({ qrCode, token, clinicId, benefitCode, doctorId, i18n }: VerifyQrCode) => {\r\n    if (!verifyToken(qrCode)) {\r\n        throw new Error(`${i18n.t(\"Scan.IncorrectCodeFormat\")}`);\r\n    }\r\n\r\n    const resp = await request({\r\n        url: 'verifyByPendingList',\r\n        data: {\r\n            clinic_id: clinicId,\r\n            doctor_id: doctorId,\r\n            benefit: benefitCode,\r\n            token: qrCode,\r\n            method: {\r\n                verify_type: 'verify_qr'\r\n            }\r\n        },\r\n        token,\r\n        i18n\r\n    });\r\n    return {\r\n        copayment: resp.copayment,\r\n        extraMedLimit: resp.extra_med_limit,\r\n        insurerName: resp.insurer_name,\r\n        member: resp.member,\r\n        referenceLetter: resp.ref_letter,\r\n        token: qrCode,\r\n        insurerDescription:{\r\n            en:resp.insurer_description_en,\r\n            chi:resp.insurer_description_cn\r\n        }\r\n    };\r\n}\r\n\r\nexport const verifyPhysicalCard = async ({ insurerId, policyNo, token, clinicId, benefitCode, doctorId, i18n }: VerifyPhysicalCard) => {\r\n    const data = await request({\r\n        url: 'verifyByPendingList',\r\n        data: {\r\n            clinic_id: Number(clinicId),\r\n            doctor_id: Number(doctorId),\r\n            benefit: benefitCode,\r\n            insurer_id: Number(insurerId),\r\n            method: {\r\n                verify_type: 'verify_card'\r\n            },\r\n            member_key: policyNo\r\n        },\r\n        token,\r\n        i18n\r\n    });\r\n\r\n    return {\r\n        copayment: data.copayment,\r\n        extraMedLimit: data.extra_med_limit,\r\n        member: data.policy_number,\r\n        referenceLetter: data.ref_letter.toString(),\r\n        patientName: data.patient_name,  \r\n        insurerDescription:{\r\n            en: data.insurer_description_en,\r\n            chi: data.insurer_description_cn\r\n        }\r\n    }\r\n}\r\n"],"mappings":";AAAA,SAASA,OAAT;AACA,OAAO,KAAKC,CAAZ,MAAmB,QAAnB;;AAsBA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,MAAD,EAAoB;EACpC,IAAMC,YAAY,GAAGH,CAAC,CAACI,QAAF,CAAWF,MAAX,KAAsBF,CAAC,CAACK,UAAF,CAAaH,MAAb,EAAqB,GAArB,CAA3C;;EACA,IAAMI,iBAAiB,GAAGN,CAAC,CAACK,UAAF,CAAaH,MAAb,EAAqB,MAArB,IAA+B,EAA/B,GAAoC,EAA9D;EACA,OAAOC,YAAY,IAAID,MAAM,CAACK,MAAP,KAAkBD,iBAAzC;AACH,CAJD;;AAMA,OAAO,IAAME,YAAY,GAAG,SAAfA,YAAe;EAAA;EAAA;IAAA;MAAA;QAAA;UAASN,MAAT,QAASA,MAAT,EAAiBO,KAAjB,QAAiBA,KAAjB,EAAwBC,QAAxB,QAAwBA,QAAxB,EAAkCC,WAAlC,QAAkCA,WAAlC,EAA+CC,QAA/C,QAA+CA,QAA/C,EAAyDC,IAAzD,QAAyDA,IAAzD;;UAAA,IACnBZ,WAAW,CAACC,MAAD,CADQ;YAAA;YAAA;UAAA;;UAAA,MAEd,IAAIY,KAAJ,MAAaD,IAAI,CAACE,CAAL,CAAO,0BAAP,CAAb,CAFc;;QAAA;UAAA;UAAA,iCAKLhB,OAAO,CAAC;YACvBiB,GAAG,EAAE,qBADkB;YAEvBC,IAAI,EAAE;cACFC,SAAS,EAAER,QADT;cAEFS,SAAS,EAAEP,QAFT;cAGFQ,OAAO,EAAET,WAHP;cAIFF,KAAK,EAAEP,MAJL;cAKFmB,MAAM,EAAE;gBACJC,WAAW,EAAE;cADT;YALN,CAFiB;YAWvBb,KAAK,EAALA,KAXuB;YAYvBI,IAAI,EAAJA;UAZuB,CAAD,CALF;;QAAA;UAKlBU,IALkB;UAAA,iCAmBjB;YACHC,SAAS,EAAED,IAAI,CAACC,SADb;YAEHC,aAAa,EAAEF,IAAI,CAACG,eAFjB;YAGHC,WAAW,EAAEJ,IAAI,CAACK,YAHf;YAIHC,MAAM,EAAEN,IAAI,CAACM,MAJV;YAKHC,eAAe,EAAEP,IAAI,CAACQ,UALnB;YAMHtB,KAAK,EAAEP,MANJ;YAOH8B,kBAAkB,EAAC;cACfC,EAAE,EAACV,IAAI,CAACW,sBADO;cAEfC,GAAG,EAACZ,IAAI,CAACa;YAFM;UAPhB,CAnBiB;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA,CAArB;AAiCP,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB;EAAA;EAAA;IAAA;MAAA;QAAA;UAASC,SAAT,SAASA,SAAT,EAAoBC,QAApB,SAAoBA,QAApB,EAA8B9B,KAA9B,SAA8BA,KAA9B,EAAqCC,QAArC,SAAqCA,QAArC,EAA+CC,WAA/C,SAA+CA,WAA/C,EAA4DC,QAA5D,SAA4DA,QAA5D,EAAsEC,IAAtE,SAAsEA,IAAtE;UAAA;UAAA,iCACXd,OAAO,CAAC;YACvBiB,GAAG,EAAE,qBADkB;YAEvBC,IAAI,EAAE;cACFC,SAAS,EAAEsB,MAAM,CAAC9B,QAAD,CADf;cAEFS,SAAS,EAAEqB,MAAM,CAAC5B,QAAD,CAFf;cAGFQ,OAAO,EAAET,WAHP;cAIF8B,UAAU,EAAED,MAAM,CAACF,SAAD,CAJhB;cAKFjB,MAAM,EAAE;gBACJC,WAAW,EAAE;cADT,CALN;cAQFoB,UAAU,EAAEH;YARV,CAFiB;YAYvB9B,KAAK,EAALA,KAZuB;YAavBI,IAAI,EAAJA;UAbuB,CAAD,CADI;;QAAA;UACxBI,IADwB;UAAA,kCAiBvB;YACHO,SAAS,EAAEP,IAAI,CAACO,SADb;YAEHC,aAAa,EAAER,IAAI,CAACS,eAFjB;YAGHG,MAAM,EAAEZ,IAAI,CAAC0B,aAHV;YAIHb,eAAe,EAAEb,IAAI,CAACc,UAAL,CAAgBa,QAAhB,EAJd;YAKHC,WAAW,EAAE5B,IAAI,CAAC6B,YALf;YAMHd,kBAAkB,EAAC;cACfC,EAAE,EAAEhB,IAAI,CAACiB,sBADM;cAEfC,GAAG,EAAElB,IAAI,CAACmB;YAFK;UANhB,CAjBuB;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA,CAA3B"},"metadata":{},"sourceType":"module"}