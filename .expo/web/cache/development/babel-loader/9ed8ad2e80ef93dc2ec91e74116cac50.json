{"ast":null,"code":"var _ExpoUpdates$releaseC, _ExpoUpdates$localAss, _manifest2, _manifest$developer, _NativeModulesProxy$E;\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { RCTDeviceEventEmitter, CodedError, NativeModulesProxy, UnavailabilityError } from '@unimodules/core';\nimport { EventEmitter } from 'fbemitter';\nimport ExpoUpdates from \"./ExpoUpdates\";\nexport * from \"./Updates.types\";\nexport var updateId = ExpoUpdates.updateId && typeof ExpoUpdates.updateId === 'string' ? ExpoUpdates.updateId.toLowerCase() : null;\nexport var releaseChannel = (_ExpoUpdates$releaseC = ExpoUpdates.releaseChannel) != null ? _ExpoUpdates$releaseC : 'default';\nexport var localAssets = (_ExpoUpdates$localAss = ExpoUpdates.localAssets) != null ? _ExpoUpdates$localAss : {};\nexport var isEmergencyLaunch = ExpoUpdates.isEmergencyLaunch || false;\nexport var isUsingEmbeddedAssets = ExpoUpdates.isUsingEmbeddedAssets || false;\nvar _manifest = ExpoUpdates.manifest;\n\nif (ExpoUpdates.manifestString) {\n  _manifest = JSON.parse(ExpoUpdates.manifestString);\n}\n\nexport var manifest = (_manifest2 = _manifest) != null ? _manifest2 : {};\nvar isUsingDeveloperTool = !!((_manifest$developer = manifest.developer) != null && _manifest$developer.tool);\nvar isUsingExpoDevelopmentClient = ((_NativeModulesProxy$E = NativeModulesProxy.ExponentConstants) == null ? void 0 : _NativeModulesProxy$E.appOwnership) === 'expo';\nvar manualUpdatesInstructions = isUsingExpoDevelopmentClient ? 'To test manual updates, publish your project using `expo publish` and open the published ' + 'version in this development client.' : 'To test manual updates, make a release build with `npm run ios --configuration Release` or ' + '`npm run android --variant Release`.';\nexport function reloadAsync() {\n  return _regeneratorRuntime.async(function reloadAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (ExpoUpdates.reload) {\n            _context.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('Updates', 'reloadAsync');\n\n        case 2:\n          if (!(__DEV__ && !isUsingExpoDevelopmentClient)) {\n            _context.next = 4;\n            break;\n          }\n\n          throw new CodedError('ERR_UPDATES_DISABLED', \"You cannot use the Updates module in development mode in a production app. \" + manualUpdatesInstructions);\n\n        case 4:\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(ExpoUpdates.reload());\n\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function checkForUpdateAsync() {\n  var result;\n  return _regeneratorRuntime.async(function checkForUpdateAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (ExpoUpdates.checkForUpdateAsync) {\n            _context2.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('Updates', 'checkForUpdateAsync');\n\n        case 2:\n          if (!(__DEV__ || isUsingDeveloperTool)) {\n            _context2.next = 4;\n            break;\n          }\n\n          throw new CodedError('ERR_UPDATES_DISABLED', \"You cannot check for updates in development mode. \" + manualUpdatesInstructions);\n\n        case 4:\n          _context2.next = 6;\n          return _regeneratorRuntime.awrap(ExpoUpdates.checkForUpdateAsync());\n\n        case 6:\n          result = _context2.sent;\n\n          if (result.manifestString) {\n            result.manifest = JSON.parse(result.manifestString);\n            delete result.manifestString;\n          }\n\n          return _context2.abrupt(\"return\", result);\n\n        case 9:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function fetchUpdateAsync() {\n  var result;\n  return _regeneratorRuntime.async(function fetchUpdateAsync$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          if (ExpoUpdates.fetchUpdateAsync) {\n            _context3.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('Updates', 'fetchUpdateAsync');\n\n        case 2:\n          if (!(__DEV__ || isUsingDeveloperTool)) {\n            _context3.next = 4;\n            break;\n          }\n\n          throw new CodedError('ERR_UPDATES_DISABLED', \"You cannot fetch updates in development mode. \" + manualUpdatesInstructions);\n\n        case 4:\n          _context3.next = 6;\n          return _regeneratorRuntime.awrap(ExpoUpdates.fetchUpdateAsync());\n\n        case 6:\n          result = _context3.sent;\n\n          if (result.manifestString) {\n            result.manifest = JSON.parse(result.manifestString);\n            delete result.manifestString;\n          }\n\n          return _context3.abrupt(\"return\", result);\n\n        case 9:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function clearUpdateCacheExperimentalAsync(_sdkVersion) {\n  console.warn(\"This method is no longer necessary. `expo-updates` now automatically deletes your app's old bundle files!\");\n}\n\nvar _emitter;\n\nfunction _getEmitter() {\n  if (!_emitter) {\n    _emitter = new EventEmitter();\n    RCTDeviceEventEmitter.addListener('Expo.nativeUpdatesEvent', _emitEvent);\n  }\n\n  return _emitter;\n}\n\nfunction _emitEvent(params) {\n  var newParams = params;\n\n  if (typeof params === 'string') {\n    newParams = JSON.parse(params);\n  }\n\n  if (newParams.manifestString) {\n    newParams.manifest = JSON.parse(newParams.manifestString);\n    delete newParams.manifestString;\n  }\n\n  if (!_emitter) {\n    throw new Error(\"EventEmitter must be initialized to use from its listener\");\n  }\n\n  _emitter.emit('Expo.updatesEvent', newParams);\n}\n\nexport function addListener(listener) {\n  var emitter = _getEmitter();\n\n  return emitter.addListener('Expo.updatesEvent', listener);\n}","map":{"version":3,"sources":["../src/Updates.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  RCTDeviceEventEmitter,\n  CodedError,\n  NativeModulesProxy,\n  UnavailabilityError,\n} from '@unimodules/core';\nimport { EventEmitter, EventSubscription } from 'fbemitter';\n\nimport ExpoUpdates from './ExpoUpdates';\nimport {\n  Listener,\n  LocalAssets,\n  Manifest,\n  UpdateCheckResult,\n  UpdateEvent,\n  UpdateFetchResult,\n} from './Updates.types';\n\nexport * from './Updates.types';\n\nexport const updateId: string | null =\n  ExpoUpdates.updateId && typeof ExpoUpdates.updateId === 'string'\n    ? ExpoUpdates.updateId.toLowerCase()\n    : null;\nexport const releaseChannel: string = ExpoUpdates.releaseChannel ?? 'default';\nexport const localAssets: LocalAssets = ExpoUpdates.localAssets ?? {};\nexport const isEmergencyLaunch: boolean = ExpoUpdates.isEmergencyLaunch || false;\nexport const isUsingEmbeddedAssets: boolean = ExpoUpdates.isUsingEmbeddedAssets || false;\n\nlet _manifest = ExpoUpdates.manifest;\nif (ExpoUpdates.manifestString) {\n  _manifest = JSON.parse(ExpoUpdates.manifestString);\n}\nexport const manifest: Manifest | object = _manifest ?? {};\n\nconst isUsingDeveloperTool = !!(manifest as any).developer?.tool;\nconst isUsingExpoDevelopmentClient = NativeModulesProxy.ExponentConstants?.appOwnership === 'expo';\nconst manualUpdatesInstructions = isUsingExpoDevelopmentClient\n  ? 'To test manual updates, publish your project using `expo publish` and open the published ' +\n    'version in this development client.'\n  : 'To test manual updates, make a release build with `npm run ios --configuration Release` or ' +\n    '`npm run android --variant Release`.';\n\nexport async function reloadAsync(): Promise<void> {\n  if (!ExpoUpdates.reload) {\n    throw new UnavailabilityError('Updates', 'reloadAsync');\n  }\n  if (__DEV__ && !isUsingExpoDevelopmentClient) {\n    throw new CodedError(\n      'ERR_UPDATES_DISABLED',\n      `You cannot use the Updates module in development mode in a production app. ${manualUpdatesInstructions}`\n    );\n  }\n  await ExpoUpdates.reload();\n}\n\nexport async function checkForUpdateAsync(): Promise<UpdateCheckResult> {\n  if (!ExpoUpdates.checkForUpdateAsync) {\n    throw new UnavailabilityError('Updates', 'checkForUpdateAsync');\n  }\n  if (__DEV__ || isUsingDeveloperTool) {\n    throw new CodedError(\n      'ERR_UPDATES_DISABLED',\n      `You cannot check for updates in development mode. ${manualUpdatesInstructions}`\n    );\n  }\n\n  const result = await ExpoUpdates.checkForUpdateAsync();\n  if (result.manifestString) {\n    result.manifest = JSON.parse(result.manifestString);\n    delete result.manifestString;\n  }\n\n  return result;\n}\n\nexport async function fetchUpdateAsync(): Promise<UpdateFetchResult> {\n  if (!ExpoUpdates.fetchUpdateAsync) {\n    throw new UnavailabilityError('Updates', 'fetchUpdateAsync');\n  }\n  if (__DEV__ || isUsingDeveloperTool) {\n    throw new CodedError(\n      'ERR_UPDATES_DISABLED',\n      `You cannot fetch updates in development mode. ${manualUpdatesInstructions}`\n    );\n  }\n\n  const result = await ExpoUpdates.fetchUpdateAsync();\n  if (result.manifestString) {\n    result.manifest = JSON.parse(result.manifestString);\n    delete result.manifestString;\n  }\n\n  return result;\n}\n\nexport function clearUpdateCacheExperimentalAsync(_sdkVersion?: string) {\n  console.warn(\n    \"This method is no longer necessary. `expo-updates` now automatically deletes your app's old bundle files!\"\n  );\n}\n\nlet _emitter: EventEmitter | null;\n\nfunction _getEmitter(): EventEmitter {\n  if (!_emitter) {\n    _emitter = new EventEmitter();\n    RCTDeviceEventEmitter.addListener('Expo.nativeUpdatesEvent', _emitEvent);\n  }\n  return _emitter;\n}\n\nfunction _emitEvent(params): void {\n  let newParams = params;\n  if (typeof params === 'string') {\n    newParams = JSON.parse(params);\n  }\n  if (newParams.manifestString) {\n    newParams.manifest = JSON.parse(newParams.manifestString);\n    delete newParams.manifestString;\n  }\n\n  if (!_emitter) {\n    throw new Error(`EventEmitter must be initialized to use from its listener`);\n  }\n  _emitter.emit('Expo.updatesEvent', newParams);\n}\n\nexport function addListener(listener: Listener<UpdateEvent>): EventSubscription {\n  const emitter = _getEmitter();\n  return emitter.addListener('Expo.updatesEvent', listener);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}