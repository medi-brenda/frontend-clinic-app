{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"I:\\\\Workspace\\\\mediWS\\\\mccWS\\\\frontend-clinic-app\\\\src\\\\pages\\\\home\\\\reminderModal.tsx\";\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Linking from \"react-native-web/dist/exports/Linking\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { ScrollView } from 'react-native-gesture-handler';\nimport MCCButton from \"../../components/mccButton\";\nimport { useStores } from \"../../stores\";\nimport Swiper from 'react-native-swiper';\nimport * as _ from 'lodash';\nimport Spinner from 'react-native-loading-spinner-overlay';\nimport { restartApp, updateApp } from \"../../actions/app\";\nvar dimension = Dimensions.get('window');\n\nvar ReminderModal = function ReminderModal(_ref) {\n  var show = _ref.show,\n      onDismiss = _ref.onDismiss;\n  var stores = useStores();\n\n  var _useTranslation = useTranslation(),\n      i18n = _useTranslation.i18n,\n      t = _useTranslation.t;\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      index = _useState2[0],\n      setIndex = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      spinner = _useState4[0],\n      setSpinner = _useState4[1];\n\n  var reminders = stores.appStore.reminders;\n\n  var changeSlider = function changeSlider(index) {\n    setIndex(index);\n  };\n\n  var onUpdate = function onUpdate() {\n    var errorMsg;\n    return _regeneratorRuntime.async(function onUpdate$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setSpinner(true);\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(updateApp({\n              i18n: i18n\n            }));\n\n          case 3:\n            errorMsg = _context.sent;\n\n            if (errorMsg) {\n              Alert.alert(t('Common.Error'), errorMsg, [{\n                text: t('Common.Confirm'),\n                onPress: function onPress() {\n                  setSpinner(false);\n                }\n              }]);\n            } else {\n              Alert.alert(t('Common.Success'), t('App.SystemUpdateSuccess'), [{\n                text: t('Common.Confirm'),\n                onPress: function onPress() {\n                  setSpinner(false);\n                  restartApp();\n                }\n              }]);\n            }\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var onInstall = function onInstall() {\n    return _regeneratorRuntime.async(function onInstall$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            Linking.openURL(Platform.OS === 'android' ? 'market://details?id=com.mediconcen.clinic' : 'itms-apps://itunes.apple.com/us/app/apple-store/id1520154033?mt=8');\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(Spinner, {\n    visible: spinner,\n    color: 'red',\n    size: 'large',\n    overlayColor: 'rgba(0, 0, 0, 0.25)',\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }\n  }), React.createElement(Modal, {\n    animationType: \"fade\",\n    transparent: true,\n    visible: show,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  }, React.createElement(View, {\n    style: styleSheet.modalContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 17\n    }\n  }, React.createElement(View, {\n    style: styleSheet.modalContent,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 21\n    }\n  }, React.createElement(View, {\n    style: styleSheet.swiperContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 25\n    }\n  }, React.createElement(Swiper, {\n    loop: false,\n    activeDotColor: \"#ffffff\",\n    onIndexChanged: changeSlider,\n    index: stores.authStore.selectedSlide,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 29\n    }\n  }, reminders.map(function (reminder) {\n    var _ref2;\n\n    return React.createElement(View, {\n      style: styleSheet.modalContent,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 41\n      }\n    }, React.createElement(View, {\n      style: styleSheet.padding,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 45\n      }\n    }, React.createElement(Text, {\n      style: styleSheet.reminderTitle,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 49\n      }\n    }, i18n.language === 'en' ? reminder == null ? void 0 : reminder.titleEn : reminder == null ? void 0 : reminder.titleChi), React.createElement(ScrollView, {\n      contentContainerStyle: styleSheet.reminderScollView,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 49\n      }\n    }, (_ref2 = i18n.language === 'en' ? reminder == null ? void 0 : reminder.descriptionEn : reminder == null ? void 0 : reminder.descriptionChi) == null ? void 0 : _ref2.split('\\\\n').map(function (description, index) {\n      return React.createElement(Text, {\n        key: \"reminder-\" + (reminder == null ? void 0 : reminder.id) + \"-\" + index,\n        style: styleSheet.reminderContent,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 65\n        }\n      }, description);\n    }))));\n  }))), React.createElement(View, {\n    style: styleSheet.actionsContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 25\n    }\n  }, _.get(reminders, \"[\" + index + \"].id\") === 'updated' ? React.createElement(View, {\n    style: styleSheet.action,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 37\n    }\n  }, React.createElement(MCCButton, {\n    text: t('Common.Upgrade'),\n    onPress: function onPress() {\n      onDismiss();\n      setTimeout(onUpdate, 300);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 41\n    }\n  })) : undefined, _.get(reminders, \"[\" + index + \"].id\") === 'install' ? React.createElement(View, {\n    style: styleSheet.action,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 37\n    }\n  }, React.createElement(MCCButton, {\n    text: t('Common.Upgrade'),\n    onPress: onInstall,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 41\n    }\n  })) : undefined, React.createElement(View, {\n    style: styleSheet.action,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 29\n    }\n  }, React.createElement(MCCButton, {\n    text: t('Common.Confirm'),\n    onPress: onDismiss,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 33\n    }\n  })))))));\n};\n\nvar styleSheet = StyleSheet.create({\n  modalContainer: {\n    flex: 1,\n    backgroundColor: 'rgba(0, 0, 0, 0.7)',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  modalContent: {\n    width: dimension.width * 0.8,\n    height: dimension.height * 0.5,\n    borderRadius: 10,\n    padding: 0,\n    overflow: 'hidden',\n    backgroundColor: '#FFF'\n  },\n  padding: {\n    padding: 20,\n    flexDirection: 'column'\n  },\n  swiperContainer: {\n    flex: 1\n  },\n  reminderTitle: {\n    fontSize: 18,\n    textAlign: 'center',\n    marginBottom: 15,\n    backgroundColor: '#FFF'\n  },\n  reminderScollView: {\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  reminderContent: {\n    width: '100%',\n    fontSize: 14\n  },\n  actionsContainer: {\n    flexDirection: 'row',\n    padding: 10,\n    paddingTop: 0\n  },\n  action: {\n    flex: 1\n  }\n});\nexport default ReminderModal;","map":{"version":3,"names":["React","useState","useTranslation","ScrollView","MCCButton","useStores","Swiper","_","Spinner","restartApp","updateApp","dimension","Dimensions","get","ReminderModal","show","onDismiss","stores","i18n","t","index","setIndex","spinner","setSpinner","reminders","appStore","changeSlider","onUpdate","errorMsg","Alert","alert","text","onPress","onInstall","Linking","openURL","Platform","OS","styleSheet","modalContainer","modalContent","swiperContainer","authStore","selectedSlide","map","reminder","padding","reminderTitle","language","titleEn","titleChi","reminderScollView","descriptionEn","descriptionChi","split","description","id","reminderContent","actionsContainer","action","setTimeout","undefined","StyleSheet","create","flex","backgroundColor","justifyContent","alignItems","width","height","borderRadius","overflow","flexDirection","fontSize","textAlign","marginBottom","paddingTop"],"sources":["I:/Workspace/mediWS/mccWS/frontend-clinic-app/src/pages/home/reminderModal.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Modal, StyleSheet, Text, View, Dimensions, Alert, Linking, Platform } from 'react-native';\r\nimport { ScrollView } from 'react-native-gesture-handler';\r\nimport MCCButton from '../../components/mccButton';\r\nimport { useStores } from '../../stores';\r\nimport Swiper from 'react-native-swiper';\r\nimport * as _ from 'lodash';\r\nimport Spinner from 'react-native-loading-spinner-overlay';\r\nimport { restartApp, updateApp } from '../../actions/app';\r\nconst dimension = Dimensions.get('window');\r\n\r\ntype ReminderModalType = {\r\n    show: boolean,\r\n    onDismiss: () => void\r\n}\r\n\r\nconst ReminderModal = ({ show, onDismiss }: ReminderModalType) => {\r\n    const stores = useStores();\r\n    const { i18n, t } = useTranslation();\r\n\r\n    const [index, setIndex] = useState(0);\r\n    const [spinner, setSpinner] = useState(false);\r\n\r\n    const { reminders } = stores.appStore;\r\n\r\n    const changeSlider = (index: number) => {\r\n        setIndex(index);\r\n    }\r\n\r\n    const onUpdate = async () => {\r\n        setSpinner(true);\r\n        const errorMsg = await updateApp({ i18n });\r\n        if (errorMsg) {\r\n            Alert.alert(\r\n                t('Common.Error'),\r\n                errorMsg,\r\n                [\r\n                    {\r\n                        text: t('Common.Confirm'),\r\n                        onPress: () => {\r\n                            setSpinner(false);\r\n                        }\r\n                    }\r\n                ]\r\n            )\r\n        }\r\n        else {\r\n            Alert.alert(\r\n                t('Common.Success'),\r\n                t('App.SystemUpdateSuccess'),\r\n                [\r\n                    {\r\n                        text: t('Common.Confirm'),\r\n                        onPress: () => {\r\n                            setSpinner(false);\r\n                            restartApp();\r\n                        }\r\n                    }\r\n                ]\r\n            )\r\n        }\r\n    }\r\n\r\n    const onInstall = async () => {\r\n        Linking.openURL(\r\n            Platform.OS === 'android' ?\r\n                'market://details?id=com.mediconcen.clinic' :\r\n                'itms-apps://itunes.apple.com/us/app/apple-store/id1520154033?mt=8'\r\n        );\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Spinner\r\n                visible={spinner}\r\n                color={'red'}\r\n                size={'large'}\r\n                overlayColor={'rgba(0, 0, 0, 0.25)'}\r\n            />\r\n            <Modal\r\n                animationType='fade'\r\n                transparent={true}\r\n                visible={show}\r\n            >\r\n                <View style={styleSheet.modalContainer}>\r\n                    <View style={styleSheet.modalContent}>\r\n                        <View style={styleSheet.swiperContainer}>\r\n                            <Swiper\r\n                                loop={false}\r\n                                activeDotColor='#ffffff'\r\n                                onIndexChanged={changeSlider}\r\n                                index={stores.authStore.selectedSlide}\r\n                            >\r\n                                {\r\n                                    reminders.map(reminder => (\r\n\r\n                                        <View style={styleSheet.modalContent}>\r\n                                            <View style={styleSheet.padding}>\r\n                                                <Text style={styleSheet.reminderTitle}>\r\n                                                    {i18n.language === 'en' ? reminder?.titleEn : reminder?.titleChi}\r\n                                                </Text>\r\n\r\n                                                <ScrollView contentContainerStyle={styleSheet.reminderScollView}>\r\n                                                    {(i18n.language === 'en' ? reminder?.descriptionEn : reminder?.descriptionChi)\r\n                                                        ?.split('\\\\n').map((description: string, index: number) => {\r\n                                                            return (\r\n                                                                <Text\r\n                                                                    key={`reminder-${reminder?.id}-${index}`}\r\n                                                                    style={styleSheet.reminderContent}\r\n                                                                >\r\n                                                                    {description}\r\n                                                                </Text>\r\n                                                            );\r\n                                                        })}\r\n                                                </ScrollView>\r\n                                            </View>\r\n\r\n                                        </View>\r\n                                    ))\r\n                                }\r\n                            </Swiper>\r\n                        </View>\r\n                        <View style={styleSheet.actionsContainer}>\r\n                            {\r\n                                _.get(reminders, `[${index}].id`) === 'updated' ? (\r\n                                    <View style={styleSheet.action}>\r\n                                        <MCCButton\r\n                                            text={t('Common.Upgrade')}\r\n                                            onPress={() => {\r\n                                                onDismiss();\r\n                                                setTimeout(onUpdate, 300);\r\n                                            }}\r\n                                        />\r\n                                    </View>\r\n                                ) : undefined\r\n                            }\r\n                            {\r\n                                _.get(reminders, `[${index}].id`) === 'install' ? (\r\n                                    <View style={styleSheet.action}>\r\n                                        <MCCButton\r\n                                            text={t('Common.Upgrade')}\r\n                                            onPress={onInstall}\r\n                                        />\r\n                                    </View>\r\n                                ) : undefined\r\n                            }\r\n                            <View style={styleSheet.action}>\r\n                                <MCCButton\r\n                                    text={t('Common.Confirm')}\r\n                                    onPress={onDismiss}\r\n                                />\r\n                            </View>\r\n                        </View>\r\n                    </View>\r\n                </View>\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\n\r\nconst styleSheet = StyleSheet.create({\r\n    modalContainer: {\r\n        flex: 1,\r\n        backgroundColor: 'rgba(0, 0, 0, 0.7)',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n    },\r\n    modalContent: {\r\n        width: dimension.width * 0.8,\r\n        height: dimension.height * 0.5,\r\n        borderRadius: 10,\r\n        padding: 0,\r\n        overflow: 'hidden',\r\n        backgroundColor: '#FFF'\r\n    },\r\n    padding: {\r\n        padding: 20,\r\n        flexDirection: 'column'\r\n    },\r\n    swiperContainer: {\r\n        flex: 1\r\n    },\r\n    reminderTitle: {\r\n        fontSize: 18,\r\n        textAlign: 'center',\r\n        marginBottom: 15,\r\n        backgroundColor: '#FFF'\r\n    },\r\n    reminderScollView: {\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    reminderContent: {\r\n        width: '100%',\r\n        fontSize: 14,\r\n    },\r\n    actionsContainer: {\r\n        flexDirection: 'row',\r\n        padding: 10,\r\n        paddingTop: 0\r\n    },\r\n    action: {\r\n        flex: 1,\r\n    }\r\n});\r\n\r\nexport default ReminderModal;"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,cAAT,QAA+B,eAA/B;;;;;;;;;AAEA,SAASC,UAAT,QAA2B,8BAA3B;AACA,OAAOC,SAAP;AACA,SAASC,SAAT;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAO,KAAKC,CAAZ,MAAmB,QAAnB;AACA,OAAOC,OAAP,MAAoB,sCAApB;AACA,SAASC,UAAT,EAAqBC,SAArB;AACA,IAAMC,SAAS,GAAGC,UAAU,CAACC,GAAX,CAAe,QAAf,CAAlB;;AAOA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,OAA4C;EAAA,IAAzCC,IAAyC,QAAzCA,IAAyC;EAAA,IAAnCC,SAAmC,QAAnCA,SAAmC;EAC9D,IAAMC,MAAM,GAAGZ,SAAS,EAAxB;;EACA,sBAAoBH,cAAc,EAAlC;EAAA,IAAQgB,IAAR,mBAAQA,IAAR;EAAA,IAAcC,CAAd,mBAAcA,CAAd;;EAEA,gBAA0BlB,QAAQ,CAAC,CAAD,CAAlC;EAAA;EAAA,IAAOmB,KAAP;EAAA,IAAcC,QAAd;;EACA,iBAA8BpB,QAAQ,CAAC,KAAD,CAAtC;EAAA;EAAA,IAAOqB,OAAP;EAAA,IAAgBC,UAAhB;;EAEA,IAAQC,SAAR,GAAsBP,MAAM,CAACQ,QAA7B,CAAQD,SAAR;;EAEA,IAAME,YAAY,GAAG,SAAfA,YAAe,CAACN,KAAD,EAAmB;IACpCC,QAAQ,CAACD,KAAD,CAAR;EACH,CAFD;;EAIA,IAAMO,QAAQ,GAAG,SAAXA,QAAW;IAAA;IAAA;MAAA;QAAA;UAAA;YACbJ,UAAU,CAAC,IAAD,CAAV;YADa;YAAA,iCAEUb,SAAS,CAAC;cAAEQ,IAAI,EAAJA;YAAF,CAAD,CAFnB;;UAAA;YAEPU,QAFO;;YAGb,IAAIA,QAAJ,EAAc;cACVC,KAAK,CAACC,KAAN,CACIX,CAAC,CAAC,cAAD,CADL,EAEIS,QAFJ,EAGI,CACI;gBACIG,IAAI,EAAEZ,CAAC,CAAC,gBAAD,CADX;gBAEIa,OAAO,EAAE,mBAAM;kBACXT,UAAU,CAAC,KAAD,CAAV;gBACH;cAJL,CADJ,CAHJ;YAYH,CAbD,MAcK;cACDM,KAAK,CAACC,KAAN,CACIX,CAAC,CAAC,gBAAD,CADL,EAEIA,CAAC,CAAC,yBAAD,CAFL,EAGI,CACI;gBACIY,IAAI,EAAEZ,CAAC,CAAC,gBAAD,CADX;gBAEIa,OAAO,EAAE,mBAAM;kBACXT,UAAU,CAAC,KAAD,CAAV;kBACAd,UAAU;gBACb;cALL,CADJ,CAHJ;YAaH;;UA/BY;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAjB;;EAkCA,IAAMwB,SAAS,GAAG,SAAZA,SAAY;IAAA;MAAA;QAAA;UAAA;YACdC,OAAO,CAACC,OAAR,CACIC,QAAQ,CAACC,EAAT,KAAgB,SAAhB,GACI,2CADJ,GAEI,mEAHR;;UADc;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAlB;;EAQA,OACI,0CACI,oBAAC,OAAD;IACI,OAAO,EAAEf,OADb;IAEI,KAAK,EAAE,KAFX;IAGI,IAAI,EAAE,OAHV;IAII,YAAY,EAAE,qBAJlB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EADJ,EAOI,oBAAC,KAAD;IACI,aAAa,EAAC,MADlB;IAEI,WAAW,EAAE,IAFjB;IAGI,OAAO,EAAEP,IAHb;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAKI,oBAAC,IAAD;IAAM,KAAK,EAAEuB,UAAU,CAACC,cAAxB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACI,oBAAC,IAAD;IAAM,KAAK,EAAED,UAAU,CAACE,YAAxB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACI,oBAAC,IAAD;IAAM,KAAK,EAAEF,UAAU,CAACG,eAAxB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACI,oBAAC,MAAD;IACI,IAAI,EAAE,KADV;IAEI,cAAc,EAAC,SAFnB;IAGI,cAAc,EAAEf,YAHpB;IAII,KAAK,EAAET,MAAM,CAACyB,SAAP,CAAiBC,aAJ5B;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAOQnB,SAAS,CAACoB,GAAV,CAAc,UAAAC,QAAQ;IAAA;;IAAA,OAElB,oBAAC,IAAD;MAAM,KAAK,EAAEP,UAAU,CAACE,YAAxB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACI,oBAAC,IAAD;MAAM,KAAK,EAAEF,UAAU,CAACQ,OAAxB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACI,oBAAC,IAAD;MAAM,KAAK,EAAER,UAAU,CAACS,aAAxB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACK7B,IAAI,CAAC8B,QAAL,KAAkB,IAAlB,GAAyBH,QAAzB,oBAAyBA,QAAQ,CAAEI,OAAnC,GAA6CJ,QAA7C,oBAA6CA,QAAQ,CAAEK,QAD5D,CADJ,EAKI,oBAAC,UAAD;MAAY,qBAAqB,EAAEZ,UAAU,CAACa,iBAA9C;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,YACMjC,IAAI,CAAC8B,QAAL,KAAkB,IAAlB,GAAyBH,QAAzB,oBAAyBA,QAAQ,CAAEO,aAAnC,GAAmDP,QAAnD,oBAAmDA,QAAQ,CAAEQ,cADnE,qBACK,MACKC,KADL,CACW,KADX,EACkBV,GADlB,CACsB,UAACW,WAAD,EAAsBnC,KAAtB,EAAwC;MACvD,OACI,oBAAC,IAAD;QACI,GAAG,iBAAcyB,QAAd,oBAAcA,QAAQ,CAAEW,EAAxB,UAA8BpC,KADrC;QAEI,KAAK,EAAEkB,UAAU,CAACmB,eAFtB;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GAIKF,WAJL,CADJ;IAQH,CAVJ,CADL,CALJ,CADJ,CAFkB;EAAA,CAAtB,CAPR,CADJ,CADJ,EAqCI,oBAAC,IAAD;IAAM,KAAK,EAAEjB,UAAU,CAACoB,gBAAxB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAEQnD,CAAC,CAACM,GAAF,CAAMW,SAAN,QAAqBJ,KAArB,eAAsC,SAAtC,GACI,oBAAC,IAAD;IAAM,KAAK,EAAEkB,UAAU,CAACqB,MAAxB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACI,oBAAC,SAAD;IACI,IAAI,EAAExC,CAAC,CAAC,gBAAD,CADX;IAEI,OAAO,EAAE,mBAAM;MACXH,SAAS;MACT4C,UAAU,CAACjC,QAAD,EAAW,GAAX,CAAV;IACH,CALL;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EADJ,CADJ,GAUIkC,SAZZ,EAeQtD,CAAC,CAACM,GAAF,CAAMW,SAAN,QAAqBJ,KAArB,eAAsC,SAAtC,GACI,oBAAC,IAAD;IAAM,KAAK,EAAEkB,UAAU,CAACqB,MAAxB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACI,oBAAC,SAAD;IACI,IAAI,EAAExC,CAAC,CAAC,gBAAD,CADX;IAEI,OAAO,EAAEc,SAFb;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EADJ,CADJ,GAOI4B,SAtBZ,EAwBI,oBAAC,IAAD;IAAM,KAAK,EAAEvB,UAAU,CAACqB,MAAxB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACI,oBAAC,SAAD;IACI,IAAI,EAAExC,CAAC,CAAC,gBAAD,CADX;IAEI,OAAO,EAAEH,SAFb;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EADJ,CAxBJ,CArCJ,CADJ,CALJ,CAPJ,CADJ;AAuFH,CA9ID;;AAgJA,IAAMsB,UAAU,GAAGwB,UAAU,CAACC,MAAX,CAAkB;EACjCxB,cAAc,EAAE;IACZyB,IAAI,EAAE,CADM;IAEZC,eAAe,EAAE,oBAFL;IAGZC,cAAc,EAAE,QAHJ;IAIZC,UAAU,EAAE;EAJA,CADiB;EAOjC3B,YAAY,EAAE;IACV4B,KAAK,EAAEzD,SAAS,CAACyD,KAAV,GAAkB,GADf;IAEVC,MAAM,EAAE1D,SAAS,CAAC0D,MAAV,GAAmB,GAFjB;IAGVC,YAAY,EAAE,EAHJ;IAIVxB,OAAO,EAAE,CAJC;IAKVyB,QAAQ,EAAE,QALA;IAMVN,eAAe,EAAE;EANP,CAPmB;EAejCnB,OAAO,EAAE;IACLA,OAAO,EAAE,EADJ;IAEL0B,aAAa,EAAE;EAFV,CAfwB;EAmBjC/B,eAAe,EAAE;IACbuB,IAAI,EAAE;EADO,CAnBgB;EAsBjCjB,aAAa,EAAE;IACX0B,QAAQ,EAAE,EADC;IAEXC,SAAS,EAAE,QAFA;IAGXC,YAAY,EAAE,EAHH;IAIXV,eAAe,EAAE;EAJN,CAtBkB;EA4BjCd,iBAAiB,EAAE;IACfe,cAAc,EAAE,QADD;IAEfC,UAAU,EAAE;EAFG,CA5Bc;EAgCjCV,eAAe,EAAE;IACbW,KAAK,EAAE,MADM;IAEbK,QAAQ,EAAE;EAFG,CAhCgB;EAoCjCf,gBAAgB,EAAE;IACdc,aAAa,EAAE,KADD;IAEd1B,OAAO,EAAE,EAFK;IAGd8B,UAAU,EAAE;EAHE,CApCe;EAyCjCjB,MAAM,EAAE;IACJK,IAAI,EAAE;EADF;AAzCyB,CAAlB,CAAnB;AA8CA,eAAelD,aAAf"},"metadata":{},"sourceType":"module"}