{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"I:\\\\Workspace\\\\mediWS\\\\mccWS\\\\frontend-clinic-app\\\\src\\\\pages\\\\report\\\\index.tsx\";\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useNavigation } from '@react-navigation/native';\nimport { observer } from 'mobx-react';\nimport { Col, Container, Grid, Icon, Row, Text, View } from 'native-base';\nimport React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { ScrollView, TouchableOpacity } from 'react-native-gesture-handler';\nimport { getRecords } from \"../../actions/transaction\";\nimport TitleBar from \"../../components/titleBar\";\nimport { useStores } from \"../../stores\";\nimport ErrorPage from \"../error\";\nimport Loading from \"../loading\";\nimport * as _ from 'lodash';\nimport moment from 'moment';\nimport { getLastMonthDate } from \"../../utils/date\";\nimport MCCButton from \"../../components/mccButton\";\nimport { downloadReport } from \"../../actions/app\";\nimport Spinner from 'react-native-loading-spinner-overlay';\nimport PhoneCall from \"../../components/phoneCall\";\n\nvar PureChart = require('react-native-pure-chart/examples/pure-chart').default;\n\nvar ReportPage = observer(function () {\n  var _useTranslation = useTranslation(),\n      i18n = _useTranslation.i18n,\n      t = _useTranslation.t;\n\n  var stores = useStores();\n  var navigation = useNavigation();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      error = _useState4[0],\n      setError = _useState4[1];\n\n  var today = new Date();\n\n  var _useState5 = useState(today.getFullYear()),\n      _useState6 = _slicedToArray(_useState5, 2),\n      year = _useState6[0],\n      setYear = _useState6[1];\n\n  var _useState7 = useState(today.getMonth()),\n      _useState8 = _slicedToArray(_useState7, 2),\n      month = _useState8[0],\n      setMonth = _useState8[1];\n\n  var _useState9 = useState(),\n      _useState10 = _slicedToArray(_useState9, 2),\n      chartData = _useState10[0],\n      setChartData = _useState10[1];\n\n  var _useState11 = useState({}),\n      _useState12 = _slicedToArray(_useState11, 2),\n      data = _useState12[0],\n      setData = _useState12[1];\n\n  var _useState13 = useState(false),\n      _useState14 = _slicedToArray(_useState13, 2),\n      spinner = _useState14[0],\n      setSpinner = _useState14[1];\n\n  useEffect(function () {\n    init();\n  }, []);\n\n  var init = function init() {\n    var errorMsg, records, tempData, newData, charKeys, newChartData;\n    return _regeneratorRuntime.async(function init$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setLoading(true);\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(getRecords({\n              stores: stores,\n              navigation: navigation,\n              i18n: i18n\n            }));\n\n          case 3:\n            errorMsg = _context.sent;\n            setLoading(false);\n\n            if (errorMsg) {\n              setError(errorMsg);\n            } else {\n              records = stores.dataStore.records;\n              tempData = {};\n              records.forEach(function (record) {\n                var date = moment(record.transactionTime).toDate();\n                var key = \"\" + date.getFullYear() + date.getMonth();\n\n                if (!tempData[key]) {\n                  tempData[key] = [];\n                }\n\n                tempData[key].push(record);\n              });\n              newData = {};\n\n              _.keys(tempData).forEach(function (key) {\n                var income = 0;\n                tempData[key].forEach(function (record) {\n                  income += parseInt(record.feeSum, 10) + parseInt(record.doctorFee, 10) - parseInt(record.copaymentFee, 10) + parseInt(record.extraMedFromNetwork, 10);\n                });\n                var monthDate = getLastMonthDate(new Date(tempData[key][0].transactionTime)).getDate();\n                newData[key] = {\n                  customers: _.size(tempData[key]),\n                  income: income,\n                  average: (_.size(tempData[key]) / monthDate).toFixed(2)\n                };\n              });\n\n              charKeys = [moment(today).add('month', -5), moment(today).add('month', -4), moment(today).add('month', -3), moment(today).add('month', -2), moment(today).add('month', -1), moment(today)];\n              newChartData = _.map(charKeys, function (month) {\n                return {\n                  x: month.format('MM/YYYY'),\n                  y: _.get(newData, \"\" + month.get('year') + month.get('month') + \".income\", 0)\n                };\n              });\n              setChartData([{\n                seriesName: 'series1',\n                data: newChartData,\n                color: 'blue'\n              }]);\n              setData(newData);\n            }\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var changeMonth = function changeMonth(diff) {\n    var date = moment().set('month', month).set('year', year).add('month', diff).toDate();\n    setYear(date.getFullYear());\n    setMonth(date.getMonth());\n  };\n\n  var onReportDownload = function onReportDownload() {\n    Alert.alert(t('Report.Confirm_download'), undefined, [{\n      text: t('Common.Confirm'),\n      onPress: function onPress() {\n        var errorMsg;\n        return _regeneratorRuntime.async(function onPress$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                setSpinner(true);\n                _context2.next = 3;\n                return _regeneratorRuntime.awrap(downloadReport({\n                  stores: stores,\n                  navigation: navigation,\n                  year: year,\n                  month: month + 1\n                }));\n\n              case 3:\n                errorMsg = _context2.sent;\n\n                if (error) {\n                  Alert.alert(t('Common.Error'), t('Report.ReportFail'), [{\n                    text: t('Common.Confirm'),\n                    onPress: function onPress() {\n                      setSpinner(false);\n                    }\n                  }]);\n                } else {\n                  Alert.alert(t('Common.Success'), t('Report.ReportSent'), [{\n                    text: t('Common.Confirm'),\n                    onPress: function onPress() {\n                      setSpinner(false);\n                    }\n                  }]);\n                }\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      }\n    }, {\n      text: t('Common.Cancel'),\n      style: 'cancel'\n    }]);\n  };\n\n  return React.createElement(Container, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 9\n    }\n  }, React.createElement(TitleBar, {\n    title: t('Common.Reports'),\n    onBack: function onBack() {\n      navigation.goBack();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 13\n    }\n  }), React.createElement(Spinner, {\n    visible: spinner,\n    color: 'red',\n    size: 'large',\n    overlayColor: 'rgba(0, 0, 0, 0.25)',\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 13\n    }\n  }), loading ? React.createElement(Loading, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 27\n    }\n  }) : error ? React.createElement(ErrorPage, {\n    title: error,\n    onRetry: init,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 29\n    }\n  }) : React.createElement(ScrollView, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 25\n    }\n  }, React.createElement(Container, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 29\n    }\n  }, React.createElement(Text, {\n    style: styleSheet.title,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 33\n    }\n  }, t('Report.Recent_summary')), React.createElement(Text, {\n    style: styleSheet.income,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 33\n    }\n  }, t('Report.Income')), React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 33\n    }\n  }, chartData ? React.createElement(PureChart, {\n    showEvenNumberXaxisLabel: false,\n    data: chartData,\n    height: 150,\n    type: 'bar',\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 45\n    }\n  }) : undefined), React.createElement(Text, {\n    style: [styleSheet.income, styleSheet.marginTop],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 33\n    }\n  }, t('Report.Monthly_income_and_download')), React.createElement(View, {\n    style: styleSheet.monthSelectContatiner,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 33\n    }\n  }, React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return changeMonth(-1);\n    },\n    style: styleSheet.leftArrow,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 37\n    }\n  }, React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 41\n    }\n  }, React.createElement(Icon, {\n    name: \"arrow-left-drop-circle\",\n    style: styleSheet.arrowIcon,\n    type: \"MaterialCommunityIcons\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 45\n    }\n  }))), React.createElement(Text, {\n    style: styleSheet.dateText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 37\n    }\n  }, month + 1 + \"/\" + year), React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return changeMonth(1);\n    },\n    style: styleSheet.rightArrow,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 37\n    }\n  }, React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 41\n    }\n  }, React.createElement(Icon, {\n    name: \"arrow-right-drop-circle\",\n    style: styleSheet.arrowIcon,\n    type: \"MaterialCommunityIcons\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 45\n    }\n  })))), React.createElement(Grid, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 33\n    }\n  }, React.createElement(Row, {\n    style: styleSheet.row,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 37\n    }\n  }, React.createElement(Col, {\n    style: styleSheet.col,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 41\n    }\n  }, React.createElement(Text, {\n    style: styleSheet.colTitle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 45\n    }\n  }, t('Report.Client_count')), React.createElement(Text, {\n    style: styleSheet.textCenter,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 45\n    }\n  }, _.get(data, \"\" + year + month + \".customers\", 0))), React.createElement(Col, {\n    style: styleSheet.col,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 41\n    }\n  }, React.createElement(Text, {\n    style: styleSheet.colTitle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 45\n    }\n  }, t('Report.Total_income')), React.createElement(Text, {\n    style: styleSheet.textCenter,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 45\n    }\n  }, \"HKD $\" + _.get(data, \"\" + year + month + \".income\", 0)))), React.createElement(Row, {\n    style: styleSheet.secondRow,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 37\n    }\n  }, React.createElement(Col, {\n    style: styleSheet.col,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 41\n    }\n  }, React.createElement(Text, {\n    style: styleSheet.colTitle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 45\n    }\n  }, t('Report.Average_client_count')), React.createElement(Text, {\n    style: styleSheet.textCenter,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 45\n    }\n  }, _.get(data, \"\" + year + month + \".average\", 0)))), React.createElement(Row, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 37\n    }\n  }, React.createElement(Col, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 41\n    }\n  }, React.createElement(View, {\n    style: styleSheet.buttonContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 45\n    }\n  }, React.createElement(MCCButton, {\n    onPress: onReportDownload,\n    text: t('Report.Download_text'),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 49\n    }\n  }))))))), React.createElement(PhoneCall, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 13\n    }\n  }));\n});\nvar styleSheet = StyleSheet.create({\n  title: {\n    paddingLeft: 0,\n    paddingBottom: 10,\n    marginBottom: 5,\n    marginTop: 10,\n    fontSize: 20,\n    fontWeight: 'bold',\n    textAlign: 'center'\n  },\n  income: {\n    textAlign: 'center',\n    color: '#f39c12',\n    fontSize: 22,\n    marginBottom: 5\n  },\n  marginTop: {\n    marginTop: 16\n  },\n  monthSelectContatiner: {\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 10,\n    borderColor: '#f0f0f5',\n    borderBottomWidth: 1,\n    borderTopWidth: 1\n  },\n  leftArrow: {\n    paddingRight: 15\n  },\n  rightArrow: {\n    paddingLeft: 15\n  },\n  arrowIcon: {\n    fontSize: 28,\n    color: '#ed5b5c'\n  },\n  dateText: {\n    fontSize: 28,\n    color: '#666'\n  },\n  row: {\n    height: 60\n  },\n  col: {\n    paddingLeft: 0,\n    paddingBottom: 10,\n    marginBottom: 5,\n    marginTop: 10\n  },\n  colTitle: {\n    textAlign: 'center',\n    marginBottom: 5\n  },\n  textCenter: {\n    textAlign: 'center'\n  },\n  secondRow: {\n    height: 50\n  },\n  buttonContainer: {\n    paddingLeft: 10,\n    paddingRight: 10,\n    marginTop: 30\n  }\n});\nexport default ReportPage;","map":{"version":3,"names":["useNavigation","observer","Col","Container","Grid","Icon","Row","Text","View","React","useEffect","useState","useTranslation","ScrollView","TouchableOpacity","getRecords","TitleBar","useStores","ErrorPage","Loading","_","moment","getLastMonthDate","MCCButton","downloadReport","Spinner","PhoneCall","PureChart","require","default","ReportPage","i18n","t","stores","navigation","loading","setLoading","error","setError","today","Date","getFullYear","year","setYear","getMonth","month","setMonth","chartData","setChartData","data","setData","spinner","setSpinner","init","errorMsg","records","dataStore","tempData","forEach","record","date","transactionTime","toDate","key","push","newData","keys","income","parseInt","feeSum","doctorFee","copaymentFee","extraMedFromNetwork","monthDate","getDate","customers","size","average","toFixed","charKeys","add","newChartData","map","x","format","y","get","seriesName","color","changeMonth","diff","set","onReportDownload","Alert","alert","undefined","text","onPress","style","goBack","styleSheet","title","marginTop","monthSelectContatiner","leftArrow","arrowIcon","dateText","rightArrow","row","col","colTitle","textCenter","secondRow","buttonContainer","StyleSheet","create","paddingLeft","paddingBottom","marginBottom","fontSize","fontWeight","textAlign","flexDirection","justifyContent","alignItems","padding","borderColor","borderBottomWidth","borderTopWidth","paddingRight","height"],"sources":["I:/Workspace/mediWS/mccWS/frontend-clinic-app/src/pages/report/index.tsx"],"sourcesContent":["import { useNavigation } from '@react-navigation/native';\r\nimport { observer } from 'mobx-react';\r\nimport { Col, Container, Grid, Icon, Row, Text, View } from 'native-base';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Alert, StyleSheet } from 'react-native';\r\nimport { ScrollView, TouchableOpacity } from 'react-native-gesture-handler';\r\nimport { getRecords } from '../../actions/transaction';\r\nimport TitleBar from '../../components/titleBar';\r\nimport { useStores } from '../../stores';\r\nimport ErrorPage from '../error';\r\nimport Loading from '../loading';\r\nimport * as _ from 'lodash';\r\nimport moment from 'moment';\r\nimport { Record } from '../../models/record';\r\nimport { getLastMonthDate } from '../../utils/date';\r\nimport MCCButton from '../../components/mccButton';\r\nimport { downloadReport } from '../../actions/app';\r\nimport Spinner from 'react-native-loading-spinner-overlay';\r\nimport PhoneCall from \"../../components/phoneCall\";\r\nconst PureChart = require('react-native-pure-chart/examples/pure-chart').default;\r\n\r\nconst ReportPage = observer(() => {\r\n    const { i18n, t } = useTranslation();\r\n    const stores = useStores();\r\n    const navigation = useNavigation();\r\n\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState('');\r\n\r\n    const today = new Date();\r\n    const [year, setYear] = useState(today.getFullYear());\r\n    const [month, setMonth] = useState(today.getMonth());\r\n    const [chartData, setChartData] = useState<any>();\r\n    const [data, setData] = useState<any>({})\r\n    const [spinner, setSpinner] = useState(false);\r\n\r\n    useEffect(() => {\r\n        init();\r\n    }, []);\r\n\r\n    const init = async () => {\r\n        setLoading(true);\r\n        const errorMsg = await getRecords({ stores, navigation, i18n });\r\n        setLoading(false);\r\n\r\n        if (errorMsg) {\r\n            setError(errorMsg);\r\n        }\r\n        else {\r\n            const { records } = stores.dataStore;\r\n            const tempData: any = {};\r\n            records.forEach(record => {\r\n                const date = moment(record.transactionTime).toDate();\r\n                const key = `${date.getFullYear()}${date.getMonth()}`;\r\n                if (!tempData[key]) {\r\n                    tempData[key] = [];\r\n                }\r\n\r\n                tempData[key].push(record)\r\n            });\r\n\r\n            const newData: any = {};\r\n            _.keys(tempData).forEach(key => {\r\n                let income = 0;\r\n                tempData[key].forEach((record: Record) => {\r\n                    income += parseInt(record.feeSum, 10) +\r\n                        parseInt(record.doctorFee, 10) -\r\n                        parseInt(record.copaymentFee, 10) +\r\n                        parseInt(record.extraMedFromNetwork, 10);\r\n                });\r\n\r\n                const monthDate = getLastMonthDate(new Date(tempData[key][0].transactionTime)).getDate();\r\n\r\n\r\n                newData[key] = {\r\n                    customers: _.size(tempData[key]),\r\n                    income,\r\n                    average: (_.size(tempData[key]) / monthDate).toFixed(2)\r\n                }\r\n            });\r\n\r\n            const charKeys = [\r\n                moment(today).add('month', -5),\r\n                moment(today).add('month', -4),\r\n                moment(today).add('month', -3),\r\n                moment(today).add('month', -2),\r\n                moment(today).add('month', -1),\r\n                moment(today)\r\n            ];\r\n\r\n            const newChartData = _.map(charKeys, month => ({\r\n                x: month.format('MM/YYYY'),\r\n                y: _.get(newData, `${month.get('year')}${month.get('month')}.income`, 0)\r\n            }));\r\n\r\n            setChartData([{\r\n                seriesName: 'series1',\r\n                data: newChartData,\r\n                color: 'blue'\r\n            }]);\r\n            setData(newData);\r\n        }\r\n    }\r\n\r\n    const changeMonth = (diff: number) => {\r\n        const date = moment().set('month', month).set('year', year).add('month', diff).toDate();\r\n        setYear(date.getFullYear());\r\n        setMonth(date.getMonth());\r\n    }\r\n\r\n    const onReportDownload = () => {\r\n        Alert.alert(\r\n            t('Report.Confirm_download'),\r\n            undefined,\r\n            [\r\n                {\r\n                    text: t('Common.Confirm'),\r\n                    onPress: async () => {\r\n                        setSpinner(true);\r\n                        const errorMsg = await downloadReport({\r\n                            stores,\r\n                            navigation,\r\n                            year,\r\n                            month: month + 1\r\n                        });\r\n\r\n                        if (error) {\r\n                            Alert.alert(\r\n                                t('Common.Error'),\r\n                                t('Report.ReportFail'),\r\n                                [\r\n                                    {\r\n                                        text: t('Common.Confirm'),\r\n                                        onPress: () => {\r\n                                            setSpinner(false);\r\n                                        }\r\n                                    }\r\n                                ]\r\n                            )\r\n                        }\r\n                        else {\r\n                            Alert.alert(\r\n                                t('Common.Success'),\r\n                                t('Report.ReportSent'),\r\n                                [\r\n                                    {\r\n                                        text: t('Common.Confirm'),\r\n                                        onPress: () => {\r\n                                            setSpinner(false);\r\n                                        }\r\n                                    }\r\n                                ]\r\n                            )\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    text: t('Common.Cancel'),\r\n                    style: 'cancel'\r\n                }\r\n            ]\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <TitleBar\r\n                title={t('Common.Reports')}\r\n                onBack={() => { navigation.goBack(); }}\r\n            />\r\n            <Spinner\r\n                visible={spinner}\r\n                color={'red'}\r\n                size={'large'}\r\n                overlayColor={'rgba(0, 0, 0, 0.25)'}\r\n            />\r\n            {\r\n                loading ? <Loading /> :\r\n                    error ? <ErrorPage title={error} onRetry={init} /> :\r\n                        <ScrollView>\r\n                            <Container>\r\n                                <Text style={styleSheet.title}>{t('Report.Recent_summary')}</Text>\r\n                                <Text style={styleSheet.income}>{t('Report.Income')}</Text>\r\n                                <View>\r\n                                    {\r\n                                        chartData ? (\r\n                                            <PureChart\r\n                                                showEvenNumberXaxisLabel={false}\r\n                                                data={chartData}\r\n                                                height={150}\r\n                                                type={'bar'}\r\n                                            />\r\n                                        ) : undefined\r\n                                    }\r\n                                </View>\r\n                                <Text style={[styleSheet.income, styleSheet.marginTop]}>\r\n                                    {t('Report.Monthly_income_and_download')}\r\n                                </Text>\r\n                                <View style={styleSheet.monthSelectContatiner}>\r\n                                    <TouchableOpacity\r\n                                        onPress={() => changeMonth(-1)}\r\n                                        style={styleSheet.leftArrow}\r\n                                    >\r\n                                        <View>\r\n                                            <Icon\r\n                                                name='arrow-left-drop-circle'\r\n                                                style={styleSheet.arrowIcon}\r\n                                                type='MaterialCommunityIcons'\r\n                                            />\r\n                                        </View>\r\n                                    </TouchableOpacity>\r\n                                    <Text\r\n                                        style={styleSheet.dateText}\r\n                                    >\r\n                                        {`${month + 1}/${year}`}\r\n                                    </Text>\r\n                                    <TouchableOpacity\r\n                                        onPress={() => changeMonth(1)}\r\n                                        style={styleSheet.rightArrow}\r\n                                    >\r\n                                        <View>\r\n                                            <Icon\r\n                                                name='arrow-right-drop-circle'\r\n                                                style={styleSheet.arrowIcon}\r\n                                                type='MaterialCommunityIcons'\r\n                                            />\r\n                                        </View>\r\n                                    </TouchableOpacity>\r\n                                </View>\r\n                                <Grid>\r\n                                    <Row style={styleSheet.row}>\r\n                                        <Col style={styleSheet.col}>\r\n                                            <Text style={styleSheet.colTitle}>\r\n                                                {t('Report.Client_count')}\r\n                                            </Text>\r\n                                            <Text style={styleSheet.textCenter}>\r\n                                                {_.get(data, `${year}${month}.customers`, 0)}\r\n                                            </Text>\r\n                                        </Col>\r\n                                        <Col style={styleSheet.col}>\r\n                                            <Text style={styleSheet.colTitle}>\r\n                                                {t('Report.Total_income')}\r\n                                            </Text>\r\n                                            <Text style={styleSheet.textCenter}>\r\n                                                {`HKD $${_.get(data, `${year}${month}.income`, 0)}`}\r\n                                            </Text>\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row style={styleSheet.secondRow}>\r\n                                        <Col style={styleSheet.col}>\r\n                                            <Text style={styleSheet.colTitle}>\r\n                                                {t('Report.Average_client_count')}\r\n                                            </Text>\r\n                                            <Text style={styleSheet.textCenter}>\r\n                                                {_.get(data, `${year}${month}.average`, 0)}\r\n                                            </Text>\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <View style={styleSheet.buttonContainer}>\r\n                                                <MCCButton\r\n                                                    onPress={onReportDownload}\r\n                                                    text={t('Report.Download_text')}\r\n                                                />\r\n                                            </View>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </Grid>\r\n                            </Container>\r\n                        </ScrollView>\r\n            }\r\n\r\n            <PhoneCall/>\r\n        </Container >\r\n    )\r\n});\r\n\r\nconst styleSheet = StyleSheet.create({\r\n    title: {\r\n        paddingLeft: 0,\r\n        paddingBottom: 10,\r\n        marginBottom: 5,\r\n        marginTop: 10,\r\n        fontSize: 20,\r\n        fontWeight: 'bold',\r\n        textAlign: 'center',\r\n    },\r\n    income: {\r\n        textAlign: 'center',\r\n        color: '#f39c12',\r\n        fontSize: 22,\r\n        marginBottom: 5,\r\n    },\r\n    marginTop: {\r\n        marginTop: 16\r\n    },\r\n    monthSelectContatiner: {\r\n        flexDirection: 'row',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        padding: 10,\r\n        borderColor: '#f0f0f5',\r\n        borderBottomWidth: 1,\r\n        borderTopWidth: 1\r\n    },\r\n    leftArrow: {\r\n        paddingRight: 15\r\n    },\r\n    rightArrow: {\r\n        paddingLeft: 15\r\n    },\r\n    arrowIcon: {\r\n        fontSize: 28,\r\n        color: '#ed5b5c'\r\n    },\r\n    dateText: {\r\n        fontSize: 28,\r\n        color: '#666'\r\n    },\r\n    row: {\r\n        height: 60\r\n    },\r\n    col: {\r\n        paddingLeft: 0,\r\n        paddingBottom: 10,\r\n        marginBottom: 5,\r\n        marginTop: 10,\r\n    },\r\n    colTitle: {\r\n        textAlign: 'center',\r\n        marginBottom: 5,\r\n    },\r\n    textCenter: {\r\n        textAlign: 'center'\r\n    },\r\n    secondRow: {\r\n        height: 50\r\n    },\r\n    buttonContainer: {\r\n        paddingLeft: 10,\r\n        paddingRight: 10,\r\n        marginTop: 30,\r\n    }\r\n});\r\n\r\nexport default ReportPage;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}