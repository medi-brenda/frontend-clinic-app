{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { UnavailabilityError } from '@unimodules/core';\nimport AppState from \"react-native-web/dist/exports/AppState\";\nimport Linking from \"react-native-web/dist/exports/Linking\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport ExponentWebBrowser from \"./ExpoWebBrowser\";\nimport { WebBrowserResultType } from \"./WebBrowser.types\";\nexport { WebBrowserResultType };\nvar emptyCustomTabsPackages = {\n  defaultBrowserPackage: undefined,\n  preferredBrowserPackage: undefined,\n  browserPackages: [],\n  servicePackages: []\n};\nexport function getCustomTabsSupportingBrowsersAsync() {\n  return _regeneratorRuntime.async(function getCustomTabsSupportingBrowsersAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (ExponentWebBrowser.getCustomTabsSupportingBrowsersAsync) {\n            _context.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('WebBrowser', 'getCustomTabsSupportingBrowsersAsync');\n\n        case 2:\n          if (!(Platform.OS !== 'android')) {\n            _context.next = 6;\n            break;\n          }\n\n          return _context.abrupt(\"return\", emptyCustomTabsPackages);\n\n        case 6:\n          _context.next = 8;\n          return _regeneratorRuntime.awrap(ExponentWebBrowser.getCustomTabsSupportingBrowsersAsync());\n\n        case 8:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function warmUpAsync(browserPackage) {\n  return _regeneratorRuntime.async(function warmUpAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (ExponentWebBrowser.warmUpAsync) {\n            _context2.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('WebBrowser', 'warmUpAsync');\n\n        case 2:\n          if (!(Platform.OS !== 'android')) {\n            _context2.next = 6;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", {});\n\n        case 6:\n          _context2.next = 8;\n          return _regeneratorRuntime.awrap(ExponentWebBrowser.warmUpAsync(browserPackage));\n\n        case 8:\n          return _context2.abrupt(\"return\", _context2.sent);\n\n        case 9:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function mayInitWithUrlAsync(url, browserPackage) {\n  return _regeneratorRuntime.async(function mayInitWithUrlAsync$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          if (ExponentWebBrowser.mayInitWithUrlAsync) {\n            _context3.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('WebBrowser', 'mayInitWithUrlAsync');\n\n        case 2:\n          if (!(Platform.OS !== 'android')) {\n            _context3.next = 6;\n            break;\n          }\n\n          return _context3.abrupt(\"return\", {});\n\n        case 6:\n          _context3.next = 8;\n          return _regeneratorRuntime.awrap(ExponentWebBrowser.mayInitWithUrlAsync(url, browserPackage));\n\n        case 8:\n          return _context3.abrupt(\"return\", _context3.sent);\n\n        case 9:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function coolDownAsync(browserPackage) {\n  return _regeneratorRuntime.async(function coolDownAsync$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          if (ExponentWebBrowser.coolDownAsync) {\n            _context4.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('WebBrowser', 'coolDownAsync');\n\n        case 2:\n          if (!(Platform.OS !== 'android')) {\n            _context4.next = 6;\n            break;\n          }\n\n          return _context4.abrupt(\"return\", {});\n\n        case 6:\n          _context4.next = 8;\n          return _regeneratorRuntime.awrap(ExponentWebBrowser.coolDownAsync(browserPackage));\n\n        case 8:\n          return _context4.abrupt(\"return\", _context4.sent);\n\n        case 9:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nvar browserLocked = false;\nexport function openBrowserAsync(url) {\n  var browserParams,\n      result,\n      _args5 = arguments;\n  return _regeneratorRuntime.async(function openBrowserAsync$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          browserParams = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : {};\n\n          if (ExponentWebBrowser.openBrowserAsync) {\n            _context5.next = 3;\n            break;\n          }\n\n          throw new UnavailabilityError('WebBrowser', 'openBrowserAsync');\n\n        case 3:\n          if (!browserLocked) {\n            _context5.next = 6;\n            break;\n          }\n\n          if (__DEV__) {\n            console.warn('Attempted to call WebBrowser.openBrowserAsync multiple times while already active. Only one WebBrowser controller can be active at any given time.');\n          }\n\n          return _context5.abrupt(\"return\", {\n            type: WebBrowserResultType.LOCKED\n          });\n\n        case 6:\n          browserLocked = true;\n          _context5.prev = 7;\n          _context5.next = 10;\n          return _regeneratorRuntime.awrap(ExponentWebBrowser.openBrowserAsync(url, browserParams));\n\n        case 10:\n          result = _context5.sent;\n\n        case 11:\n          _context5.prev = 11;\n          browserLocked = false;\n          return _context5.finish(11);\n\n        case 14:\n          return _context5.abrupt(\"return\", result);\n\n        case 15:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, [[7,, 11, 14]], Promise);\n}\nexport function dismissBrowser() {\n  if (!ExponentWebBrowser.dismissBrowser) {\n    throw new UnavailabilityError('WebBrowser', 'dismissBrowser');\n  }\n\n  ExponentWebBrowser.dismissBrowser();\n}\nexport function openAuthSessionAsync(url, redirectUrl) {\n  var browserParams,\n      _args6 = arguments;\n  return _regeneratorRuntime.async(function openAuthSessionAsync$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          browserParams = _args6.length > 2 && _args6[2] !== undefined ? _args6[2] : {};\n\n          if (!_authSessionIsNativelySupported()) {\n            _context6.next = 9;\n            break;\n          }\n\n          if (ExponentWebBrowser.openAuthSessionAsync) {\n            _context6.next = 4;\n            break;\n          }\n\n          throw new UnavailabilityError('WebBrowser', 'openAuthSessionAsync');\n\n        case 4:\n          if (!(Platform.OS === 'web')) {\n            _context6.next = 6;\n            break;\n          }\n\n          return _context6.abrupt(\"return\", ExponentWebBrowser.openAuthSessionAsync(url, redirectUrl, browserParams));\n\n        case 6:\n          return _context6.abrupt(\"return\", ExponentWebBrowser.openAuthSessionAsync(url, redirectUrl));\n\n        case 9:\n          return _context6.abrupt(\"return\", _openAuthSessionPolyfillAsync(url, redirectUrl, browserParams));\n\n        case 10:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function dismissAuthSession() {\n  if (_authSessionIsNativelySupported()) {\n    if (!ExponentWebBrowser.dismissAuthSession) {\n      throw new UnavailabilityError('WebBrowser', 'dismissAuthSession');\n    }\n\n    ExponentWebBrowser.dismissAuthSession();\n  } else {\n    if (!ExponentWebBrowser.dismissBrowser) {\n      throw new UnavailabilityError('WebBrowser', 'dismissAuthSession');\n    }\n\n    ExponentWebBrowser.dismissBrowser();\n  }\n}\nexport function maybeCompleteAuthSession() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  if (ExponentWebBrowser.maybeCompleteAuthSession) {\n    return ExponentWebBrowser.maybeCompleteAuthSession(options);\n  }\n\n  return {\n    type: 'failed',\n    message: 'Not supported on this platform'\n  };\n}\n\nfunction _authSessionIsNativelySupported() {\n  if (Platform.OS === 'android') {\n    return false;\n  } else if (Platform.OS === 'web') {\n    return true;\n  }\n\n  var versionNumber = parseInt(String(Platform.Version), 10);\n  return versionNumber >= 11;\n}\n\nvar _redirectHandler = null;\nvar _onWebBrowserCloseAndroid = null;\n\nvar _isAppStateAvailable = AppState.currentState !== null;\n\nfunction _onAppStateChangeAndroid(state) {\n  if (!_isAppStateAvailable) {\n    _isAppStateAvailable = true;\n    return;\n  }\n\n  if (state === 'active' && _onWebBrowserCloseAndroid) {\n    _onWebBrowserCloseAndroid();\n  }\n}\n\nfunction _openBrowserAndWaitAndroidAsync(startUrl) {\n  var browserParams,\n      appStateChangedToActive,\n      result,\n      _await$openBrowserAsy,\n      type,\n      _args7 = arguments;\n\n  return _regeneratorRuntime.async(function _openBrowserAndWaitAndroidAsync$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          browserParams = _args7.length > 1 && _args7[1] !== undefined ? _args7[1] : {};\n          appStateChangedToActive = new Promise(function (resolve) {\n            _onWebBrowserCloseAndroid = resolve;\n            AppState.addEventListener('change', _onAppStateChangeAndroid);\n          });\n          result = {\n            type: WebBrowserResultType.CANCEL\n          };\n          _context7.next = 5;\n          return _regeneratorRuntime.awrap(openBrowserAsync(startUrl, browserParams));\n\n        case 5:\n          _await$openBrowserAsy = _context7.sent;\n          type = _await$openBrowserAsy.type;\n\n          if (!(type === 'opened')) {\n            _context7.next = 11;\n            break;\n          }\n\n          _context7.next = 10;\n          return _regeneratorRuntime.awrap(appStateChangedToActive);\n\n        case 10:\n          result = {\n            type: WebBrowserResultType.DISMISS\n          };\n\n        case 11:\n          AppState.removeEventListener('change', _onAppStateChangeAndroid);\n          _onWebBrowserCloseAndroid = null;\n          return _context7.abrupt(\"return\", result);\n\n        case 14:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction _openAuthSessionPolyfillAsync(startUrl, returnUrl) {\n  var browserParams,\n      _args8 = arguments;\n  return _regeneratorRuntime.async(function _openAuthSessionPolyfillAsync$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          browserParams = _args8.length > 2 && _args8[2] !== undefined ? _args8[2] : {};\n\n          if (!_redirectHandler) {\n            _context8.next = 3;\n            break;\n          }\n\n          throw new Error(\"The WebBrowser's auth session is in an invalid state with a redirect handler set when it should not be\");\n\n        case 3:\n          if (!_onWebBrowserCloseAndroid) {\n            _context8.next = 5;\n            break;\n          }\n\n          throw new Error(\"WebBrowser is already open, only one can be open at a time\");\n\n        case 5:\n          _context8.prev = 5;\n\n          if (!(Platform.OS === 'android')) {\n            _context8.next = 12;\n            break;\n          }\n\n          _context8.next = 9;\n          return _regeneratorRuntime.awrap(Promise.race([_openBrowserAndWaitAndroidAsync(startUrl, browserParams), _waitForRedirectAsync(returnUrl)]));\n\n        case 9:\n          return _context8.abrupt(\"return\", _context8.sent);\n\n        case 12:\n          _context8.next = 14;\n          return _regeneratorRuntime.awrap(Promise.race([openBrowserAsync(startUrl, browserParams), _waitForRedirectAsync(returnUrl)]));\n\n        case 14:\n          return _context8.abrupt(\"return\", _context8.sent);\n\n        case 15:\n          _context8.prev = 15;\n\n          if (ExponentWebBrowser.dismissBrowser) {\n            ExponentWebBrowser.dismissBrowser();\n          }\n\n          _stopWaitingForRedirect();\n\n          return _context8.finish(15);\n\n        case 19:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, null, null, [[5,, 15, 19]], Promise);\n}\n\nfunction _stopWaitingForRedirect() {\n  if (!_redirectHandler) {\n    throw new Error(\"The WebBrowser auth session is in an invalid state with no redirect handler when one should be set\");\n  }\n\n  Linking.removeEventListener('url', _redirectHandler);\n  _redirectHandler = null;\n}\n\nfunction _waitForRedirectAsync(returnUrl) {\n  return new Promise(function (resolve) {\n    _redirectHandler = function _redirectHandler(event) {\n      if (event.url.startsWith(returnUrl)) {\n        resolve({\n          url: event.url,\n          type: 'success'\n        });\n      }\n    };\n\n    Linking.addEventListener('url', _redirectHandler);\n  });\n}","map":{"version":3,"sources":["../src/WebBrowser.ts"],"names":[],"mappings":"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","sourcesContent":["import { UnavailabilityError } from '@unimodules/core';\nimport { AppState, AppStateStatus, Linking, Platform } from 'react-native';\n\nimport ExponentWebBrowser from './ExpoWebBrowser';\nimport {\n  RedirectEvent,\n  WebBrowserAuthSessionResult,\n  WebBrowserCoolDownResult,\n  WebBrowserCustomTabsResults,\n  WebBrowserMayInitWithUrlResult,\n  WebBrowserOpenOptions,\n  WebBrowserRedirectResult,\n  WebBrowserResult,\n  WebBrowserResultType,\n  WebBrowserWarmUpResult,\n  WebBrowserWindowFeatures,\n} from './WebBrowser.types';\n\nexport {\n  WebBrowserAuthSessionResult,\n  WebBrowserCoolDownResult,\n  WebBrowserCustomTabsResults,\n  WebBrowserMayInitWithUrlResult,\n  WebBrowserOpenOptions,\n  WebBrowserRedirectResult,\n  WebBrowserResult,\n  WebBrowserResultType,\n  WebBrowserWarmUpResult,\n  WebBrowserWindowFeatures,\n};\n\nconst emptyCustomTabsPackages: WebBrowserCustomTabsResults = {\n  defaultBrowserPackage: undefined,\n  preferredBrowserPackage: undefined,\n  browserPackages: [],\n  servicePackages: [],\n};\n\nexport async function getCustomTabsSupportingBrowsersAsync(): Promise<WebBrowserCustomTabsResults> {\n  if (!ExponentWebBrowser.getCustomTabsSupportingBrowsersAsync) {\n    throw new UnavailabilityError('WebBrowser', 'getCustomTabsSupportingBrowsersAsync');\n  }\n  if (Platform.OS !== 'android') {\n    return emptyCustomTabsPackages;\n  } else {\n    return await ExponentWebBrowser.getCustomTabsSupportingBrowsersAsync();\n  }\n}\n\nexport async function warmUpAsync(browserPackage?: string): Promise<WebBrowserWarmUpResult> {\n  if (!ExponentWebBrowser.warmUpAsync) {\n    throw new UnavailabilityError('WebBrowser', 'warmUpAsync');\n  }\n  if (Platform.OS !== 'android') {\n    return {};\n  } else {\n    return await ExponentWebBrowser.warmUpAsync(browserPackage);\n  }\n}\n\nexport async function mayInitWithUrlAsync(\n  url: string,\n  browserPackage?: string\n): Promise<WebBrowserMayInitWithUrlResult> {\n  if (!ExponentWebBrowser.mayInitWithUrlAsync) {\n    throw new UnavailabilityError('WebBrowser', 'mayInitWithUrlAsync');\n  }\n  if (Platform.OS !== 'android') {\n    return {};\n  } else {\n    return await ExponentWebBrowser.mayInitWithUrlAsync(url, browserPackage);\n  }\n}\n\nexport async function coolDownAsync(browserPackage?: string): Promise<WebBrowserCoolDownResult> {\n  if (!ExponentWebBrowser.coolDownAsync) {\n    throw new UnavailabilityError('WebBrowser', 'coolDownAsync');\n  }\n  if (Platform.OS !== 'android') {\n    return {};\n  } else {\n    return await ExponentWebBrowser.coolDownAsync(browserPackage);\n  }\n}\n\nlet browserLocked = false;\n\nexport async function openBrowserAsync(\n  url: string,\n  browserParams: WebBrowserOpenOptions = {}\n): Promise<WebBrowserResult> {\n  if (!ExponentWebBrowser.openBrowserAsync) {\n    throw new UnavailabilityError('WebBrowser', 'openBrowserAsync');\n  }\n\n  if (browserLocked) {\n    // Prevent multiple sessions from running at the same time, WebBrowser doesn't\n    // support it this makes the behavior predictable.\n    if (__DEV__) {\n      console.warn(\n        'Attempted to call WebBrowser.openBrowserAsync multiple times while already active. Only one WebBrowser controller can be active at any given time.'\n      );\n    }\n\n    return { type: WebBrowserResultType.LOCKED };\n  }\n  browserLocked = true;\n\n  let result: WebBrowserResult;\n  try {\n    result = await ExponentWebBrowser.openBrowserAsync(url, browserParams);\n  } finally {\n    // WebBrowser session complete, unset lock\n    browserLocked = false;\n  }\n\n  return result;\n}\n\nexport function dismissBrowser(): void {\n  if (!ExponentWebBrowser.dismissBrowser) {\n    throw new UnavailabilityError('WebBrowser', 'dismissBrowser');\n  }\n  ExponentWebBrowser.dismissBrowser();\n}\n\nexport async function openAuthSessionAsync(\n  url: string,\n  redirectUrl: string,\n  browserParams: WebBrowserOpenOptions = {}\n): Promise<WebBrowserAuthSessionResult> {\n  if (_authSessionIsNativelySupported()) {\n    if (!ExponentWebBrowser.openAuthSessionAsync) {\n      throw new UnavailabilityError('WebBrowser', 'openAuthSessionAsync');\n    }\n    if (Platform.OS === 'web') {\n      return ExponentWebBrowser.openAuthSessionAsync(url, redirectUrl, browserParams);\n    }\n    return ExponentWebBrowser.openAuthSessionAsync(url, redirectUrl);\n  } else {\n    return _openAuthSessionPolyfillAsync(url, redirectUrl, browserParams);\n  }\n}\n\nexport function dismissAuthSession(): void {\n  if (_authSessionIsNativelySupported()) {\n    if (!ExponentWebBrowser.dismissAuthSession) {\n      throw new UnavailabilityError('WebBrowser', 'dismissAuthSession');\n    }\n    ExponentWebBrowser.dismissAuthSession();\n  } else {\n    if (!ExponentWebBrowser.dismissBrowser) {\n      throw new UnavailabilityError('WebBrowser', 'dismissAuthSession');\n    }\n    ExponentWebBrowser.dismissBrowser();\n  }\n}\n\n/**\n * Attempts to complete an auth session in the browser.\n *\n * @param options\n */\nexport function maybeCompleteAuthSession(\n  options: { skipRedirectCheck?: boolean } = {}\n): { type: 'success' | 'failed'; message: string } {\n  if (ExponentWebBrowser.maybeCompleteAuthSession) {\n    return ExponentWebBrowser.maybeCompleteAuthSession(options);\n  }\n  return { type: 'failed', message: 'Not supported on this platform' };\n}\n\n/* iOS <= 10 and Android polyfill for SFAuthenticationSession flow */\n\nfunction _authSessionIsNativelySupported(): boolean {\n  if (Platform.OS === 'android') {\n    return false;\n  } else if (Platform.OS === 'web') {\n    return true;\n  }\n\n  const versionNumber = parseInt(String(Platform.Version), 10);\n  return versionNumber >= 11;\n}\n\nlet _redirectHandler: ((event: RedirectEvent) => void) | null = null;\n\n/*\n * openBrowserAsync on Android doesn't wait until closed, so we need to polyfill\n * it with AppState\n */\n\n// Store the `resolve` function from a Promise to fire when the AppState\n// returns to active\nlet _onWebBrowserCloseAndroid: null | (() => void) = null;\n\n// If the initial AppState.currentState is null, we assume that the first call to\n// AppState#change event is not actually triggered by a real change,\n// is triggered instead by the bridge capturing the current state\n// (https://reactnative.dev/docs/appstate#basic-usage)\nlet _isAppStateAvailable: boolean = AppState.currentState !== null;\nfunction _onAppStateChangeAndroid(state: AppStateStatus) {\n  if (!_isAppStateAvailable) {\n    _isAppStateAvailable = true;\n    return;\n  }\n\n  if (state === 'active' && _onWebBrowserCloseAndroid) {\n    _onWebBrowserCloseAndroid();\n  }\n}\n\nasync function _openBrowserAndWaitAndroidAsync(\n  startUrl: string,\n  browserParams: WebBrowserOpenOptions = {}\n): Promise<WebBrowserResult> {\n  const appStateChangedToActive = new Promise(resolve => {\n    _onWebBrowserCloseAndroid = resolve;\n    AppState.addEventListener('change', _onAppStateChangeAndroid);\n  });\n\n  let result: WebBrowserResult = { type: WebBrowserResultType.CANCEL };\n  const { type } = await openBrowserAsync(startUrl, browserParams);\n\n  if (type === 'opened') {\n    await appStateChangedToActive;\n    result = { type: WebBrowserResultType.DISMISS };\n  }\n\n  AppState.removeEventListener('change', _onAppStateChangeAndroid);\n  _onWebBrowserCloseAndroid = null;\n  return result;\n}\n\nasync function _openAuthSessionPolyfillAsync(\n  startUrl: string,\n  returnUrl: string,\n  browserParams: WebBrowserOpenOptions = {}\n): Promise<WebBrowserAuthSessionResult> {\n  if (_redirectHandler) {\n    throw new Error(\n      `The WebBrowser's auth session is in an invalid state with a redirect handler set when it should not be`\n    );\n  }\n\n  if (_onWebBrowserCloseAndroid) {\n    throw new Error(`WebBrowser is already open, only one can be open at a time`);\n  }\n\n  try {\n    if (Platform.OS === 'android') {\n      return await Promise.race([\n        _openBrowserAndWaitAndroidAsync(startUrl, browserParams),\n        _waitForRedirectAsync(returnUrl),\n      ]);\n    } else {\n      return await Promise.race([\n        openBrowserAsync(startUrl, browserParams),\n        _waitForRedirectAsync(returnUrl),\n      ]);\n    }\n  } finally {\n    // We can't dismiss the browser on Android, only call this when it's available.\n    // Users on Android need to manually press the 'x' button in Chrome Custom Tabs, sadly.\n    if (ExponentWebBrowser.dismissBrowser) {\n      ExponentWebBrowser.dismissBrowser();\n    }\n\n    _stopWaitingForRedirect();\n  }\n}\n\nfunction _stopWaitingForRedirect() {\n  if (!_redirectHandler) {\n    throw new Error(\n      `The WebBrowser auth session is in an invalid state with no redirect handler when one should be set`\n    );\n  }\n\n  Linking.removeEventListener('url', _redirectHandler);\n  _redirectHandler = null;\n}\n\nfunction _waitForRedirectAsync(returnUrl: string): Promise<WebBrowserRedirectResult> {\n  return new Promise(resolve => {\n    _redirectHandler = (event: RedirectEvent) => {\n      if (event.url.startsWith(returnUrl)) {\n        resolve({ url: event.url, type: 'success' });\n      }\n    };\n\n    Linking.addEventListener('url', _redirectHandler);\n  });\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}