{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport NativeInterface from \"./nativeInterface\";\nimport InternetReachability from \"./internetReachability\";\nimport * as PrivateTypes from \"./privateTypes\";\n\nvar State = function State(configuration) {\n  var _this = this;\n\n  _classCallCheck(this, State);\n\n  this._nativeEventSubscription = null;\n  this._subscriptions = new Set();\n  this._latestState = null;\n\n  this._handleNativeStateUpdate = function (state) {\n    _this._internetReachability.update(state);\n\n    var convertedState = _this._convertState(state);\n\n    _this._latestState = convertedState;\n\n    _this._subscriptions.forEach(function (handler) {\n      return handler(convertedState);\n    });\n  };\n\n  this._handleInternetReachabilityUpdate = function (isInternetReachable) {\n    if (!_this._latestState) {\n      return;\n    }\n\n    var nextState = _objectSpread({}, _this._latestState, {\n      isInternetReachable: isInternetReachable\n    });\n\n    _this._latestState = nextState;\n\n    _this._subscriptions.forEach(function (handler) {\n      return handler(nextState);\n    });\n  };\n\n  this._fetchCurrentState = function _callee(requestedInterface) {\n    var state, convertedState;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(NativeInterface.getCurrentState(requestedInterface));\n\n          case 2:\n            state = _context.sent;\n\n            _this._internetReachability.update(state);\n\n            convertedState = _this._convertState(state);\n\n            if (!requestedInterface) {\n              _this._latestState = convertedState;\n            }\n\n            return _context.abrupt(\"return\", convertedState);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, this);\n  };\n\n  this._convertState = function (input) {\n    if (typeof input.isInternetReachable === 'boolean') {\n      return input;\n    } else {\n      return _objectSpread({}, input, {\n        isInternetReachable: _this._internetReachability.currentState()\n      });\n    }\n  };\n\n  this.latest = function (requestedInterface) {\n    if (requestedInterface) {\n      return _this._fetchCurrentState(requestedInterface);\n    } else if (_this._latestState) {\n      return Promise.resolve(_this._latestState);\n    } else {\n      return _this._fetchCurrentState();\n    }\n  };\n\n  this.add = function (handler) {\n    _this._subscriptions.add(handler);\n\n    if (_this._latestState) {\n      handler(_this._latestState);\n    } else {\n      _this.latest().then(handler);\n    }\n  };\n\n  this.remove = function (handler) {\n    _this._subscriptions.delete(handler);\n  };\n\n  this.tearDown = function () {\n    if (_this._internetReachability) {\n      _this._internetReachability.tearDown();\n    }\n\n    if (_this._nativeEventSubscription) {\n      _this._nativeEventSubscription.remove();\n    }\n\n    _this._subscriptions.clear();\n  };\n\n  this._internetReachability = new InternetReachability(configuration, this._handleInternetReachabilityUpdate);\n  this._nativeEventSubscription = NativeInterface.eventEmitter.addListener(PrivateTypes.DEVICE_CONNECTIVITY_EVENT, this._handleNativeStateUpdate);\n\n  this._fetchCurrentState();\n};\n\nexport { State as default };","map":{"version":3,"sources":["state.ts"],"names":["State","_nativeEventSubscription","_subscriptions","_latestState","NativeInterface","PrivateTypes","convertedState","handler","nextState","isInternetReachable","state","input","Promise"],"mappings":";;;AAUA,OAAA,eAAA;AACA,OAAA,oBAAA;AAEA,OAAO,KAAP,YAAA;;AAEqBA,IAAAA,K,GAMnB,SAAA,KAAA,CAAA,aAAA,EAAuD;EAAA,IAAA,KAAA,GAAA,IAAA;;EAAA,eAAA,CAAA,IAAA,EAAA,KAAA,CAAA;;EAAA,KAL/CC,wBAK+C,GALY,IAKZ;EAAA,KAJ/CC,cAI+C,GAJ9B,IAAA,GAAA,EAI8B;EAAA,KAH/CC,YAG+C,GAHL,IAGK;;EAAA,KAAA,wBAAA,GAiBpB,UAAA,KAAA,EAExB;IAET,KAAI,CAAJ,qBAAA,CAAA,MAAA,CAAA,KAAA;;IAGA,IAAMG,cAAc,GAAG,KAAI,CAAJ,aAAA,CAAvB,KAAuB,CAAvB;;IAGA,KAAI,CAAJ,YAAA,GAAA,cAAA;;IACA,KAAI,CAAJ,cAAA,CAAA,OAAA,CAA4B,UAAA,OAAA,EAAA;MAAA,OAAmBC,OAAO,CAA1B,cAA0B,CAA1B;IAA5B,CAAA;EA5BqD,CAAA;;EAAA,KAAA,iCAAA,GA+BX,UAAA,mBAAA,EAEjC;IACT,IAAI,CAAC,KAAI,CAAT,YAAA,EAAwB;MACtB;IAGF;;IAAA,IAAMC,SAAS,GAAA,aAAA,CAAA,EAAA,EACV,KAAI,CADM,YAAA,EAAA;MAEbC,mBAAmB,EAFrB;IAAe,CAAA,CAAf;;IAIA,KAAI,CAAJ,YAAA,GAAA,SAAA;;IACA,KAAI,CAAJ,cAAA,CAAA,OAAA,CAA4B,UAAA,OAAA,EAAA;MAAA,OAAmBF,OAAO,CAA1B,SAA0B,CAA1B;IAA5B,CAAA;EA3CqD,CAAA;;EAAA,KAAA,kBAAA,GA8C1B,SAAA,OAAA,CAAA,kBAAA,EAAA;IAAA,IAAA,KAAA,EAAA,cAAA;IAAA,OAAA,mBAAA,CAAA,KAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA;MAAA,OAAA,CAAA,EAAA;QAAA,QAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;UAAA,KAAA,CAAA;YAAA,QAAA,CAAA,IAAA,GAAA,CAAA;YAAA,OAAA,mBAAA,CAAA,KAAA,CAGPH,eAAe,CAAfA,eAAAA,CAHO,kBAGPA,CAHO,CAAA;;UAAA,KAAA,CAAA;YAGrBM,KAHqB,GAAA,QAAA,CAAA,IAGrBA;;YAGN,KAAI,CAAJ,qBAAA,CAAA,MAAA,CAAA,KAAA;;YAEMJ,cARqB,GAQJ,KAAI,CAAJ,aAAA,CARI,KAQJ,CAAjBA;;YACN,IAAI,CAAJ,kBAAA,EAAyB;cACvB,KAAI,CAAJ,YAAA,GAAA,cAAA;YAVyB;;YAAA,OAAA,QAAA,CAAA,MAAA,CAAA,QAAA,EAAA,cAAA,CAAA;;UAAA,KAAA,CAAA;UAAA,KAAA,KAAA;YAAA,OAAA,QAAA,CAAA,IAAA,EAAA;QAAA;MAAA;IAAA,CAAA,EAAA,IAAA,EAAA,IAAA,CAAA;EA9C0B,CAAA;;EAAA,KAAA,aAAA,GA8D/B,UAAA,KAAA,EAEC;IACvB,IAAI,OAAOK,KAAK,CAAZ,mBAAA,KAAJ,SAAA,EAAoD;MAClD,OAAA,KAAA;IADF,CAAA,MAEO;MACL,OAAA,aAAA,CAAA,EAAA,EAAA,KAAA,EAAA;QAEEF,mBAAmB,EAAE,KAAI,CAAJ,qBAAA,CAFvB,YAEuB;MAFvB,CAAA,CAAA;IAKH;EAzEsD,CAAA;;EAAA,KAAA,MAAA,GA2EvC,UAAA,kBAAA,EAEkB;IAChC,IAAA,kBAAA,EAAwB;MACtB,OAAO,KAAI,CAAJ,kBAAA,CAAP,kBAAO,CAAP;IADF,CAAA,MAEO,IAAI,KAAI,CAAR,YAAA,EAAuB;MAC5B,OAAOG,OAAO,CAAPA,OAAAA,CAAgB,KAAI,CAA3B,YAAOA,CAAP;IADK,CAAA,MAEA;MACL,OAAO,KAAI,CAAX,kBAAO,EAAP;IAEH;EArFsD,CAAA;;EAAA,KAAA,GAAA,GAuF1C,UAAA,OAAA,EAA+C;IAE1D,KAAI,CAAJ,cAAA,CAAA,GAAA,CAAA,OAAA;;IAGA,IAAI,KAAI,CAAR,YAAA,EAAuB;MACrBL,OAAO,CAAC,KAAI,CAAZA,YAAO,CAAPA;IADF,CAAA,MAEO;MACL,KAAI,CAAJ,MAAA,GAAA,IAAA,CAAA,OAAA;IAEH;EAjGsD,CAAA;;EAAA,KAAA,MAAA,GAmGvC,UAAA,OAAA,EAA+C;IAC7D,KAAI,CAAJ,cAAA,CAAA,MAAA,CAAA,OAAA;EApGqD,CAAA;;EAAA,KAAA,QAAA,GAuGrC,YAAY;IAC5B,IAAI,KAAI,CAAR,qBAAA,EAAgC;MAC9B,KAAI,CAAJ,qBAAA,CAAA,QAAA;IAGF;;IAAA,IAAI,KAAI,CAAR,wBAAA,EAAmC;MACjC,KAAI,CAAJ,wBAAA,CAAA,MAAA;IAGF;;IAAA,KAAI,CAAJ,cAAA,CAAA,KAAA;EAhHqD,CAAA;;EAErD,KAAA,qBAAA,GAA6B,IAAA,oBAAA,CAAA,aAAA,EAE3B,KAFF,iCAA6B,CAA7B;EAMA,KAAA,wBAAA,GAAgCH,eAAe,CAAfA,YAAAA,CAAAA,WAAAA,CAC9BC,YAAY,CADkBD,yBAAAA,EAE9B,KAFF,wBAAgCA,CAAhC;;EAMA,KAAA,kBAAA;CApBiBJ;;SAAAA,K","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport {NativeEventSubscription} from 'react-native';\nimport NativeInterface from './nativeInterface';\nimport InternetReachability from './internetReachability';\nimport * as Types from './types';\nimport * as PrivateTypes from './privateTypes';\n\nexport default class State {\n  private _nativeEventSubscription: NativeEventSubscription | null = null;\n  private _subscriptions = new Set<Types.NetInfoChangeHandler>();\n  private _latestState: Types.NetInfoState | null = null;\n  private _internetReachability: InternetReachability;\n\n  constructor(configuration: Types.NetInfoConfiguration) {\n    // Add the listener to the internet connectivity events\n    this._internetReachability = new InternetReachability(\n      configuration,\n      this._handleInternetReachabilityUpdate,\n    );\n\n    // Add the subscription to the native events\n    this._nativeEventSubscription = NativeInterface.eventEmitter.addListener(\n      PrivateTypes.DEVICE_CONNECTIVITY_EVENT,\n      this._handleNativeStateUpdate,\n    );\n\n    // Fetch the current state from the native module\n    this._fetchCurrentState();\n  }\n\n  private _handleNativeStateUpdate = (\n    state: PrivateTypes.NetInfoNativeModuleState,\n  ): void => {\n    // Update the internet reachability module\n    this._internetReachability.update(state);\n\n    // Convert the state from native to JS shape\n    const convertedState = this._convertState(state);\n\n    // Update the listeners\n    this._latestState = convertedState;\n    this._subscriptions.forEach((handler): void => handler(convertedState));\n  };\n\n  private _handleInternetReachabilityUpdate = (\n    isInternetReachable: boolean | null | undefined,\n  ): void => {\n    if (!this._latestState) {\n      return;\n    }\n\n    const nextState = {\n      ...this._latestState,\n      isInternetReachable,\n    } as Types.NetInfoState;\n    this._latestState = nextState;\n    this._subscriptions.forEach((handler): void => handler(nextState));\n  };\n\n  private _fetchCurrentState = async (\n    requestedInterface?: string,\n  ): Promise<Types.NetInfoState> => {\n    const state = await NativeInterface.getCurrentState(requestedInterface);\n\n    // Update the internet reachability module\n    this._internetReachability.update(state);\n    // Convert and store the new state\n    const convertedState = this._convertState(state);\n    if (!requestedInterface) {\n      this._latestState = convertedState;\n    }\n\n    return convertedState;\n  };\n\n  private _convertState = (\n    input: PrivateTypes.NetInfoNativeModuleState,\n  ): Types.NetInfoState => {\n    if (typeof input.isInternetReachable === 'boolean') {\n      return input as Types.NetInfoState;\n    } else {\n      return {\n        ...input,\n        isInternetReachable: this._internetReachability.currentState(),\n      } as Types.NetInfoState;\n    }\n  };\n\n  public latest = (\n    requestedInterface?: string,\n  ): Promise<Types.NetInfoState> => {\n    if (requestedInterface) {\n      return this._fetchCurrentState(requestedInterface);\n    } else if (this._latestState) {\n      return Promise.resolve(this._latestState);\n    } else {\n      return this._fetchCurrentState();\n    }\n  };\n\n  public add = (handler: Types.NetInfoChangeHandler): void => {\n    // Add the subscription handler to our set\n    this._subscriptions.add(handler);\n\n    // Send it the latest data we have\n    if (this._latestState) {\n      handler(this._latestState);\n    } else {\n      this.latest().then(handler);\n    }\n  };\n\n  public remove = (handler: Types.NetInfoChangeHandler): void => {\n    this._subscriptions.delete(handler);\n  };\n\n  public tearDown = (): void => {\n    if (this._internetReachability) {\n      this._internetReachability.tearDown();\n    }\n\n    if (this._nativeEventSubscription) {\n      this._nativeEventSubscription.remove();\n    }\n\n    this._subscriptions.clear();\n  };\n}\n"]},"metadata":{},"sourceType":"module"}